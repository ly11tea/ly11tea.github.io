<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[python 的文件读写和file-like Object]]></title>
      <url>https://ly11tea.github.io/2016/09/26/python-%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8Cfile-like-Object/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>In UNIX, everything is a file.</p>
</blockquote>
<a id="more"></a> 
<h1 id="file-like-Object"><a href="#file-like-Object" class="headerlink" title="file-like Object"></a>file-like Object</h1><p>要想操纵一个文件你必须要使用open函数打开文件,open函数返回一个类文件对象,这就是这个文件在python中的抽象表示.</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote>
<p>open(file[, mode][, buffering][, encoding][, errors][, newline][, closefd=True])<br>方括号里的内容均可以省略.</p>
</blockquote>
<p>其中<br>file： 要打开的文件名，需加路径(除非是在当前目录)。唯一强制参数<br>mode： 文件打开的模式<br>buffering： 设置buffer（取值为0,1,&gt;1）<br>　0： 代表buffer关闭（只适用于二进制模式）<br>　1： 代表line buffer（只适用于文本模式）<br>encoding： 返回数据的编码（一般为UTF8或GBK）<br>errors： 报错级别（一般为strict，ignore）<br>　strict： 字符编码出现问题时会报错<br>　ignore： 字符编码出现问题时程序会忽略而过，继续执行下面的程序<br>newline： 用于区分换行符(只对文本模式有效，可以取的值有None,’\n’,’\r’,”,’\r\n’)<br>closefd： 传入的file参数类型（缺省为True）<br>　True： 传入的file参数为文件的文件名<br>　False： 传入的file参数只能是文件描述符<br>　Ps： 文件描述符，就是一个非负整数，在Unix内核的系统中，打开一个文件，便会返回一个文件描述符。<br>　<br>常用的参数有mode,encoding,buffering:</p>
<h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><p>mode：文件打开的模式。有如下几种模式<br>‘r’： 以只读模式打开（缺省模式）（必须保证文件存在）<br>‘w’：以只写模式打开。若文件存在，则会<strong>自动清空文件</strong>，然后重新创建；若文件不存在，则新建文件。使用这个模式必须要保证文件所在目录存在，文件可以不存在。<br>‘a’：以追加模式打开。若文件存在，则会追加到文件的末尾；若文件不存在，则新建文件。</p>
<p>要注意上面的<code>a</code>,<code>w</code>模式如果不用下面的<code>+</code>修饰是不能使用read…类的的函数的</p>
<p>下面四个模式要和上面的模式组合使用<br>‘b’：以二进制模式打开<br>‘t’： 以文本模式打开（缺省模式）<br>‘+’：以读写模式打开<br>‘U’：以通用换行符模式打开</p>
<p>所以加起来的组合有下面几种:<br>|模式    |描述<br>| :——–:             | :——|<br>|r    |以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。<br>|rb    |以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。<br>|r+    |打开一个文件用于读写。文件指针将会放在文件的开头。<br>|rb+ |以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。<br>|w    |打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。<br>|wb |以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。<br>|w+    |打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。<br>|wb+    |以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。<br>|a    |打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>|ab    |以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。<br>|a+    |打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。<br>|ab+    |以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</p>
<h2 id="文件读写的方法"><a href="#文件读写的方法" class="headerlink" title="文件读写的方法"></a>文件读写的方法</h2><h3 id="close-方法"><a href="#close-方法" class="headerlink" title="close()方法"></a>close()方法</h3><p>File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。为了防止可能的<strong>写入丢失</strong>,应该在每次关闭时都使用close()方法<br>语法：<br><code>fileObject.close();</code></p>
<h3 id="write-方法"><a href="#write-方法" class="headerlink" title="write()方法"></a>write()方法</h3><p>write()方法可将任何<strong>字符串</strong>写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<br>write()方法<strong>不会自动</strong>在字符串的结尾添加换行符(‘\n’)：<br>语法：<br><code>fileObject.write(string);</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fo = open(<span class="string">"a.txt"</span>, <span class="string">"wb"</span>)</div><div class="line">fo.write( <span class="string">"l\n"</span>);</div></pre></td></tr></table></figure>
<h3 id="read-方法"><a href="#read-方法" class="headerlink" title="read()方法"></a>read()方法</h3><p>read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<br>语法：<br>fileObject.read([count]);<br>在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是<strong>直到文件的末尾</strong>。</p>
<h2 id="文件定位的方法"><a href="#文件定位的方法" class="headerlink" title="文件定位的方法"></a>文件定位的方法</h2><h3 id="tell-方法"><a href="#tell-方法" class="headerlink" title="tell()方法"></a>tell()方法</h3><p>告诉你file-like Object在文件内的当前位置；换句话说，下一次的读写会发生在文件开头这么多字节之后。<br>语法：<br>fileObject.tell();</p>
<h3 id="seek-方法"><a href="#seek-方法" class="headerlink" title="seek()方法"></a>seek()方法</h3><p>语法:<br>fileObject.seek（offset [,from]）<br>方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置(默认为0)<br>如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。</p>
<h2 id="文件迭代"><a href="#文件迭代" class="headerlink" title="文件迭代"></a>文件迭代</h2><p>在Python中，文件不仅仅是一个对象，而且是一个可迭代对象！,我们可以<strong>按行</strong>迭代它.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</div><div class="line">	print(line)</div></pre></td></tr></table></figure></p>
<p>由上面的文件定位方法,我们可以看出file_like object指向的文件位置是可以变动.所以要注意file like object的指向位置</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python函数的参数]]></title>
      <url>https://ly11tea.github.io/2016/09/26/python%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>All roads lead to Rome.</p>
</blockquote>
<a id="more"></a> 
<p>python函数的参数使用非常灵活,有位置参数,默认参数,和多种的可变参数.其中可变参数的使用相较其他语言更加的便捷.现总结如下:</p>
<h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><p>位置参数是最常见的标准化参数。位置参数必须以在被调用函数中定义的<strong>准确顺序</strong>来传递。另外，没有任何默认参数）的话，传入函数（调用）的参数的精确的<strong>数目</strong>必须和声明的数字一致。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def power(a,b)</div><div class="line"></div><div class="line">power(1,2)#少了一个参数都会出现错误</div></pre></td></tr></table></figure></p>
<h1 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h1><p>对于默认参数如果在函数调用时没有为参数提供值则使用预先定义的的默认值。这些定义在函数声明的标题行中给出。c++也支持默认参数，和 python 有同样的语法：参数名等号默认值。<br>值得注意的是,同c++也一样,<strong>所有的位置参数必须出现在任何一个默认参数之前</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span><span class="params">(a,b=<span class="number">12</span>)</span></span></div></pre></td></tr></table></figure></p>
<p>同时还要注意的是,如果使用python中的<strong>可变对象</strong>作为默认参数,可能会继承上一次调用函数的结果,出现不想要的现象.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myadd</span><span class="params">(a,b=[])</span>:</span></div><div class="line">	b.append(a)</div><div class="line">	<span class="keyword">return</span> b</div><div class="line">	</div><div class="line">print(myadd(<span class="number">2</span>))</div><div class="line">print(myadd(<span class="number">3</span>))</div></pre></td></tr></table></figure></p>
<p>输出的结果是<br>[2]<br>[2, 3]<br>而非<br>[2]<br>[3]</p>
<h1 id="非关键字可变长参数（元组）"><a href="#非关键字可变长参数（元组）" class="headerlink" title="非关键字可变长参数（元组）"></a>非关键字可变长参数（元组）</h1><p>当函数被调用的时候，所有的形参（必须的和默认的）都将值赋给了在函数声明中相对应的局部变量。<strong>剩下</strong>的非关键字参数按顺序插入到一个<strong>元组</strong>中便于访问<br>同样的,可变长的参数元组必须在位置参数和默认参数之后:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">var</span><span class="params">(*a)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	<span class="keyword">for</span> ele <span class="keyword">in</span> a:</div><div class="line">		<span class="keyword">print</span> (ele)</div><div class="line">	</div><div class="line">var(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div></pre></td></tr></table></figure></p>
<p>输出为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;tuple&apos;&gt;</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td></tr></table></figure></p>
<h1 id="关键字变量参数-dict"><a href="#关键字变量参数-dict" class="headerlink" title="关键字变量参数(dict)"></a>关键字变量参数(dict)</h1><p>在我们有不定数目的或者额外集合的关键字的情况中，参数被放入一个字典中，字典中键为参数名，值为相应的参数值。为什么一定要是字典呢?因为为每个参数-参数的名字和参数值–都是成对给出—用字典来保存这些参数自然就最适合不过了。 </p>
<p>为了区分关键字参数和非关键字非正式参数，使用了双星号（**）标识符,同样的关键字参数必须位于<strong>位置参数,默认参数和非关键字可变长参数</strong>之后</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(**a)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	<span class="keyword">for</span> ele <span class="keyword">in</span> a.keys():</div><div class="line">		<span class="keyword">print</span> (ele,a[ele])</div><div class="line">vardict(city=<span class="string">'Beijing'</span>,job=<span class="string">'Engineer'</span>)</div></pre></td></tr></table></figure>
<p>输出为:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;class 'dict'&gt;</div><div class="line">job Engineer</div><div class="line">city Beijing</div></pre></td></tr></table></figure></p>
<h1 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h1><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过kw检查。<br>如果要限制关键字参数的名字，就可以用命名关键字参数,语法如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div><div class="line"><span class="comment">#命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数</span></div><div class="line"><span class="comment">#如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div><div class="line">    </div><div class="line"><span class="comment">#调用时要加上参数名</span></div><div class="line">person(<span class="string">'bert'</span>,<span class="number">22</span>,<span class="number">2</span>,<span class="number">3.</span>..,city=<span class="string">'sh'</span>,job=<span class="string">'tea'</span>)</div></pre></td></tr></table></figure></p>
<p>例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(a,b,*,c,d)</span>:</span></div><div class="line">	print(type(c))</div><div class="line">	print(a,b,c,d)</div><div class="line">vardict(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>,d=<span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>输出为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;int&apos;&gt;</div><div class="line">1 2 3 4</div></pre></td></tr></table></figure></p>
<p>值得注意的是:在使用这些参数类型时,要遵循的顺序是:<br><strong>必选参数、默认参数、可变参数、命名关键字参数和关键字参数</strong></p>
<h1 id="基于调用函数的参数概念"><a href="#基于调用函数的参数概念" class="headerlink" title="基于调用函数的参数概念"></a>基于调用函数的参数概念</h1><p>上面的概念都是相对于定义函数参数而言的,下面的两个概念与调用函数相关</p>
<h2 id="参数组"><a href="#参数组" class="headerlink" title="参数组"></a>参数组</h2><p>通过一个把元组（非关键字 参数）或字典（关键字参数）作为参数组传递给函数。</p>
<blockquote>
<p>func(<em>tuple_grp_nonkw_args, *</em>dict_grp_kw_args)</p>
</blockquote>
<p>tuple_grp_nonkw_args对应于非关键字参数,dict_grp_kw_args对应于关键字参数.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(a,b)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	print(a,b)</div><div class="line"></div><div class="line">a=(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">vardict(*a)</div></pre></td></tr></table></figure></p>
<p>输出为:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class 'int'&gt;</div><div class="line">1 2</div></pre></td></tr></table></figure></p>
<h2 id="关键字调用参数"><a href="#关键字调用参数" class="headerlink" title="关键字调用参数"></a>关键字调用参数</h2><p>让调用者通过函数调用中的参数名字来区分参数。这样规范允许参数缺失或者不按顺序,因为解释器能通过给出的关键字来匹配参数的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(a,b)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	print(a,b)</div><div class="line"></div><div class="line">a=(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">vardict(b=<span class="number">5</span>,a=<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>输出结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;int&apos;&gt;</div><div class="line">2 5</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 散列表]]></title>
      <url>https://ly11tea.github.io/2016/09/26/%E7%AE%97%E6%B3%954-%E6%95%A3%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>通过算术操作将键转化为数组的索引以将键值对存储在数组中或来访问数组中的键值对<br><a id="more"></a> </p>
<h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h1><p>如果我们有一个能够保存M个键值对的数组，那么我们就需要一个能够将任意的键值转化为该数组范围内的索引( [0, M-1 ]范围内的整数)的散列函数。我们要找的散列函敛应该易于计算并且能够均匀分布所有的键，即对于任意键，0到m-1之间的每个整数都有<strong>相等</strong>的可能性与之对应(与健无关) 。<br>每一种类型都可能要对应于一种散列函数,例如对于整数,我们常用的是<strong>除留余数法</strong></p>
</blockquote>
<p>总的来说好的散列方法需要满足下列性质:<br>等价性一一等价的键一定产生一样的散到值;<br>高效性一一计算简便;<br>均匀性一一均匀地散列到数组下标范围内</p>
<p>设计散列函数是计算机科学家的事情,但我们在使用时要确认:<br>我们使用的散列岳数能够均匀并独立地将所有的键散布于0到 M-l 之间</p>
<h1 id="基于拉链法实现的散列表"><a href="#基于拉链法实现的散列表" class="headerlink" title="基于拉链法实现的散列表"></a>基于拉链法实现的散列表</h1><p>将大小为 M的数组中的每个元素指向一条链表.每条链表中都存储着散列值为这个元素的键值对,这种方法被称为拉链法.<br><img src="/images/lalianbiao.png" style="width: 260px;"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>我们为数组内部的M个元素分别构造符号表</li>
<li>先在散列表的put,get方法中使用散列函数计算是哪一个符号表元素,再用符号表的put,get方法插入或提取元素</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> alg;</div><div class="line"></div><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.SequentialSearchST;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeparatechainingHashST</span> &lt;<span class="title">Key</span>,<span class="title">Value</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> m;<span class="comment">//hash表的数量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> n;<span class="comment">//元素总的数量</span></div><div class="line">	SequentialSearchST&lt;Key, Value&gt;[] st;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SeparatechainingHashST</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>(<span class="number">997</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SeparatechainingHashST</span><span class="params">(<span class="keyword">int</span> number)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.m=number;</div><div class="line">		st= (SequentialSearchST&lt;Key, Value&gt;[]) <span class="keyword">new</span> SequentialSearchST[number];<span class="comment">//java不支持数组的泛型定义,故只能使用类型转换的方法</span></div><div class="line">		<span class="keyword">this</span>.n=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">			st[i]=<span class="keyword">new</span> SequentialSearchST&lt;Key,Value&gt;();</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span><span class="comment">//生成对应的数组下标</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> (key.hashCode()&amp;<span class="number">0x7fffffff</span>)%m;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Value <span class="title">get</span> <span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> st[hash(key)].get(key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span> <span class="params">(Key key,Value value)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!st[hash(key)].contains(key))</div><div class="line">			n++;</div><div class="line">		st[hash(key)].put(key, value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		st[hash(key)].delete(key);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>在一张含有 M条链表和 N个键的的散列表中未命中查我和插入操作所需要的比较次数为 ~N/M<br>使用拉链法的一个好处就是这在N和M的选取上不需要太多的斟酌:<br>M偏小,N偏大时时间只会稍稍变长<br>而M偏大时,虽然浪费了空间但速度很快,甚至能够达到常数级别</p>
<h2 id="有序操作"><a href="#有序操作" class="headerlink" title="有序操作"></a>有序操作</h2><p>因为散列函数需要将键值分散,故已经失去了有序信息,所以在要使用到有序操作的地方,<strong>散列表不是一个好选择</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 平衡查找树]]></title>
      <url>https://ly11tea.github.io/2016/09/25/%E7%AE%97%E6%B3%954-%E5%B9%B3%E8%A1%A1%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>天之道,损有余而补不足.<br><em>道德经</em></p>
</blockquote>
<p>目的:寻找一种数据结构,这种结构无论在任何插入情况下都能保证对数级别的运行时间.<br><a id="more"></a> </p>
<h1 id="2-3查找树"><a href="#2-3查找树" class="headerlink" title="2-3查找树"></a>2-3查找树</h1><p>我们将一棵标准的二叉查找树小的结点称为 2- 结点(含有一个键和两条链接), 而现在我们引人 3- 结点，它含有两个键和三条链接。</p>
<blockquote>
<p>定义:一棵2-3 查找树或为一棵空树，或由以下两种结点组成:<br>2- 结点，含有一个键(及其对应的值)和两条链接，左链接指向的 2-3 树中的键都<strong>小子</strong>该结点，右链接指向的 2-3 树中的键都<strong>大于</strong>该给点。<br>3- 结点，含有两个键(及其对应的值)和三条链接，左链接指向的 2-3 树中的键都<strong>小于</strong>该结点，中链接指向的2-3树中的键都位于该结点的两个键<strong>之间</strong>，右链接指向的 2-3树中的键都<strong>大于</strong>该给点。</p>
</blockquote>
<p><img src="images\black_red_tree\2_3tree.png" style="width: 260px;"></p>
<p>下面来重点谈谈2-3查找树的插入过程:</p>
<ol>
<li>向 2- 结点中插入新键:如果要在一个2-节点上插入新键,只需要将这个2-节点改为3-节点即可.<br><img src="images\black_red_tree\1.png" style="width: 260px;"></li>
<li>向只有一个3-节点的树中插入新键:直接向新键插入3-节点中,于是当前节点拥有三个键,四个连接,所以可以分解为三个二叉搜索树的节点,中间节点作为根节点,左节点为最小节点,右节点为最大节点.<br><img src="images\black_red_tree\2.png" style="width: 260px;"></li>
<li>向一个父节点为2-节点的3-节点插入新键:直接将新键插入当前节点中,于是当前节点拥有三个键,四个连接,但此时我们把中间键上浮至2-父节点.使父节点变为3-节点.<br><img src="images\black_red_tree\3.png" style="width: 260px;"></li>
<li><p>向一个父结点为 3- 结点的 3- 结点中插入新键:我们仍然将新键插入当前节点中,再次分解为三个2-节点,但此时上浮的根节点,会将其父节点也变为4-节点,所以我们再次重复,直到找到2-节点为止.<br><img src="images\black_red_tree\4.png" style="width: 260px;"></p>
</li>
<li><p>分解根节点:如果一个新插入键值路途上的所有节点都是3-节点,那么根节点也就变成了4-节点,此时我们套用情况2,将4-节点化为3个2-节点,树高+1<br><img src="images\black_red_tree\5.png" style="width: 260px;"></p>
</li>
</ol>
<p>特点:</p>
<ul>
<li>2-3查找树的每次插入都是局部性的,即对全局没有影响.</li>
<li>和标准的二叉态钱树由上向下生长不同. 2-3 树的生长是由下向上的。</li>
<li>性能:<strong>查找和插入操作访问的结点必然不超过 lgN个</strong></li>
</ul>
<h1 id="红黑二叉查找树"><a href="#红黑二叉查找树" class="headerlink" title="红黑二叉查找树"></a>红黑二叉查找树</h1><p>2-3查找树虽然带来了显著的性能改善,但是也增加了数据结构的复杂度和编码的难度,如果采用不当的编码方式,有可能造成性能低于二叉树;所以我们采用红黑树的方法,在二叉树的基础上实现了2-3查找树<br>我们们将树的链接分为两种类型:</p>
<ol>
<li>红链接将2个2-结点连接起来构成一个 3- 结点.</li>
<li>黑链接则是2-3查找树上的普通连接<br>确切地说,我们将 3- 结点表示为一条左斜的红色链接相连的2个2-节点<br>图</li>
</ol>
<blockquote>
<p>定义:一种带有红黑链接的二叉查找树:</p>
<ol>
<li>红链接均为左链接;</li>
<li>没有任何一个结点问时和两条红链接相连:</li>
<li>该树是完美黑色平衡的(任意空连接到根节点的黑色链接的数量是相同的)</li>
</ol>
</blockquote>
<p>一棵红黑树的红链接拉平.那么所有的空链接到根结点的距离都是相同的。 如果将所有由红链接相应的点结合,得到的就是一棵 2-3 树。<br>图</p>
<h2 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h2><p>我们在节点中表示链接的颜色(除根节点外.每个节点都有且仅有一条指向自己的链接).<br>约定:</p>
<ol>
<li>一个结点的颜色,指的是<strong>指向该结点的链接的颜色</strong></li>
<li>颜色变量类型为bool值,true代表红色,false代表黑色.</li>
<li>空节点颜色为黑色</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackRedTree</span> &lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;,<span class="title">Value</span>&gt; </span></div><div class="line">&#123;</div><div class="line">	Node root;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> Red=<span class="keyword">true</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> Black=<span class="keyword">true</span>;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></div><div class="line">	&#123;</div><div class="line">		Key key;</div><div class="line">		Value value;</div><div class="line">		Node left,right;</div><div class="line">		<span class="keyword">int</span> N;</div><div class="line">		<span class="keyword">boolean</span> colour;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key,Value value,<span class="keyword">int</span> N,<span class="keyword">boolean</span> colour)</span></span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">this</span>.key=key;</div><div class="line">			<span class="keyword">this</span>.value=value;</div><div class="line">			<span class="keyword">this</span>.colour=colour;</div><div class="line">			<span class="keyword">this</span>.N=N;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> Black;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> node.colour==Red;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h2><p>在插入新的键时我们可以使用旋转保证2-3树和红黑树之间的一一对应关系，因为旋转操作可以保持红黑树的两个重要性质:<strong>有序性和完美平衡性</strong>。<br>特点:</p>
<ol>
<li>旋转都是把两节点中较小点作为根节点变为将较大点变为根节点,并调换红节点</li>
<li>使用递归的方式进行旋转,每次返回经过旋转的当前节点值.</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateleft</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		Node temp=node.right;</div><div class="line">		node.right=temp.left; <span class="comment">//注意:本行与下面一行不可颠倒</span></div><div class="line">		temp.left=node;</div><div class="line">		temp.colour=node.colour;</div><div class="line">		node.colour=Red;</div><div class="line">		temp.N=node.N;</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> temp;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">rotateright</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		Node temp=node.left;</div><div class="line">		node.left=temp.right;</div><div class="line">		temp.right=node;</div><div class="line">		temp.colour=node.colour;</div><div class="line">		node.colour=Red;</div><div class="line">		temp.N=node.N;</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> temp;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><p>情况:</p>
<ol>
<li>向 2- 结点中插入新键:如果新键小于老键,我们只需将新键插入老键左链接并作为红节点.若大于,则需要将新键插入老键右链接,并进行左旋.</li>
<li>向树底的 2- 结点插入新键:与情况1相同<br><em>以上两种情况同2-3查找树中的插入情况1相类似.</em></li>
</ol>
<p>3.一棵双键树 〈 即一个 3- 结点〉 中插入新键:<br>a. 新键大于原树中的两个键:这种情况新键作为紅节点插入到双键树的右侧,那么就出现了两个红链接的现象,此时将两个红链接都置黑,得到3个2-树<br>对应于2-3查找树的情况2<br>b. 如果新键小于原树中的两个键,那么新键会被放置进当前左子树的左子树中,这样就出现了两条连续的红链接,此时将根节点右旋即可得到情况a.<br>c. 如果新键小于原树中的一个键大于另外一个,那么也会出现两个连续红链接的现象,一个为左链接一个下一层的右链接.,此时将右链接左旋即可得到情况b.</p>
<p>其中情况a的变换颜色,我们需要把子节点的链接由红置黑,同时将父节点由黑置红.值得注意的是:根节点始终应当是黑的.</p>
<p>4.树底部3-节点插入新键<br>与情况4相同</p>
<p>整个插入过程使用递归实现,事实上就是一个红链接不断向上移动的过程</p>
<p>总的来说,对于红黑树的操作为:</p>
<ol>
<li>如果右子结点是红色的而左子结点是黑色的.当前节点进行左旋转;</li>
<li>如果左子结点是红色的且它的左子结点也是红色,当前节点进行右旋转</li>
<li>如果左右子结点均为红色进行颜色转换。<br>需要在插入时按次序执行上述语句.<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flipcolour</span><span class="params">(Node node)</span></span></div><div class="line">&#123;</div><div class="line">	node.right.colour=Black;</div><div class="line">	node.left.colour=Black;</div><div class="line">	node.colour=Red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key,Value value)</span></span></div><div class="line">&#123;</div><div class="line">	root=put(root,key, value);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changecolour</span><span class="params">(Node node)</span></span></div><div class="line">&#123;</div><div class="line">	node.left.colour=node.right.colour==Black;</div><div class="line">	node.colour=Red;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node node,Key key,Value value)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Node(key, value, <span class="number">1</span>, Red);</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>) node=put(node.left, key, value);</div><div class="line">	<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>) node=put(node.right, key, value);</div><div class="line">	<span class="keyword">if</span>(cmp==<span class="number">0</span>) node.value=value;</div><div class="line">	<span class="keyword">if</span>(node.right.colour==Red&amp;&amp;node.left.colour!=Red)</div><div class="line">		node=rotateleft(node);</div><div class="line">	<span class="keyword">if</span>(node.left.colour==Red&amp;&amp;node.left.left.colour==Red)</div><div class="line">		node=rotateright(node);</div><div class="line">	<span class="keyword">if</span>(node.left.colour==Red&amp;&amp;node.right.colour==Red)</div><div class="line">		changecolour(node);</div><div class="line">	node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><ol>
<li>所有基于红黑树的符号表实现都能保证操作的运行时间为<strong>对数</strong>级别</li>
<li>一棵大小为 N 的红黑树的高度不会超过 2lgn,事实上在大多数情况下比较次数为lgn-0.5</li>
<li>相比较于二叉查找树的1.39lgn提升了40%</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python的格式化字符串与转义字符]]></title>
      <url>https://ly11tea.github.io/2016/09/24/python%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Give therefore to the emperor the things that are the emperor’s;and to God the things that are God’s.</p>
<p> <em>Gospel of Matthew</em></p>
</blockquote>
<p>其实python的格式化字符串与C的printf函数相当类似,但用法显得更为灵活,所以还是稍微总结一下.<br><a id="more"></a> </p>
<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>先看一下python字符串的格式,格式化字符串时，Python使用一个字符串作为模板。模板中有格式符，这些格式符为真实值预留位置，并说明真实数值应该呈现的格式。Python用一个tuple将多个值传递给模板，每个值对应一个格式符。</p>
<blockquote>
<p>模板%(value1,value2,…)</p>
</blockquote>
<p>其中模板格式为:</p>
<blockquote>
<p>[(name)][flags][width].[precision]typecode</p>
</blockquote>
<p>下面来一一介绍其中的元素含义:</p>
<h2 id="flags和width-precision"><a href="#flags和width-precision" class="headerlink" title="flags和width precision"></a>flags和width precision</h2><table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">定义宽度或者小数点精度 </td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">用做左对齐 </td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">在正数前面显示加号( + ) </td>
</tr>
<tr>
<td style="text-align:center">(空格键)</td>
<td style="text-align:center">在正数前面显示空格 </td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) </td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">显示的数字前面填充‘0’而不是默认的空格 </td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">‘%%’输出一个单一的’%’ </td>
</tr>
<tr>
<td style="text-align:center">(var)</td>
<td style="text-align:center">映射变量(字典参数) </td>
</tr>
<tr>
<td style="text-align:center">m.n</td>
<td style="text-align:center">m 是显示的最小总宽度,n是小数点后的位数(如果可用的话) </td>
</tr>
</tbody>
</table>
<h2 id="typecode"><a href="#typecode" class="headerlink" title="typecode"></a>typecode</h2><table>
<thead>
<tr>
<th style="text-align:center">格式化字符</th>
<th style="text-align:center">转换方式 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%c</td>
<td style="text-align:center">转换成字符(ASCII 码值，或者长度为一的字符串) </td>
</tr>
<tr>
<td style="text-align:center">%r</td>
<td style="text-align:center">优先用 repr()函数进行字符串转换 </td>
</tr>
<tr>
<td style="text-align:center">%s</td>
<td style="text-align:center">优先用 str()函数进行字符串转换 </td>
</tr>
<tr>
<td style="text-align:center">%d / %i</td>
<td style="text-align:center">转成有符号十进制数 </td>
</tr>
<tr>
<td style="text-align:center">%u</td>
<td style="text-align:center">转成无符号十进制数 </td>
</tr>
<tr>
<td style="text-align:center">%o</td>
<td style="text-align:center">转成无符号八进制数 </td>
</tr>
<tr>
<td style="text-align:center">%x/%X</td>
<td style="text-align:center">(Unsigned)转成无符号十六进制数(x/X代表转换后的十六进制字符的大小写) </td>
</tr>
<tr>
<td style="text-align:center">%e/%E</td>
<td style="text-align:center">转成科学计数法(e/E 控制输出 e/E) </td>
</tr>
<tr>
<td style="text-align:center">%f/%F</td>
<td style="text-align:center">转成浮点数(小数部分自然截断) </td>
</tr>
<tr>
<td style="text-align:center">%g/%G</td>
<td style="text-align:center">%e 和%f/%E 和%F 的简写 </td>
</tr>
<tr>
<td style="text-align:center">%%</td>
<td style="text-align:center">输出% </td>
</tr>
</tbody>
</table>
<p>其中比较有用的可能是m.n,即设置浮点数和整数的总宽度和浮点数的小数精度.<br>基本的一些例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%x"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'6c'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%X"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'6C'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%#X"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'0X6C'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%#x"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'0x6c'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%f'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.567890'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%.2f'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.57'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%E'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1.234568E+03'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%e'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1.234568e+03'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%g'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.57'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%G'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.57'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%e"</span> % (<span class="number">1111111111111111111111L</span>) </div><div class="line"><span class="string">'1.111111e+21'</span></div><div class="line"><span class="comment">#科学计数法表示同样也可以适用m.n,</span></div><div class="line">&gt;&gt;&gt;print(<span class="string">"%66.10e"</span> % (<span class="number">1111111111111111111111</span>))</div><div class="line"></div><div class="line">                                                  <span class="number">1.1111111111e+21</span></div></pre></td></tr></table></figure></p>
<p>值得一提的是格式化字符<em>,它能够用后面tuple中相应的值代入width和precision<br>例如 :`print(“%.</em>f” % (4, 1.2))`<br>还有利用name参数,我们可以使用预先定义的格式化字符串生成字符串:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">formatter = <span class="string">"%r %r %r %r"</span></div><div class="line"><span class="keyword">print</span> formatter % (<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>当然我们可以看到python的格式化字符串指令不依赖于函数,只是一个返回字符串的运算符.所以我们既可以用来输出字符串,也可以用来定义字符串..等等其他用途.</p>
<h1 id="python的三引号"><a href="#python的三引号" class="headerlink" title="python的三引号"></a>python的三引号</h1><p>三引号’’’ ‘’’,在print中用来输出多行字符串,直接使用三引号还可以用来进行多行注释.</p>
<h1 id="python的转义字符"><a href="#python的转义字符" class="headerlink" title="python的转义字符"></a>python的转义字符</h1><table>
<thead>
<tr>
<th style="text-align:center">转义字符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">(在行尾时)</td>
<td style="text-align:center">续行符</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">反斜杠符号</td>
</tr>
<tr>
<td style="text-align:center">\’</td>
<td style="text-align:center">单引号</td>
</tr>
<tr>
<td style="text-align:center">\”</td>
<td style="text-align:center">双引号</td>
</tr>
<tr>
<td style="text-align:center">\a</td>
<td style="text-align:center">响铃</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:center">退格(Backspace)</td>
</tr>
<tr>
<td style="text-align:center">\e</td>
<td style="text-align:center">转义</td>
</tr>
<tr>
<td style="text-align:center">\000</td>
<td style="text-align:center">空</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:center">换行</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td style="text-align:center">纵向制表符</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:center">横向制表符</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td style="text-align:center">回车</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td style="text-align:center">换页</td>
</tr>
<tr>
<td style="text-align:center">\oyy</td>
<td style="text-align:center">八进制数yy代表的字符，例如：\o12代表换行</td>
</tr>
<tr>
<td style="text-align:center">\xyy</td>
<td style="text-align:center">十进制数yy代表的字符，例如：\x0a代表换行</td>
</tr>
<tr>
<td style="text-align:center">\other</td>
<td style="text-align:center">其它的字符以普通格式输出</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 二叉查找树]]></title>
      <url>https://ly11tea.github.io/2016/09/23/%E7%AE%97%E6%B3%954-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>世界上有10种人，一种懂二进制，一种不懂</p>
</blockquote>
<a id="more"></a> 
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>一根二又查找树 ( BST ) 是一根<strong>二叉树</strong>，其中每个结点都含有一个Comparable 的键(以及相关联的值)且每个结点的键都<strong>大于其左子树</strong>中的任意结点的键而<strong>小子右子树</strong>的任意结点的键。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1></blockquote>
<h2 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h2><p>用嵌套定义的链表实现,每个节点含有一个健、 一个值、一条左链接、一条右链接和一个结点计数器<br>实现的私有方法 size方法 会将空链接的值当作 0 ，这样我们就能保证以下公式对于二叉树中的任意结点 x 总是成立:<br>size(x)  =  size(x .left)  +  size(x. right)  +  1 </p>
<h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h2><p>不难想象,搜索树的查找方法是一个递归的算法:</p>
<ol>
<li>如果树是空的.则查找立刻命中;</li>
<li>如果被查找的键和根结点的键相等，查找命中.</li>
<li>如果被查找的键大于根节点的值,则跳向右节点,如果小于则跳向左节点.</li>
<li>递归的执行</li>
</ol>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> alg;</div><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;,<span class="title">Value</span>&gt; </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Node root;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">private</span> Value value;</div><div class="line">		<span class="keyword">private</span> Key key;</div><div class="line">		<span class="keyword">private</span> Node left;</div><div class="line">		<span class="keyword">private</span> Node right;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> N;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key,Value value,<span class="keyword">int</span> N)</span></span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">this</span>.key=key;</div><div class="line">			<span class="keyword">this</span>.value=value;</div><div class="line">			<span class="keyword">this</span>.N=N;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> size(root);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> node.N;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 公有接口与私有接口需分开:对于用户公有接口,get只需关心键值是什么</div><div class="line"> * 而在私有接口中因为是采用递归的方法查找元素,故需要加入node参数</div><div class="line">*/</div><div class="line">	<span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> get(root,key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node node,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> get(node.left,key);</div><div class="line">		<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> get(node.right, key);</div><div class="line">		<span class="keyword">return</span> node.value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Value value,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		root=put(root, key,value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node node ,Value value,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Node(key, value, <span class="number">1</span>);</div><div class="line">		<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">			node.left=put(node.left, value, key);</div><div class="line">		<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">			node.right=put(node.right, value, key);</div><div class="line">		<span class="keyword">if</span>(cmp==<span class="number">0</span>)</div><div class="line">			node.value=value;</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>使用二叉查找树的算法的运行时间取决于<strong>树的形状</strong>,在最好的情况下，<br>一棵含有 N 个结点的树是完全平衡的.每条空链接和根结点的距离都为~lgN。 在最坏的情况下，搜索路径上可能有 N个结点。<br><img src="/images/condition.png" style="width: 260px;"></p>
<p>如果假设元素的插入顺序是随机的,二义查找树和快速排序几乎就是双胞胎。 树的根节点就是快速排序巾的第一个切分元素(左侧的键都比这个元素小，右侧的键都比它大).<br>可证明:二叉搜索搜索树寻找到一个元素的平均时间为<strong>2lnn</strong>(1.39 lgn)</p>
<h1 id="顺序化函数"><a href="#顺序化函数" class="headerlink" title="顺序化函数"></a>顺序化函数</h1><h2 id="floor和ceiling"><a href="#floor和ceiling" class="headerlink" title="floor和ceiling"></a>floor和ceiling</h2><p>floor(向下取整,找到小于等于要求元素的最大值):</p>
<ol>
<li>若要求元素小于当前节点,则floor元素在左子树中或者无floor元素(左子树为空);</li>
<li>若要求的元素大于当前节点且右子树中有小于待求元素的节点时,要求节点在右子树中.否则当前节点就是要求节点</li>
</ol>
<p>ceiling(向上取整,找到大于等于要求元素的最小值):</p>
<ol>
<li>若要求元素小于当前节点且左子树中还有大于要求元素的节点时,要求节点在左子树中,否则就是当前节点.</li>
<li>若要求元素大于当前节点时,则ceiling元素在右子树中或者没有(右子树为空)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> Node <span class="title">ceiling</span><span class="params">(Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> ceiling(root,key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">ceiling</span><span class="params">(Node node,Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		Node t=ceiling(node.left,key);</div><div class="line">		<span class="keyword">if</span> (t==<span class="keyword">null</span>) </div><div class="line">			<span class="keyword">return</span> node;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> t;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> ceiling(node.right, key);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">floor</span><span class="params">(Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> floor(root,key);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node node,Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp==<span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	<span class="keyword">if</span> (cmp&lt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> floor(node.left,key);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		Node t=floor(node.right, key);</div><div class="line">		<span class="keyword">if</span>(t==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> node;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> t;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="rank和select"><a href="#rank和select" class="headerlink" title="rank和select"></a>rank和select</h2><p>select:</p>
<ol>
<li>即为访问在数组中次序为K(从0开始)的元素，和查找键值为KEY的元素方法不同</li>
<li>找到排名为k 的键(即树中恰好有k个小于其的键)。如果左子树的结点数t 大于k，那么我们就继续(递归地)在左子树中查找排名为 k 的键;如果 t 等于k， 我们就返回根结点;如果 t小子k，我们就(递归地)在右子树巾查找排名为 (k-t-1)(-1是因为根节点) 的节点并返回。 </li>
</ol>
<p>rank:</p>
<ol>
<li>rank是select的逆方法</li>
<li>如果给定的键根结点的键相等.我们返回左子树中的节点数t;如果给定的健小于根结点.我们会返回<br>该键在左子树子树中的排名(递归计算);如果给定的健大于根结点，我们会返回t+1+该键右子树的排名.</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Node <span class="title">select</span><span class="params">(<span class="keyword">int</span> i)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> select(i,root);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">select</span><span class="params">(<span class="keyword">int</span> i,Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> length=size(node.left);</div><div class="line">		<span class="keyword">if</span> (length==i)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> node;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (length&gt;i) </div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> select(i, node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> select(i-length-<span class="number">1</span>, node.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> rank(root,key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node node,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> t=size(node.left);</div><div class="line">		<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(cmp==<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> t;</div><div class="line">		<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> rank(node.left, key);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> t+<span class="number">1</span>+rank(node.right, key);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>删除最大键和删除最小键</p>
<ol>
<li>从根节点开始不断地(递归)向左子树遍历,直到某个节点左子树为空时(显然这个节点就是最小的节点),返回这个节点的右节点,使这个节点的父节点指向这个节点的右节点.</li>
</ol>
<p>删除指定节点,设指向当前节点为x</p>
<ol>
<li>将指向即将被删除的节点的链接保存为t;</li>
<li>将节点链接保存为min(t.right)</li>
<li>将t.right中的最小节点删除.</li>
<li>x.left=t.left</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delmin</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	root=delmin(root);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">delmin</span><span class="params">(Node node)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> node.right;</div><div class="line">	<span class="keyword">else</span> </div><div class="line">	&#123;</div><div class="line">		node.left=delmin(node.left);</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Key key)</span></span></div><div class="line">&#123;</div><div class="line">	root=del(root,key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">del</span><span class="params">(Node node,Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">		node.left=del(node.left, key);</div><div class="line">	<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">		node.right=del(node.right, key);</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node.left==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> node.right;</div><div class="line">		<span class="keyword">if</span>(node.right==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> node.left;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			Node temp=node;</div><div class="line">			node=min(node.right);</div><div class="line">			node.right=delmin(temp.right);</div><div class="line">			node.left=temp.left;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">    node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> node;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要体会递归删除节点的方法:</p>
<ol>
<li>使用返回值为节点类型(node)的函数依次向下递归,不需删除的节点,返回<strong>当前递归所在的节点</strong></li>
<li>需要删除的节点,返回<strong>要删除节点的替代节点</strong>.</li>
<li>还要注意维护当前节点的<strong>数量值</strong>.</li>
</ol>
<h2 id="范围查找"><a href="#范围查找" class="headerlink" title="范围查找"></a>范围查找</h2><ol>
<li>使用中序遍历的方法,先打印出左子树所有的键,然后向上回溯并打印<strong>最近</strong>的根节点,最后打印右子树</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Iterable&lt;Key&gt;keys(Key lo,Key hi)</div><div class="line">	&#123;</div><div class="line">		Queue&lt;Key&gt; matchkeys=<span class="keyword">new</span> Queue&lt;Key&gt;() ;</div><div class="line">		keys(matchkeys, root,lo,hi);</div><div class="line">		<span class="keyword">return</span> matchkeys;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keys</span><span class="params">(Queue&lt;Key&gt;matchkeys,Node node,Key lo,Key hi)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> locmp=lo.compareTo(node.key);</div><div class="line">		<span class="keyword">int</span> hicmp=hi.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(locmp&lt;<span class="number">0</span>)</div><div class="line">			keys(matchkeys,node.left,lo,hi);</div><div class="line">		<span class="keyword">if</span>(locmp&lt;=<span class="number">0</span>&amp;&amp;hicmp&gt;=<span class="number">0</span>)</div><div class="line">			matchkeys.enqueue(node.key);</div><div class="line">		<span class="keyword">if</span>(hicmp&gt;<span class="number">0</span>)</div><div class="line">			keys(matchkeys, node.right, lo, hi);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>要注意中序遍历的递归实现的顺序:先使用<strong>递归语句不断遍历左子树</strong>,遍历完成后首先将当前左子节点送入队列,然后送入根节点,这时若条件达成还会遍历右子树.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一首诗 翻译]]></title>
      <url>https://ly11tea.github.io/2016/09/20/%E4%B8%80%E9%A6%96%E8%AF%97-%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Here, though the world explode, these two survive,And it is always eighteen ninety-five.<br><strong>Vincent Starrett</strong></p>
</blockquote>
<blockquote>
<p>Here dwell together still two men of note<br>Who never lived and so can never die:<br>How very near they seem, yet how remote<br>That age before the world went all awry.<br>But still the game’s afoot for those with ears<br>Attuned to catch the distant view-halloo:<br>England is England yet, for all our fears—<br>Only those things the heart believes are true.</p>
<p>A yellow fog swirls past the window-pane<br>As night descends upon this fabled street:<br>A lonely hansom splashes through the rain,<br>The ghostly gas lamps fail at twenty feet.<br>Here, though the world explode, these two survive,<br>And it is always eighteen ninety-five.</p>
</blockquote>
<a id="more"></a> 
<p>这是著名(好吧其实之前我也没听说过)的福迷Vincent Starrett写的一首诗,这个人几乎与书中的福尔摩斯生活在一个时代,主业是一个美国的记者,但他更为人所知的是写过一本研究福尔摩斯的著作《The Private Life of Sherlock Holmes》(在1933年出版,可见这家伙迷得有多早),还有这首诗.听说神夏4今年寒假会出来,就想着翻译下这首诗酝酿一下感情<br>)))逃</p>
<blockquote>
<p>这住着两个重要的人<br>他们从来没存在过所以也从未死去<br>他们离我们很近却又十分遥远<br>在世界还未崩坏之前<br>但对观众们来说好戏才刚开始<br>就像是远方猎人的呼号:<br>英格兰还是那个令人恐惧的大不列颠–<br>我们相信这是真的.</p>
<p>硫磺色的烟雾划过窗口<br>当夜幕降临这条虚构的街.<br>孤夜,一架马车穿过雨幕<br>鬼魅的煤气灯孤悬于20英尺外.<br>在这里,世界爆炸,这两个人活下来,<br>永恒的1895年.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[<梦断代码>书摘与笔记]]></title>
      <url>https://ly11tea.github.io/2016/09/18/%E6%A2%A6%E6%96%AD%E4%BB%A3%E7%A0%81-%E4%B9%A6%E6%91%98%E4%B8%8E%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“今有程序员五人，代码需时日几何？” “一年。”<br>“吾急需之！若有十人，几何？” “两年。”<br>“百人若何？” “万世。”</p>
</blockquote>
<a id="more"></a> 
<h1 id="软件时间"><a href="#软件时间" class="headerlink" title="软件时间"></a>软件时间</h1><blockquote>
<p>1.那时我年方十五，正迷恋于一个叫做 Sumer的游戏，在费就申 ，我<br>管理着新月沃土上一座古代城邦。今天的电脑游戏玩家也会嘲笑其在<br>嫩:它在一卷纸上逐行打印出大写字母，报告游戏进程。由远姑且<br>分配食用和留种的谷物，然后程序就会告知城邦每年的发展情况。”汉漠<br>拉比陆下，”程序像一个诚惶诚恐的宰相般报告说，”微臣伏启圣鉴……”</p>
</blockquote>
<p>这句话让我想起了2004-05年的时候玩三国志的经历,那时候不知道从哪发现了一个对岸三国游戏爱好者的网站,是一个只有ip地址的网站,从那上面下到了一个dos下的三国游戏,显示游戏地图就是用字符串打印出来的网状图,我想这就是”蛮荒时代”游戏的样子吧.</p>
<blockquote>
<p>2.我不在乎干到多晚。 F 线地铁整夜运行， 可以把我带回位于皇后区<br>的家。一定得重新设计游戏中的革命模式!</p>
</blockquote>
<p>我们编写或者重构软件时总是雄心勃勃的,其实沉浸在编码的体验与沉迷游戏是一样的,常常埋头实现某个feature或者fix bug,再抬头时窗外天色已经昏暗.从另一个方面来说这个过程又是危险的,同电子游戏一样,这个过程能让你完全失去时间的概念,这就是作者所说的软件时间,可长可短.再没有比他更危险,混沌却又迷人的事情了.</p>
<blockquote>
<p>3.关于软件缺陆的话题，只要谈上几分钟，必会有人拍案叹道，”为什<br>么就是不能像造桥那样造软件? .. </p>
</blockquote>
<p>虽然我们一直叫软件工程,然而却从来没有其他任何一种工程掺杂进这么多人的因素,软件工程,事实上我们是在和自己战斗.</p>
<blockquote>
<p>4.软件错误每年造成美国 595 亿美元的经济损失，三分之二的项目明显延误或超出预算，甚至干脆无疾而终。</p>
</blockquote>
<p>延误,延误.可能是每一个项目都要经历的过程,我们永远没有办法准确预估要解决的问题的难度和解决手段的准确性,并且往往显得乐观.所以不要相信程序员的时间表.</p>
<blockquote>
<p>5.有些人梦想炸毁今天的整座软件大厦，替以某种全新之物。 有些人则只一昧盼望找到不太顽固、更能响应人类愿望和行为流程的程序员，盼望能得到招之即来、挥之即去的软件，盼望得到足堪依赖的代码。</p>
</blockquote>
<p>只要我们无法改变我们自己本身,就只能继续妥协.从面向过程到面向对象,泛型编程,我们尽量让自己妥协的更少.</p>
<h1 id="死定了"><a href="#死定了" class="headerlink" title="死定了"></a>死定了</h1><blockquote>
<p>1.不确定因素太多 : 你所需的时间取决于其他人所花的时间。</p>
</blockquote>
<p>开发更多的时候是一项团队运动,一个节点上的阻塞,可能会导致全面的阻塞.</p>
<blockquote>
<p>2.意见取得一致了:黑洞式的缺陆一一即无法确定修正所需时长的缺<br>陷一一在 Bugzilla 申应该用特别的警示词标记出来。</p>
</blockquote>
<p>黑洞式的漏洞看上去会使人感到焦躁,然而真正深入其中会发现他无知无觉,甚至充满诱惑,引诱你用越来越多的时间修复他,也许下一刻就好了呢?,我们在其前的态度越来越像一个赌徒,不过筹码换成了时间,心中也只是单纯希望之前的时间没有白费,但眸然回首,更多的时间消耗于其中.</p>
<blockquote>
<p>3.软件项目难以按照进度安排实现，这种情况极为常见，而且为众人所宽窑。在软件开发世界里，进度延误普遍到人们特意生造出一个委婉词来描述它: slippage (失速).当然， 每个领域都存在延误现象。司法诉讼程序蜗行般的进度尽人皆知 ; 建筑承包商要是按期完工，就会招来怀疑的目光。然而，软件时间自我扭曲再头尾相撞，如同奠比乌斯环①一般令人费解。进度忽而突飞猛进，忽而不知何故驻足道中。在你以为大功即将告成之时，却又山穷水尽，花上整半年时间， 一无所得。</p>
</blockquote>
<p>软件的时间是非线性的,不确定的.我们很可能因为改掉了一个BUG,加快进度.也可能因为增加一个feature掉入深渊.有没有一种方式如同建筑上的施工进度一样线性的衡量开发进度,还没有答案.</p>
<blockquote>
<p>4.布鲁克斯法则就这样产生了 ， 昕起来既是原则也是悖论”<strong>往已延误的项目中补充人力 ， 只会使其继续延误</strong>。”布鲁克斯写道，软件开发者通常都是乐天派，他们认定每个缺陷可以被迅速修正，且修正旧缺陷必能减少新缺陷的数量。布鲁克斯发现，在实际开发中，编码只占项目开发时间的 1/6 ， 有一半时间用于测试和修正缺陷。但只有少数项目经理会真正按照这种思路来安排开发人员的工作时间。</p>
</blockquote>
<p>2-8时间在软件开发上一样适用</p>
<blockquote>
<p>5.在预估及安排项目进度上的每一份努力,是”危险且具欺骗性的神话”。<br>所谓”人月··，是一种科学管理概念，它假定生产力可被拆分为不连续、无差异、可替换的单元。布鲁克斯观察到，”<strong>只有在任务能分派给许多互相之间无须沟通的工作者</strong>时，人和月才是可互换品。”对于软件而言， 项目各有差异、工具不断升级，每当团队中加入一个新组员，老组员就得放下手边的工作，帮助新组员进入角色，每位组员都要等待重新分派任务，好让新组员有事可做。在你意识到这一切之前，已经远远落后于进度了。在最坏的情况下，这会导致<strong>灾难般的延误循环</strong>，一种”再生性进度灾难”。每次重新安排进度计划，都导致<strong>雇用更多人力，于是又不得不重新安排</strong>进度。布鲁克斯对此心存恐惧:疯狂在兹。”</p>
</blockquote>
<p>这算是对人月神话比较经典的概括,十月怀胎,一朝分娩.然而十个孕妇,也无法在一个月里生出孩子.</p>
<blockquote>
<p>6.尽管他们采用了诸如邮件列表、blog、缺陆跟踪、源码控制等工具，但和他人保持一致仍然极其困难。</p>
</blockquote>
<p>没有银弹.自从人月神话诞生那天起有太多的东西被当做银弹,然而没有一个真正奏效.</p>
<blockquote>
<p>7.”开放源代码软件”这种开发方法论在 〈 人月神话〉 的年代尚未出现。与之后其他任何一种开发方式不同，开源让编程世界错以为布鲁克斯法则将成弃履。<br>1985 年，麻省理工怪才斯托曼出于对商业软件产业封闭代码积习的憎恨， 创办了自由软件基金会( Free Software Foundation )。基金会发布了一种特殊的软件许可，依据该许可， 你能够获得全部所需代码、复用这些代码、组合到新产品中一一但利用该代码创建出来的任何产物，也必须采用同样的许可。这种被称作GPL ( GNU Public License )</p>
</blockquote>
<p>不管你相信与否这些人,这项运动确实改变了程序开发的方式,现如今,就连GNU当年的针对者,微软也拥抱了开源.</p>
<blockquote>
<p>8.”多年来，我一直在宣扬小工具、快速原型和进化式编程的 UNIX 福音。 可我曾相信，存在某种重要的复杂性，需要是集中旦有计划的手法来解决。 我也曾相信，最重要的软件……需要像<strong>建教堂一般，由独立的巫师或一队相互隔离的魔法师精心打造</strong>，在面世之前绝不发布 beta 版本。李纳斯 · 托瓦茨的开发风格一一平发布、多发布、全委托、尽开放一一让我吃惊。 这里不存在<strong>静穆、虔诚的教堂式开发</strong>一一相反，Linux社样看似一个<strong>乱哄哄的大集市</strong>，铺陈了各种日程和手法……要从中得到前后一致和稳定的系统，简直只能指望奇迹再三出现。可事实上<strong>这种集市风格看来行之有效</strong>.</p>
<p>9.瑞蒙德指出其中的两个要诀:其一，低成本、广泛地接人像互联网那样的网络，让开发者之间能建立迅速、可信的沟通渠道，存储可被开放访问的共享知识和代码池;其二，围绕一种领导方式一一如托瓦茨那样的方式一一形成合作团队的良好风气.<br>“只要<strong>有足够多的 beta 版测试人员和开发者队伍</strong>， 几乎所有问题都很快被发现，而且总有人知道该怎么修复。或者用不太正式的说法，眼<br>球足够多，缺陆无处躲。’我把这叫做 ‘ 李纳斯法则 ‘ “”乐享即能高效”瑞蒙德写道。”愉悦是金。”这些理想化的格言令人振奋,一旦需经实践验证。开放源代码似乎也受困于延误。开源运动的新集市模式在很多方面改变了计算世界，但说到能比大教堂模式更快地让新产品面世，却并无显著建树。</p>
</blockquote>
<p>敏捷型开发和开源同样不是银弹,他可能使我们开发出更好的软件,但并不一定以最快的速度.并且软件的质量还有可能出现下降:</p>
<blockquote>
<p>现在微软全面拥抱敏捷开发，敏捷开发指的就是快速迭代，第一天提出需求，第二天开发，第三天开发本人做简单局部测试，当天下午上线，根本没时间回归，一切回归测试结果以用户骂娘为准，所以不需要测试职位了.以前每个组的dev和tester比例是1:1，现在基本变成每个组只有很少的tester。</p>
</blockquote>
<p>win10开始微软尝试以快速迭代的互联网方式进行开发,大幅度减少了测试的工作和岗位,将用户反馈作为实际上的测试,这导致win10的最初几个开发版,bug连连.怪不得当时觉得微软对windows insider.这边的投入很大而且像是要搞出一个社区的样子,原来都是套路….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些年踩过的python坑（一）]]></title>
      <url>https://ly11tea.github.io/2016/09/16/%E9%82%A3%E4%BA%9B%E5%B9%B4%E8%B8%A9%E8%BF%87%E7%9A%84python%E5%9D%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>格者，正也，正其不正，以归于正也.</p>
<p><strong>王阳明</strong>, <em>传习录</em></p>
</blockquote>
<p>写一些初学python遇到的坑,主要是总结后给自己提个醒,当然如果能够帮助到别人那就更好了.<br><a id="more"></a> </p>
<h2 id="python的turple-list和dict"><a href="#python的turple-list和dict" class="headerlink" title="python的turple,list和dict"></a>python的turple,list和dict</h2><p>python尽量省略了变量的初始化和定义语句,对于单个变量来说一般情况下完全不需要初始化,直接进行赋值即可.对于数组型数据结构,也仅仅需要在使用前使用纯符号定义类型.这样做好处是加快了编程流程,然而对于新手来说这也增加了混淆的风险.<br>首先先来介绍一下这三种数据结构:</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><blockquote>
<p>列表. list是一种有序的集合，可以随时添加和删除其中的元素.<br>l=[]</p>
</blockquote>
<p>list中的数据类型可以是不固定的,所以是一种复合的数据类型.list也可以方便的使用<strong>内建函数</strong>增加或删除某些元素.</p>
<h3 id="turple"><a href="#turple" class="headerlink" title="turple"></a>turple</h3><blockquote>
<p>元祖. turple是一种有序的集合，一旦定义完成<strong>不能</strong>添加和删除其中的元素.<br>t=()</p>
</blockquote>
<p>list和tuple的性质非常相似，其中最大的区别其实就在于是否为常量。</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><blockquote>
<p>字典，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。<br>d={}</p>
</blockquote>
<p>个人觉得这个就是散列表的一种实现,将散列表直接作为一种常用数据类型,这也体现python现代高级语言的特点.<br>dict与上述两个数据类型最大的不同是其中的element是成对存储的,也就是上面所说的键值对.此外由于是无序的,dict的插入元素也非常方便:你只需要用赋值语句对应的key-value填充字典即可</p>
<blockquote>
<p>d[key]=value</p>
</blockquote>
<p>所以爱偷懒的人(比如我)或者以前学过C++的人可能会想到,可以使用dict来实现list,只要将其中的index换成key即可,在语言使用习惯上更符合c-style的习惯,并且还不用提前分配空间,比vector好使!…然而这并不是一种好的习惯:</p>
<ul>
<li>首先index-&gt;key会改变自身的数据类型,</li>
<li>且占用了大量内存.</li>
<li>还无法保证<strong>迭代时的有序性</strong>(这一点我还没有碰到),即迭代的顺序未必是插入时的顺序.</li>
</ul>
<p>所以,下面我就碰到了坑:<br>我们都知道python中也有for..in..循环,然而与c-style语言中偏好于下标实现不同python更偏向于迭代器实现,甚至根本不鼓励下标实现.也确实做到了用迭代器实现代码更少更方便(这一点上要明显好于C++).<br>例如:<br>遍历list l中元素:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</div><div class="line">    i....</div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</div><div class="line">    l[i]....</div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i,value <span class="keyword">in</span> enumerate(l):</div><div class="line">    l[i]...</div></pre></td></tr></table></figure>
<p>上面的三种方法显然第一种使用迭代器的方案最优.然而使用迭代器我们就必须能够明晓迭代器的数据类型.<br>对于list和tuple迭代器的类型就是其中element的类型,而dict默认为<strong>其中的 key</strong> :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</div><div class="line">    i <span class="comment">##此时的i为int,是key</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> va <span class="keyword">in</span> d.values():</div><div class="line">    va <span class="comment">##此时va为d中值</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i,va <span class="keyword">in</span> d.items():<span class="comment">##还可以遍历键值对</span></div><div class="line">    i,value....</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</div><div class="line">    i <span class="comment">##此时的i为int,是key</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> va <span class="keyword">in</span> d.values():</div><div class="line">    va <span class="comment">##此时va为d中值</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i,va <span class="keyword">in</span> d.items():<span class="comment">##还可以遍历键值对</span></div><div class="line">    i,value....</div></pre></td></tr></table></figure>
<p>对于赋值语句,这个规律仍然存在:<br>例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">std_msgs.msg.Int8MultiArray(data=d)</div><div class="line">t=tuple(d)</div><div class="line">l=list(d)</div></pre></td></tr></table></figure></p>
<p>这个data参数,tuple函数,list函数只接受一个数据序列,此时复制过去的就是dict的key,若要想复制value,就必须使用<code>d.values()</code></p>
<h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h2><p>由于python支持tuple packing 和Sequence unpacking以达到多重赋值,所以赋值时可能出现一些我们不想要的结果然而代码却仍能够执行下去:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enumerate(l)</div><div class="line">    <span class="comment">###此时每一次循环中i是一个两个元素的一维tuple</span></div><div class="line"><span class="keyword">for</span> i,va <span class="keyword">in</span> enumerate(l)</div><div class="line">    <span class="comment">###此时为两个int,分别为 index和value</span></div></pre></td></tr></table></figure></p>
<p>相似的语句却产生了完全不同的两种数据类型,且语句中也没有显式的体现,这也是py极少的对于新手不友好的地方.</p>
<h2 id="bytearrary"><a href="#bytearrary" class="headerlink" title="bytearrary"></a>bytearrary</h2><p>另一个为新手所诟病的python坑,莫过于是python的两个版本,python2和python3了.有偏激的说法说这两个版本实际上已经成为了两种语言,这当然不对.最常见的就是print方法的变化.这里要讨论的是另一种,python2和python3的字符串表示.<br>写这个概念之前,我们先来明确一下字符编码的概念,不同于我们生活中直接可以用字符交流,计算机显然要将字符编为一段二进制码才能进行底层的存储和处理,而用户在进行大多数操作时并不需要过于关心这个编解码的过程,就如同在现实中一样,我们把这样的操作称为<strong>抽象的</strong>.大多数高级编程语言都有string类型,以满足这样的操作:</p>
<blockquote>
<p>字符串是文本的抽象表示。字符串由字符组成，字符则是与任何特定二进制表示无关的抽象实体。在操作字符串时，我们生活在幸福的无知之中。我们可以对字符串进行分割和分片，可以拼接和搜索字符串。我们并不关心它们内部是怎么表示的，字符串里的每个字符要用几个字节保存。只有在将字符串编码成字节包（例如，为了在信道上发送它们）或从字节包解码字符串（反向操作）时，我们才会开始关注这点。</p>
</blockquote>
<p>上面的话是针对字符串抽象的精妙的描述.</p>
<h3 id="python-2"><a href="#python-2" class="headerlink" title="python 2"></a>python 2</h3><p>令人遗憾的是,python2中并没有采用这种抽象的做法,Python2中的str实际上是一组字节序列…<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">l=<span class="string">'好个和'</span></div><div class="line">print(len(l))<span class="comment">##输出为9而非三</span></div></pre></td></tr></table></figure></p>
<p>正是因为是字节序列,所以python也没有限定其编码方式,如果你的字符编码方式不是unicode,并且输入输出环境选用的又不是你的那种字符编码方式,那么输入输出都会变得混乱无比,因为python事实上只是不做修改的发布了这些字符序列而已.<br>那么摆在程序员面前只有两条路</p>
<ol>
<li>确认你的字符编码和输入输出环境的编码一致.</li>
<li>把你的字符编码decode,到unicode字符串.到此时python会帮你自动转换</li>
</ol>
<p>上面谈到的unicode字符串python2中的另一种字符串类型,事实上这才是py2中的真•字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">l=<span class="string">u'好个和'</span></div><div class="line">print(len(l))<span class="comment">##输出为3而非9</span></div><div class="line"><span class="comment">####</span></div><div class="line">l2=<span class="string">'好个和'</span></div><div class="line">decodedUnicode = l.decode(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure></p>
<p>使用这个字符串我们又可以当一个幸福的无知者了,上面两种方法都可以得到unicode串.</p>
<p>事情还没完,对于广大非计类工科狗来说,字节序列并不是一无是处,由于更加接触底层,平时许多甚至大部分工作反而是对这些字节序列操作,然而字节序列又和str搅在了一起……..<br>于是python又提供了一个bytearray类型的数组,见名知义,这是一个字节元素数组,以便于操作二进制.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">l=<span class="string">'aaa'</span></div><div class="line">b=bytearray(l)</div><div class="line">print(l[<span class="number">0</span>])<span class="comment">##输出a</span></div><div class="line">print(b[<span class="number">0</span>])<span class="comment">##输出97</span></div></pre></td></tr></table></figure></p>
<h3 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h3><p>在脑残了整个2.X版本后,python3终于做出了改进:</p>
<blockquote>
<p>文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。Python 3不会以任意隐式的方式混用str和bytes，正是这使得两者的区分特别清晰。你不能拼接字符串和字节包，也无法在字节包里搜索字符串（反之亦然），也不能将字符串传入参数为字节包的函数（反之亦然）。这是件好事。</p>
</blockquote>
<p>string彻彻底底成为了抽象字符串且指定了编码类型unicode,二进制数据则由bytes类型表示.<br>他们之间的关系是:</p>
<p><img src="/images/relation.png" style="width: 260px;"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####in the shell</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'€20'</span>.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">b'\xe2\x82\xac20'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe2\x82\xac20'</span>.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'€20'</span></div><div class="line"><span class="comment">###还可以将string转换为指定格式编码的bytes</span></div><div class="line"><span class="comment">###或者将指定格式编码的bytes转为string</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'€20'</span>.encode(<span class="string">'iso-8859-15'</span>)</div><div class="line"><span class="string">b'\xa420'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xa420'</span>.decode(<span class="string">'iso-8859-15'</span>)</div><div class="line"><span class="string">'€20'</span></div></pre></td></tr></table></figure>
<p>简言之,在py3中py2的unicode变成了string,py2的bytearray变为了bytes</p>
<h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><pre><code>## print 不换行输出
</code></pre><p>这又是一个python2与python3的不同之处了<br>在python2中希望用一条print函数输出并不换行的方法是在末尾加一个逗号.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> a,</div></pre></td></tr></table></figure></p>
<p>而在python3中,方法为是将print函数中的end参数置为空,默认为\n<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(a,...,end=<span class="string">''</span>)</div></pre></td></tr></table></figure></p>
<h2 id="argv的第一个参数为脚本名"><a href="#argv的第一个参数为脚本名" class="headerlink" title="argv的第一个参数为脚本名"></a>argv的第一个参数为脚本名</h2><p>如题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</div><div class="line">scriptname,a,...=argv</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo 命令总结]]></title>
      <url>https://ly11tea.github.io/2016/09/15/hexo-%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>其实作为一个轻量级的静态blog框架，hexo已经做到我能想到的最简单的实现步骤了。但是为了使用方便还是总结一下命令还有配置当中遇到的一些tricks。<br><a id="more"></a> </p>
<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><h3 id="hexo的初始化"><a href="#hexo的初始化" class="headerlink" title="hexo的初始化"></a>hexo的初始化</h3><blockquote>
<p>1 hexo init</p>
</blockquote>
<p>在<strong>已经建好</strong>的目录下输入以上命令，会产生一个目录。要注意的是这个文件夹下不能已经含有文件或者git。</p>
<h3 id="hexo的生成"><a href="#hexo的生成" class="headerlink" title="hexo的生成"></a>hexo的生成</h3><blockquote>
<p>1 hexo generate<br>2 hexo g</p>
</blockquote>
<p>hexo实际上是通过在本地文件夹中的一系列的参数配置和md文件生成静态网页的(在public目录下).这个命令就完成了这个过程,下面的命令是上面的简写.</p>
<h3 id="hexo-在本地架设服务器"><a href="#hexo-在本地架设服务器" class="headerlink" title="hexo 在本地架设服务器"></a>hexo 在本地架设服务器</h3><blockquote>
<p>1 hexo server<br>2 hexo s</p>
</blockquote>
<p>我们可以利用这个命令在本地架设起博客,通常使用这个命令在发布前预览效果.<br>还可以在调试过程中输入<code>hexo s --debug</code>来得到调试信息还可以在不使用<code>hexo g</code>的前提下应用修改.</p>
<h3 id="hexo-发布到github"><a href="#hexo-发布到github" class="headerlink" title="hexo 发布到github"></a>hexo 发布到github</h3><blockquote>
<p>1 hexo deploy<br>2 hexo d</p>
</blockquote>
<p>在站点配置文件设定好之后,使用这个命令就能将站点发布到github上面.</p>
<h3 id="hexo-新建文件"><a href="#hexo-新建文件" class="headerlink" title="hexo 新建文件"></a>hexo 新建文件</h3><blockquote>
<p>1 hexo new [layout]/模板  “标题”</p>
</blockquote>
<p>这其中初始的layout(已实现为模板)有三种<code>post(默认),draft,page</code>,你还可以在<code>Scaffold</code>文件家中自定义新的文件模板,在上述三个layout之中.</p>
<h3 id="hexo-清除缓存"><a href="#hexo-清除缓存" class="headerlink" title="hexo 清除缓存"></a>hexo 清除缓存</h3><blockquote>
<p>1 hexo clean</p>
</blockquote>
<p>有时遇到一些稀奇古怪的问题时,不妨试一试这个命令,事实上就是清除public和deploy文件夹下的所有内容.再使用<code>hexo g</code>生成一遍.</p>
<h2 id="hexo-部署时的一些tricks"><a href="#hexo-部署时的一些tricks" class="headerlink" title="hexo 部署时的一些tricks"></a>hexo 部署时的一些tricks</h2><h3 id="没有文章时-主页不会生成"><a href="#没有文章时-主页不会生成" class="headerlink" title="没有文章时,主页不会生成"></a>没有文章时,主页不会生成</h3><p>这时访问地址会出现404,现象,其实是配置上并没有错.</p>
<h3 id="deploy的type名字"><a href="#deploy的type名字" class="headerlink" title="deploy的type名字"></a>deploy的type名字</h3><p>新版本中全站配置文件中type要写成git而不是github.</p>
<h3 id="首次deploy要安装deployer"><a href="#首次deploy要安装deployer" class="headerlink" title="首次deploy要安装deployer"></a>首次deploy要安装deployer</h3><p>命令为<code>npm install hexo-deployer-git --save</code></p>
<h3 id="站点配置文件中的url参数需要修改"><a href="#站点配置文件中的url参数需要修改" class="headerlink" title="站点配置文件中的url参数需要修改"></a>站点配置文件中的url参数需要修改</h3><p>在next中的localsearch就要用到这个参数生成目标连接。</p>
<h3 id="yaml文件键值后的冒号一定要留空格"><a href="#yaml文件键值后的冒号一定要留空格" class="headerlink" title="yaml文件键值后的冒号一定要留空格"></a>yaml文件键值后的冒号一定要留空格</h3><p>不留空格事实上值并没有赋给键</p>
<h2 id="一些参考"><a href="#一些参考" class="headerlink" title="一些参考"></a>一些参考</h2><p>网上也有许多hexo的文档和教程：</p>
<ul>
<li>hexo的 <a href="https://hexo.io/" target="_blank" rel="external">官方文档</a>.</li>
<li>next的<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">官方文档</a></li>
<li>hexo<a href="http://www.zipperary.com/2013/05/28/hexo-guide-1/" target="_blank" rel="external">系列教程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[new]]></title>
      <url>https://ly11tea.github.io/2016/09/14/new/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[ss]]></title>
      <url>https://ly11tea.github.io/2016/09/13/ss/</url>
      <content type="html"></content>
    </entry>
    
  
  
</search>
