<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[在ubuntu下使用SS并给gnome,terminal,git加上代理]]></title>
      <url>https://ly11tea.github.io/2016/10/17/%E5%9C%A8ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8SS%E5%B9%B6%E7%BB%99gnome-terminal-git%E5%8A%A0%E4%B8%8A%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>因为要编译google的slam库cartographer,所以要挂代理在google的git上下载一些源码,配置过程如下:</p>
<h1 id="下载ss-qt5-gui"><a href="#下载ss-qt5-gui" class="headerlink" title="下载ss-qt5 gui"></a>下载ss-qt5 gui</h1><p>其实也可以使用命令行的ss,为了方便还是使用图形版的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install shadowsocks-qt5</div></pre></td></tr></table></figure></p>
<p>这里补充一下,如果使用apt由于包冲突不能够安装,可以选择aptitude,它能够详细分析包的依赖性,并提供多种安装方案:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install aptitude</div><div class="line">sudo aptitude update</div><div class="line">sudo aptitude  install XXX</div></pre></td></tr></table></figure></p>
<p>下载完成后,界面和windows版几乎一致,连接到ss服务器后,将在本地转发的服务器类型设为http(s).ubuntu下并不会帮你在系统内设置全局代理,接下来还需要自己配置</p>
<h1 id="设置Gnome的代理"><a href="#设置Gnome的代理" class="headerlink" title="设置Gnome的代理"></a>设置Gnome的代理</h1><p>进入系统设置中选择网络,可以看到代理服务器的设置项,设置好后.如果浏览器等设为跟随系统代理设置,则已经能够使用ss.</p>
<h1 id="设置terminal的代理"><a href="#设置terminal的代理" class="headerlink" title="设置terminal的代理"></a>设置terminal的代理</h1><p>terminal的代理通过设置几个全局变量实现:<br>如果只是在某个terminal使用一次:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export http_proxy=http://127.0.0.1:XXXX</div><div class="line">export https_proxy=http://127.0.0.1:XXXX</div><div class="line">export ftp_proxy=http://127.0.0.1:XXXX</div></pre></td></tr></table></figure></p>
<p>使用export定义全局变量</p>
<p>当然可以加入.bashrc中</p>
<p>如果在全系统范围内使用:<br>在/etc/environment中 加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http_proxy=http://127.0.0.1:XXXX</div><div class="line">https_proxy=http://127.0.0.1:XXXX</div><div class="line">ftp_proxy=http://127.0.0.1:XXXX</div></pre></td></tr></table></figure></p>
<p>要测试是否有效可以安装 curl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install curl</div><div class="line">curl icanhazip.com</div></pre></td></tr></table></figure></p>
<p>这样能返回你的外网ip,也可以使用wget测试</p>
<p>这只是一个全局变量,并不是所有的命令行工具都遵从这个参数,有时还要另行设置,如:</p>
<p>要在apt中使用:<br>在/etc/apt/apt.conf中添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Acquire::http::Proxy &quot;http://127.0.0.1:XXXX&quot;;</div><div class="line">Acquire::https::Proxy &quot;http://127.0.0.1:XXXX&quot;;</div><div class="line">Acquire::ftp::Proxy &quot;http://127.0.0.1:XXXX&quot;;</div></pre></td></tr></table></figure></p>
<h1 id="设置git的代理"><a href="#设置git的代理" class="headerlink" title="设置git的代理"></a>设置git的代理</h1><p>使用命令<br><code>git config --global http.proxy http://127.0.0.1:XXXX</code><br>在~/.gitconfig中可以看到相关联的字段<br>若要取消配置则可以:<br><code>git config --global http.proxy &#39;&#39;</code><br>或在.gitconfig中删除相关字段</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 无向图]]></title>
      <url>https://ly11tea.github.io/2016/10/15/%E7%AE%97%E6%B3%954-%E6%97%A0%E5%90%91%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>图可能是计算机数据结构中内容最为丰富,又最为复杂的一种.它能够与我们身边许多实际事物联合起来,地图,社交关系网等等.<br>我们先来看其中最为简单的一种:无向图<br>在这种图中,边 (edge) 仅仅是两个顶点(vertex) 之间的连接<br>并且允许<strong>自环</strong>( 一条连接一个顶点和其自身的边),<strong>平行边</strong>(连接同一对顶点的两条边)的存在<br><a id="more"></a> </p>
<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ol>
<li>两个顶点通过一条边相连时，我们称这两个顶点是<strong>相邻</strong>的，并称该连接依附于这两个顶点</li>
<li>边数即为依附于它的边的总数。</li>
<li>子图是由一幅图的所有边的一个子集</li>
<li>路径是由边顺序连接的一系列<strong>顶点</strong>,<br> 简单路径是一条没有重复顶点的路径</li>
<li>环是一条至少含有一条边且起点和终点相同的路径<br>简单环是一条(除了起点和终点必须相同之外)不含有重复顶点和边的环</li>
<li>4和5的长度就是他们包含的边数</li>
<li>任意一个顶点都存在一条路径到达另一个任意顶点的图叫做联通图</li>
<li>一幅<strong>非联通</strong>的图自若干<strong>连通</strong>的部分组成，它们都是其极大连通子图。</li>
<li>无环图是一种不包含环的图。</li>
<li>树是一幅无环连通图<br>互不相连的树组成的集合称为森林。</li>
<li>一幅图中不同的边的数量只占顶点总数V的一小部分..那么我们就认为这幅图是稀疏的</li>
</ol>
<p>图的几种表示方法:<br>邻接矩阵:邻接矩阵是一个V*V的布尔型矩阵,用真假值标示连通性<br>邻接表数组:邻接表数组是一个以顶点为索引的数组,这个数组内的每一个元素都是列表,若其他顶点与该顶点相邻,则会在列表记录下其值</p>
<p>因为我们生活中的大部分图都是稀疏的,所以我们使用邻接表数组来表示图</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> V;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> E;</div><div class="line">	<span class="keyword">private</span> Bag&lt;Integer&gt;[] adj;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		V=v;</div><div class="line">		E=<span class="number">0</span>;</div><div class="line">		adj=(Bag&lt;Integer&gt;[])<span class="keyword">new</span> Bag[v];<span class="comment">//java的数组不允许泛型声明,所以使用强制类型转换</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)</div><div class="line">			adj[i]=<span class="keyword">new</span> Bag&lt;Integer&gt;();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(In in)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>(in.readInt());</div><div class="line">		<span class="keyword">int</span> e=in.readInt();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> v=in.readInt();</div><div class="line">			<span class="keyword">int</span> w=in.readInt();</div><div class="line">			<span class="keyword">this</span>.addedge(v,w);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">V</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.V;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">E</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.E;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.adj[v].add(w);</div><div class="line">		<span class="keyword">this</span>.adj[w].add(v);</div><div class="line">		E++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt;Integer&gt;adj(<span class="keyword">int</span> v)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.adj[v];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		String string=V+<span class="string">"vertices,"</span>+E+<span class="string">"edges\n"</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</div><div class="line">		&#123;</div><div class="line">			string=string+i+<span class="string">":"</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> w:adj(i))</div><div class="line">				string=string+w+<span class="string">" "</span>;</div><div class="line">			string=string+<span class="string">'\n'</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> string;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体实现上,我们将背包数组作为邻接表数组,背包中的值为整型.<br>值得注意的是,相同图的邻接表表示是可能不同的,边的插入顺序决定了顶点的位置.<br>总体上说,邻接表能够做到:</p>
<ol>
<li>使用的空间和V+E成正比;</li>
<li>添加一条边所要的时间为常数:</li>
<li>遍历顶点 v 的所有相邻顶点所需的时间和 v 的度数成正比<br>可以说上面的性质已经相当优秀了</li>
</ol>
<h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1><h2 id="Tremaux-搜索"><a href="#Tremaux-搜索" class="headerlink" title="Tremaux 搜索"></a>Tremaux 搜索</h2><p>要引入深度优先搜索,我们先介绍一个迷宫搜索方法,因为迷宫从本质上说来同图类似:<br>图类比于迷宫,通道类比于图的边,路口类比于图的顶点.<br>Tremaux 搜索方法是:</p>
<ol>
<li>选择一条没有标记过的通道，在你走过的路上铺一条绳子;</li>
<li>标记所有你第一次路过的路口和通道;</li>
<li>当来到一个标记过的路口时(用绳子)回退到上个路口</li>
<li>当回退到的路口 已没有可走的通道时继续回退<br>只要这个迷宫存在出口,用这种方法总能找到.</li>
</ol>
<h2 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h2><p>深度优先方法同Tremaux 搜索类似,这个方法使用递归实现:<br>在访问一个节点时:将他标记为已访问,递归地访问他没有被标记的邻居节点.<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthFirstSearch</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> marked[];</div><div class="line">	<span class="keyword">int</span> count;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DepthFirstSearch</span><span class="params">(Graph g,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		count=<span class="number">0</span>;</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span>[g.V()];</div><div class="line">		dfs(g,v);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Graph g,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		count++;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i:g.adj(v))</div><div class="line">			<span class="keyword">if</span>(!marked[i])</div><div class="line">				dfs(g, i);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Count</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> marked[w];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="使用深度优先搜索寻找两点间的路径"><a href="#使用深度优先搜索寻找两点间的路径" class="headerlink" title="使用深度优先搜索寻找两点间的路径"></a>使用深度优先搜索寻找两点间的路径</h1><p>计算两点间的路径是图算法中较为基础然而又十分普遍的问题,深度优先搜索恰好能解决这样的问题<br>我们使用一个叫做edgeTo的整型数组起到Tremaux搜索中绳子的作用,用它来记录每个与 s 连通的顶点回到起点的路径,具体到每一次从v-&gt;w的过程,第一次访问v-&gt;w时，将 edgeTo[w] 设为 v 来记住这条路径 换句话说. v-&gt;w 是从s到 w的路径上的最后一条已知的边。这样，搜索的结果是一颗以起点为根结点的树.<br>当要寻找从s点开始到任意点W路径时,则<strong>一条一条地通过数组edgeTo[w]=v,向前遍历</strong>,直到v=s,自然而然我们会想到使用<strong>堆栈方法</strong>进行这种遍历,这样在遍历完弹出时,就成为了正向的路径.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthFirstPath</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> start;</div><div class="line">	<span class="keyword">private</span> Integer edgeto[];</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> marked[];</div><div class="line">	<span class="keyword">private</span> Object String;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DepthFirstPath</span><span class="params">(Graph graph,<span class="keyword">int</span> s)</span></span></div><div class="line">	&#123;</div><div class="line">		start=s;</div><div class="line">		edgeto=<span class="keyword">new</span> Integer[graph.V()];</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span>[graph.V()];</div><div class="line">		dfs(graph,s);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Graph graph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> w:graph.adj(v))</div><div class="line">			<span class="keyword">if</span>(!marked[w])</div><div class="line">			&#123;</div><div class="line">				edgeto[w]=v;</div><div class="line">				dfs(graph,w);</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haspathto</span><span class="params">(<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> marked[w];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">pathto</span><span class="params">(<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!haspathto(w))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		Stack&lt;Integer&gt;path=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x=w;x!=start;x=edgeto[x])</div><div class="line">			path.push(x);</div><div class="line">		path.push(start);</div><div class="line">		<span class="keyword">return</span> path;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		In in=<span class="keyword">new</span> In(args[<span class="number">0</span>]);</div><div class="line">		Graph graph=<span class="keyword">new</span> Graph(in);</div><div class="line">		<span class="keyword">int</span> s=Integer.parseInt(args[<span class="number">1</span>]);</div><div class="line">		DepthFirstPath paths=<span class="keyword">new</span> DepthFirstPath(graph,s);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.V();i++)</div><div class="line">		&#123;</div><div class="line">			StdOut.print(s+<span class="string">"--&gt;"</span>+i);</div><div class="line">			<span class="keyword">if</span>(paths.haspathto(i))</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j:paths.pathto(i))</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(j!=s)</div><div class="line">						StdOut.print(<span class="string">"-"</span>+j);</div><div class="line">					<span class="keyword">else</span></div><div class="line">						StdOut.print(s);</div><div class="line">				&#125;</div><div class="line">			StdOut.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浮点数运算]]></title>
      <url>https://ly11tea.github.io/2016/10/12/%E6%B5%AE%E7%82%B9%E6%95%B0%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>#浮点数运算</p>
<pre><code>有些 C 语言书上说 float 型的有效位数是 6~7 位，为什么不是 6 位或者 7 位？而是一个 变化的 6~7 位？
浮点数在内存中是如何存放的？
float 浮点数要比同为 4 字节的 int 定点数表示的范围大的多，那么是否可以使用浮点数 替代定点数？
为什么 float 型浮点数 9.87654321 &gt; 9.87654322 不成立？为何 10.2 - 9 的结果不是 1.2， 而是 1.1999998？为何 987654321 + 987.654322 的结果不是 987655308.654322？
如何才能精确比较浮点数真实的大小？
看完本文档，你将会得到答案!
</code></pre><p>C 语言浮点数<br>    C 语言标准 C89 里规定了 3 种浮点数，float 型、double 型和 long double 型，其中 float 型占 4 个字节，double 型占 8 个字节，long double 型长度要大于等于 double 型，本文档将 以 float 型为例进行介绍，double 型和 long double 型只是比 float 型位数长，原理都是一样的。<br>    float 型可以表示的范围是-3.402823466e38~3.402823466e38，而作为同为 4 个字节的定点 数却只能表示-2147483648~2147483647 的范围，使用同样的内存空间，浮点数却能比定点 数表示大得多的范围，这是不是太神奇了？既然浮点数能表示这么大的范围，那么我们为何 不使用浮点数来代替定点数呢？<br>    先不说浮点数实现起来比较复杂，有些处理器还专门配置了硬件浮点运算单元用于浮点 运算，主要原因是浮点数根本就无法取代定点数，因为精度问题。鱼和熊掌不可兼得，浮点 数表示了非常大的范围，但它失去了非常准的精度。在说明精度问题前，我们先了解一下浮 点数的格式。</p>
<p>ANSI/IEEE Std 754-1985 标准<br>    IEEE 754 是最广泛使用的二进制浮点数算术标准，被许多 CPU 与浮点运算器所采用。 IEEE 754 规定了多种表示浮点数值的方式，在本文档里只介绍 32bits 的 float 浮点类型。它 被分为 3 个部分，分别是符号位 S（sign bit）、指数偏差 E（exponent bias）和小数部分  F（fraction）。</p>
<pre><code>       S              E                                                                            F


    1bit             8bits                                                                                                   23bits


其中 S 位占 1bit，为 bit31。S 位为 0 代表浮点数是正数，S 位为 1 代表浮点数是负数， 比如说 0x449A522C 的 S 位为 0，表示这是一个正数，0x849A522C 的 S 位为 1，表示这是 一个负数。
E 位占 8bits ，为 bit23~bit30。E 位代表 2 的 N 次方，但需要减去 127，比如说 E 位为87，那么  E  位的值为  2（87-127）=9.094947017729282379150390625e-13。
F 位占 23bits，为 bit0~bit22。F 位是小数点后面的位数，其中 bit22 是 2-1=0.5，bit21 是2-2=0.25，以此类推，bit0 为 2-23=0.00000011920928955078125。但 F 位里隐藏了一个 1，也就 是 说 F 位 所 表 示 的 值 是 1+ （ F 位 bit22~bit0 所 表 示 的 数 值 ）， 比 如 说 F 位 是 0b10100000000000000000001，只有 bit22、bit20 和 bit0 为 1，那么 F 位的值为 1+(2-1+2-3+2-23)， 为 1.62500011920928955078125。
综上所述，从二进制数换算到浮点数的公式为：(-1)S×2E-127×(1+F)。但还有几个特殊 的情形：
         若 E 位为 0 并且 F 位也为 0 时表示浮点数 0，此时浮点数受 S 位影响，表现出+0 和-0 两种 0，但数值是相等的。比如二进制数 0x00000000 表示+0，二进制数 0x80000000 表 示-0。
         若 E 位为 0 并且 F 位不为 0 时浮点数为(-1)S×2-126×F，注意，E 位的指数是-126，而不 是 0-127=-127，而且 F 位是 0.xx 格式而不是 1.xx 格式，比如 0x00000001 的浮点数为2-126×2-23=1.4012984643248170709237295832899e-45，而不是    20-121×（1+2-23）。一旦E为不为 0，从 0 变为 1，不是增加 2 倍的关系，因为公式改变了。
       若 E 位为 255 并且 F 位不为 0 时表示非数值，也就是说是非法数，例如 0x7F800001。
       若 E 位为 255 并且 F 位为 0 时表示无穷大的数，此时浮点数受 S 位影响，例如 0x7F800000
        表示正无穷大，0xFF800000 表示负无穷大。当我们使用  1  个数除以  0 时，结果将被记
        作 0x7F800000。


浮点型在多个处理器间通信时，传递的数值是它的二进制数，比如说 1234.5678 这个浮 点数的二进制数是 0x449A522B，如果使用串口发送的话，就会发现串口里发送的是 0x44、 0x9A、0x52 和 0x2B 这 4 个数（发送的顺序也可能是逆序，这与约定的字节序有关，与浮 点格式无关），接收端接收到这 4 个数字后再组合成 0x449A522B，按照 IEEE 754 的定义被 解析成 1234.5678，这样就实现浮点数通信了。如果两个处理器所使用的浮点数规则不同， 则无法传递浮点数。
</code></pre><p>浮点数的换算<br>    下面来看看浮点数与二进制数如何转换。</p>
<pre><code>例 1，二进制数换算成浮点数：
假如在内存中有一个二进制数为      0x449A522C，先将十六进制转换成二进制，如下：

            0100    0100    1001    1010    0101    0010    0010    1100

按照 SEF 的格式分段，如下：
            0    10001001    00110100101001000101100

这个数值不是特殊的情形，可以按照公式(-1)S×2E-127×(1+F)转换。S    位的值为(-1)0=1， E 位 的 值 为 2137-127=1024 。 F 位 的 值 为 1+2-3+2-4+2-6+2-9+2-11+2-14+2-18+2-20+2-21= 1.205632686614990234375 。 最 终 结 果 为 1 × 1024 × 1.205632686614990234375=1234.56787109375。
其中 F 位比较长，使用二进制方式转换比较麻烦，也可以先转换成十六进制再计算， 转换为十六进制如下：

            0011   0100    1010    0100    0101    1000

            0x3      0x4        0xA      0x4       0x5       0x8

F 位为 23bits，需要在最后补一个 0 凑成 24bits，共  6 个十六进制数。F 位的值为 1+3
</code></pre><p>×16-1+4×16-2+10×16-3+4×16-4+5×16-5+8×16-6=1.205632686614990234375，与上面使用二<br>进制方法得到的结果相同。</p>
<pre><code>例 2，浮点数换算成二进制数：
下面我们将-987.654e30 换算成二进制数。我们先不看符号位，将 987.654e30 归一化为整 数 部 分 为 1 的 形 式 ， 也 就 是 写 作 987.654e30=2E-127 × （ 1+F ） 的 标 准 形 式 ， 因为F必然为一个1~2之间的数,所以可以直接让所求的数取2E-127   的对数凑出f的值 ,  其 中 E=log(987.654e30)/log2+127=109.6+127 ， 取 E 位 的 整 数 值 为 109+127=236 ， 再 求 F=987.654e30/2236-127-1=0.52172193，这个小数位数保留 8 位就够了，已经超出了 7 位的精度。
</code></pre><p>然后我们求小数部分的二进制数，这个转换就没啥好说的了，依次减去 2 的幂，从 2-1 一直<br>到 2-23，够减的位置 1，不够减的位置 0，例如，2-1 为 0.5，0.52172193-0.5=0.02172193，F 位的 bit22 置 1，2-2 为 0.25，0.02172193 不够减，F 位的 bit21 置 0，2-3 为 0.125，0.02172193 不够减，F 位的 bit20 置 0，2-4 为 0.0625，0.02172193 不够减，F 位的 bit19 置 0……，一直 算到 F 位的 bit0，这样就得到 F 位的数值。<br>    如果觉得使用二进制方式转换太麻烦的话也可以使用十六进制进行转换。16-1   为  0.0625，<br>0.52172193/0.0625=8.3，说明够减   8  个，记做   0x8，0.52172193-0.0625×8=0.02172193，16-2<br>为 0.00390625，0.02172193/0.00390625=5.6，说明够减 5 个，加上刚才的 0x8 记做 0x85，以 此类推：</p>
<pre><code>16 的-N 次幂    被减数    十六进制数    减后的数
</code></pre><p>1    0.0625    0.52172193    0x8    0.02172193<br>2    0.00390625    0.02172193    0x85    0.00219068<br>3    0.000244140625    0.00219068    0x858    0.000237555<br>4    0.0000152587890625    0.000237555    0x858F    0.0000086731640625<br>5    0.00000095367431640625    0.0000086731640625    0x858F9    0.00000009009521484375<br>6    0.000000059604644775390625    0.00000009009521484375    0x858F91     </p>
<pre><code>一直凑够 24bits ，也就是 6  个十六进制，得到 0x858F91，换算成二进制如下所示：

            1000    0101    1000    1111   1001    0001

由于只有 23bits 有效，因此需要去掉最后一个 bit，二进制本着 0 舍 1 入的原则，变成

            1000    0101    1000    1111   1001    001

最后需要再补上前面的 S 位和 E 位。由于是负数，S 位为 1。E 位为 236，二进制形式
</code></pre><p>为 1110 1100，将 S、E、F 位组合在一起就形成了：</p>
<pre><code>            1    1110 1100    1000    0101    1000    1111   1001    001

从左边最高位开始，4 个一组合并成十六进制：

            1111   0110    0100    0010    1100   0111    1100    1001

换算成十六进制为：

            0xF    0x6    0x4    0x2    0xC    0x7    0xC    0x9

综上所述，-987.654e30 换算成二进制数为 0xF642C7C9。
</code></pre><p>浮点数的精度<br>    在前面的 讲解中可以看到 1.xx 这个数量 级的最小数是 2-23，对应的 十进制数值 为 1.00000011920928955078125，可以精确表示到小数点后 23 位，但有些 C 语言书上却说 float 型的有效位只有  6~7  位，这是为什么？<br>    这是因为二进制小数与十进制小数没有完全一一对应的关系，二进制小数对于十进制小 数来说相当于是离散的而不是连续的，我们来看看下面这些数字：</p>
<pre><code>            二进制小数    十进制小数
            2-23    1.00000011920928955078125
            2-22    1.0000002384185791015625
            2-21    1.000000476837158203125
            2-20    1.00000095367431640625
            2-19    1.0000019073486328125
            2-18    1.000003814697265625

不看 S 位和 E 位，只看 F 位，上表列出了 1.xx 这个数量级的 6 个最小幂的二进制小数， 对 应 的 十 进 制 在 上 表 的 右 边 ， 可 以 看 到 使 用 二 进 制 所 能 表 示 的 最 小 小 数 是 1.00000011920928955078125，接下来是      1.0000002384185791015625，这两个数之间是有间
</code></pre><p>隔的，如果想用二进制小数来表示 8 位有效数（只算小数部分，小数点前面的 1 是隐藏的默<br>认值）1.00000002、1.00000003、1.00000004…这些数是无法办到的，而 7 位有效数 1.0000001<br>可以用 2-23 来表示，1.0000002 可以用 2-22 来表示，1.0000003 可以用 2-23+2-22 来表示。从这<br>个角度来看，float 型所能精确表示的位数只有 7 位，7 位之后的数虽然也是精确表示的，但 却无法表示任意一个想表示的数值。<br>但还是有一些例外的，比如说 7 位有效数 1.0000006 这个数就无法使用 F 位表示，二进 制小数对于十进制小数来说相当于是离散的，刚好凑不出  1.0000006  这个数，从这点来看  float<br>型所能精确表示的位数只有 6 位。至于 5 位有效值的任何数都是可以使用 F 位相加组合出<br>来的，即便是乘以 E 位的指数后也是可以准确表示出来的。因此 float 型的有效位数是 6~7 位，但这个说法应该不是非常准确，准确来说应该是 6位，C 语言的头文件中规定也是 6 位。</p>
<p>对于一个很大的数，比如说 1234567890，它是 F 位乘上 E 位的系数被放大了的，但它 的有效位仍然是 F 位所能表示的 6 位有效数字。1234567890 对应的二进制数是 0x4E932C06， 其中  F 位的数值为 1.1497809886932373046875，E 位的数值为 230=1073741824，1073741824×1.1497809886932373046875=1234567936，对比 1234567890，也只有高 7 位是有效位，后3 位是无效的。int 型定点数可以准确的表示 1234567890，而 float 浮点数则只能近似的表示<br>1234567890，精度问题决定了 float 型根本无法取代 int 型。</p>
<p>浮点数的比较<br>    从上面的讨论可以看出，float 型的有效位数是 6 位，那么我们在用 float 型运算时就要 注意了，来看下面这段程序：</p>
<p>#include <stdio.h></stdio.h></p>
<p>int main(void)<br>{<br>    float a = 9.87654321; float b = 9.87654322;</p>
<pre><code>if(a &gt; b)
{
printf(&quot;a &gt; b\n&quot;);
}
else if(a == b)
{
printf(&quot;a == b\n&quot;);
}
else
{
printf(&quot;a &lt; b\n&quot;);
}

return 0;
</code></pre><p>}</p>
<pre><code>按照我们平时的经验来说这段程序应该走 a &lt;  b 的分支，但程序运行的结果却走了  a == b 的分支，原因就是 float 型的精度问题，float 型无法区分出小数点后的第 8 位数，在内存 中，a 和 b 的二进制数都是 0x411E0652，因此就走了 a == b 的分支。
某些编译器在编译时会发现 a  和 b 的值超出了浮点数的精度，会产生一个告警，提示数 据超过精度，但有些编译器则不会做任何提示。最可怕的是有一类编译器，调试窗口里显示 的长度超出 float 型的精度，比如说 a 的值显示为 9.87654321，b 的值显示为 9.87654322，但 在运行时，硬件可不管这套，硬件认为这 2 个数都是  0x411E0652，因此实际运行结果是  a == b 的分支。以前就遇到过一个同学在 QQ  群里问一个类似的问题，在调试窗口里明明写着  a 是 9.87654321，小于 b 的 9.87654322，但运行结果却是 a ==b。当时我给他说了半天也没能 让他明白这个问题，希望他能有机会看到这个文档，希望他这次能够明白^_^。


由于精度这个问题的限制，我们在浮点数比较时就需要加一个可接受的精度条件来做判 决，比如说上面的这个问题，如果我们认为精度在 0.00001 就足够了，那么 a - b 之差的绝对 值只要小于 0.00001，我们就认为 a 和 b 的值是相等的，大于 0.00001 则认为不等，还要考 虑到 a  - b  正负等情况，因此可以将上面的程序改写为：
</code></pre><p>#include <stdio.h> int main(void)<br>{<br>    float a = 9.87654321; float b = 9.87654322;</stdio.h></p>
<pre><code>if(a - b &lt; -0.00001)
{
printf(&quot;a &lt; b\n&quot;);
}
else if(a - b &gt; 0.00001)
{
printf(&quot;a &gt; b\n&quot;);
}
else
{
printf(&quot;a == b\n&quot;);
}

return 0;
</code></pre><p>}</p>
<pre><code>例子中 a 和 b 之差的绝对值小于 0.00001，因此认为 a 和 b 是相等的，运行程序，也正 确的打印了 a == b。


也许你会觉得费了这么大的劲，最后 2 个程序运行的结果还是一样的，这不是画蛇添足 么？硬件已经自动考虑到精度问题了，为什么我们还要去再做一个精度的限定？这是因为我 们在应用中的精度往往要低于硬件的 6 位精度。比如说我们使用 2 个 AD 采集 2V 的电压， 并对这 2 个电压值做比较，一般要求精确到 0.1V 即可。实际情况下 AD 采集出来的数值都 会围绕真实值有上下的波动，比如说 AD 的精度是 0.001V，我们采集出的电压数值就可能 是 2.003V、2.001V、1.999V 等围绕 2V 波动的数值，如果我们在程序里不对精度加以限制 就对这些数值做比较，就会发现几乎每次采集到的电压值都是不同的。在这种情况下我们就 需要将精度设定为 0.1V，将上面例子中的 0.00001 改为 0.1，就可以正确的判断出每次采集 的电压值都是相同的了。
在实际使用 AD 采样时可能并不需要使用浮点数，我一般都是使用定点数来代替浮点数 进行处理的，请参考另一篇案例《C 语言使用定点数代替浮点数计算》。

下面我们再看一个例子：
</code></pre><p>#include <stdio.h></stdio.h></p>
<p>int main(void)<br>{<br>    float a = 987654321; float b = 987654322;</p>
<pre><code>if(a - b &lt; -0.00001)
{
printf(&quot;a &lt; b\n&quot;);
}
else if(a - b &gt; 0.00001)
{
printf(&quot;a &gt; b\n&quot;);
}
else
{
printf(&quot;a == b\n&quot;);
}

return 0;
</code></pre><p>}</p>
<pre><code>这个例子中的两个数都是很大的数，已经远远超过了 0.00001 的精度，运行结果是不是 应该是 a &lt; b？但程序运行的结果依然是 a == b。这是因为这个例子里的 a 和 b 并不是 1.xx 的数量级，我们将 a 和 b 进行归一化，都除以 900000000 就会发现 a = 1.09739369，b = 1.097393691，只是在第 9 位才出现不同，因此在 0.00001 这个精度下，这 2 个数还是相等的。 换个角度来看，a 和 b 虽然是很大的数了，但 F 位仅能表示 23bits，有效值仅有 6 位，a 和 b 的大是因为 E 位的指数放大 F 位表现出来的，但有效值依然是 6 位。在内存中 a 和 b 的二 进制数都是 0x4E6B79A3。其中 E 位为 156，2156-127=536870912，F 位为 0xD6F346，F 位 1.xx 数量级的 1.83964955806732177734375 被 E 位放大了 536870912 倍，E 位如果算 7 位有效精 度的话能精确到 0.0000001，乘以 536870912 已经被放大了 53 倍多，这就说明 a 和 b 的个位 与十位已经不是有效位数了，所以程序运行的结果表现出  a  ==  b  也是正常的。
由此可见，设定一个合理的精度是需要结合浮点数的数量级的，这看起来似乎比较难， 毕竟在程序运行时十分精确的跟踪每个浮点数的数量级并不容易实现，但实际应用中需要比 较的浮点数往往都会有其物理含义，例如上面电压的例子，因此，根据浮点数的物理含义， 浮点数的精度还是比较好确定的。当然在一些复杂的数值运算过程中可能会存在非常复杂的 情况，这时浮点数的精度问题就比较棘手了，所幸我所做的都是比较简单的东西，那些复杂 的情况就不讨论了，我也没能力讨论^_^。
上面所说的都是同等数量级下的浮点数进行比较的情况，不同数量级的浮点数比较则没 有这个限制，比如说 1.23456789 与 12.23456789 的比较，在 E 位已经足以区分大小了，因 此 F 位的精度就没有必要再比较了。
</code></pre><p>浮点数的加减<br>    二进制小数与十进制小数之间不存在一一对应的关系，因此某些十进制很整的加减法小 数运算由二进制小数来实现就表现出了不整的情况，来看下面的例子：</p>
<p>#include <stdio.h></stdio.h></p>
<p>int main(void)<br>{<br>    float a = 10.2; float b = 9; float c;</p>
<pre><code>c = a - b; printf(&quot;%f\n&quot;, c);
return 0;
</code></pre><p>}</p>
<pre><code>如果 用十进 制计算 的话变 量 c 应该 为 1.2，在 Visual C++ 2010 环境 下实验 输出为 1.200000，但实际上 c 变量的值是 1.1999998，只不过是在输出时被四舍五入为 1.200000 罢 了。在内存中 c 变量的二进制数是 0x3F999998，它对应的浮点数是 0.19999980926513671875。 如果我们将 printf 函数%f 的格式改为%.7f 格式，就会看到  c 变量输出的值是  1.1999998。
两个数量级相差很大的数做加减运算时，数值小的浮点数小数点部分会受精度限制而被忽略，看下 面的例子：
</code></pre><p>#include <stdio.h></stdio.h></p>
<p>int main(void)<br>{<br>    float a = 987654321; float b = 987.654322; float c;</p>
<pre><code>c = a + b; printf(&quot;%f\n&quot;, c);
return 0;
</code></pre><p>}</p>
<pre><code>Visual C++ 2010 上 的 计 算 结 果 为  987655296.000000 ， 而 实 际 的 真 实 值 为
</code></pre><p>987655308.654322，二进制值为  0x4E6B79B2  对应 987655296，就是  987655296.000000。可<br>以看出有效值是 6 位，如果按四舍五入的话可以精确到 8 位，其中变量 b 贡献的有效数值只 有 2 位。</p>
<p>987654321</p>
<ul>
<li><p>987.654322<br>—————- 987655308.654322    真实值<br>987655296.000000    计算值<br>987655296           二进制值，0x4E6B79B2</p>
<p>对于这种数量级相差很大的计算，计算结果会保证高位数有效，数量级小的数相对计算 结果显的太小了，不能按自身 6 位的精度保持，而是需要按照计算结果的 6 位精度保持。</p>
</li>
</ul>
<p>使用二进制数比较浮点数<br>    下面我们从另一个方向探索一下浮点数的比较问题。<br>    我们可以使用(-1)S×2E-127×(1+F)这个公式来计算 IEEE 754 标准规定的浮点数，先抛开<br>S 位和那 4 种特殊的规定，只看 E 位和 F 位 2E-127×(1+F)，我们会发现 E 位和 F 位组成的数<br>值具有单调递增性，也就是说任意一个浮点数 A 掩掉 S 位的数值 B = (A &amp; 0x7FFFFFFF)是 单调递增的，如果 A1 大于 A2，那么 B1 一定大于 B2，反之亦然，如果 B1 大于 B2，那么 A1 也一定大于 A2，这样的话我们就可以使用浮点数的二进制数来比较大小了。<br>    看下面程序，使用联合体将浮点数转换成二进制数再做比较：</p>
<p>#include <stdio.h></stdio.h></p>
<p>typedef union float_int<br>{<br>    float f; int i;<br>}FLOAT_INT;</p>
<p>int main(void)<br>{<br>    FLOAT_INT a; FLOAT_INT b;<br>    int ca; int cb;</p>
<pre><code>a.f = 9.87654321;
b.f = 9.87654322;

ca = a.i &amp; 0x7FFFFFFF; cb = b.i &amp; 0x7FFFFFFF;

if(ca &gt; cb)
{
printf(&quot;a &gt; b\n&quot;);
}
else if(ca == cb)
{
printf(&quot;a == b\n&quot;);
}
else
{
printf(&quot;a &lt; b\n&quot;);
}

return 0;
</code></pre><p>}</p>
<pre><code>上面的程序使用联合体使浮点型和整型共享同一个内存空间，浮点型变量.f 输入浮点 数，使用整型变量.i 就可以获取到.f 的二进制数，比较时利用.i 的 E 位和 F 位就可以判断浮 点数的绝对大小了，这个判决的精度为硬件所支持的精度。

如果考虑到 S 位，情况会有些变化。S 位是符号位，0 正 1 负，与 int 型的符号位有一 样的作用，并且都在 bit31。从这点来看，不对浮点数的二进制数进行(&amp; 0x7FFFFFFF)的操 作而是直接使用浮点数的二进制数来当做 int 型数做比较，那么浮点数的 S 位则正好可以充 当 int 型数的符 号位。两个比较的 浮点数都是正数 的情况就不用说了 ，上面的例子 (&amp; 0x7FFFFFFF)已经验证了。正浮点数与负浮点数比较的情况也没有问题，浮点数和 int 型数 的符号位是兼容的，符号位就可以直接比较出大小，比如说-9.87654321 和 9.87654322 之间 做比较，-9.87654321 的 bit31 是 1，9.87654322 的 bit31 是 0，从二进制 int 型数的角度来看， bit31 为 0 是正数，bit31 为 1 是负数，通过符号位就可以直接判断出大小。最后剩下两个负 浮点数比较的情况了，这种情况存在问题，如果采用二进制 int 型数来比较浮点数的话，结 果则正好相反，比如说-1.5 和-1.25 做比较，int 型数是用补码表示的，对于两个负数来说， 补码 的二进 制数值 越大则 补码值 也越大 。-1.5 的补 码是 0xBFC00000 ，-1.25 的补 码是 0xBFA00000 ， 从 二 进 制 角 度 来 看 0xBFC00000&gt;0xBFA00000 ， 因 此 int 的 补 码 是
</code></pre><p>0xBFC00000&gt;0xBFA00000，也就是-1077936128&gt;-1080033280，如果使用 int 型来判断，就 会得出-1.5 &gt; -1.25 的结论，正好相反了。这样的话我们就需要对两个浮点数的符号位做一个 判断，如果同为负数的话则需要将比较结果反一下，如下面程序：</p>
<p>#include <stdio.h></stdio.h></p>
<p>typedef union float_int<br>{<br>    float f; int i;<br>}FLOAT_INT;<br>int main(void)<br>{<br>    FLOAT_INT a; FLOAT_INT b;</p>
<pre><code>a.f = -9.876543;
b.f = -9.876542;

if((a.i &lt; 0) &amp;&amp; (b.i &lt; 0))
{
if(a.i &lt; b.i)
{
    printf(&quot;a &gt; b\n&quot;);
}
else if(a.i == b.i)
{
    printf(&quot;a == b\n&quot;);
}
else
{
    printf(&quot;a &lt; b\n&quot;);
}
}
else
{
if(a.i &gt; b.i)
{
    printf(&quot;a &gt; b\n&quot;);
}
else if(a.i == b.i)
{
    printf(&quot;a == b\n&quot;);
}
else
{
    printf(&quot;a &lt; b\n&quot;);
}
}
</code></pre><p>}</p>
<pre><code>如果再考虑 IEEE 754 标准定义的那几种特殊情况，问题变得又会复杂一些，比如说在 运算过程中有±x / 0 的情况出现，那么结果就是一个±无穷大的数，还有可能遇到±0 等情 况，这些问题在这里就不讨论，只要增加相应的条件分支就可以做出判断的。


使用二进制数比较浮点数的方法可以依据硬件精度判断出浮点数的真正大小，但实际使 用过程中往往不是根据硬件精度做判断的，因此最好还是使用上面所介绍的加入精度的判断 方法。
</code></pre><p>C 语言中有关浮点数的定义<br>    C 语言对浮点数做了一些规定，下面是摘自 Visual C++ 2010 头文件 float.h 中有关 float<br>型的定义，如下：</p>
<p>#define FLT_DIG    6            /<em> # of decimal digits of precision </em>/</p>
<p>#define FLT_EPSILON    1.192092896e-07F    /<em> smallest such that 1.0+FLT_EPSILON != 1.0 </em>/</p>
<p>#define FLT_GUARD    0     </p>
<p>#define FLT_MANT_DIG    24    /<em> # of bits in mantissa </em>/</p>
<p>#define FLT_MAX    3.402823466e+38F    /<em> max value </em>/</p>
<p>#define FLT_MAX_10_EXP    38    /<em> max decimal exponent </em>/</p>
<p>#define FLT_MAX_EXP    128    /<em> max binary exponent </em>/</p>
<p>#define FLT_MIN    1.175494351e-38F    /<em> min positive value </em>/</p>
<p>#define FLT_MIN_10_EXP    (-37)    /<em> min decimal exponent </em>/</p>
<p>#define FLT_MIN_EXP    (-125)    /<em> min binary exponent </em>/<br>    其中 FLT_DIG 定义了 float 型的十进制精度，是 6 位，与我们上面的讨论是一致的。<br>    FLT_EPSILON 定义了 float 型在 1.xx 数量级下的最小精度，1.xx 数量级下判断浮点数<br>是否为 0 可以使用这个精度。<br>    FLT_GUARD 不知道是啥意思–!<br>    FLT_MANT_DIG 定义了 float 型 F 位的长度。 FLT_MAX 定义了 float 型可表示的最大数值。<br>    FLT_MAX_10_EXP 定义了 float 型十进制的最大幂。<br>    FLT_MAX_EXP 定义了 float 型二进制的最大幂。 FLT_MIN 定义了 float 型所能表示的最小正数。 FLT_MIN_10_EXP 定义了 float 型十进制的最小幂。 FLT_MIN_EXP 定义了 float 型二进制的最小幂。</p>
<pre><code>float.h     文件里对其它的浮点数也做了规定，本文不再做介绍了。
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[符号表的应用]]></title>
      <url>https://ly11tea.github.io/2016/10/08/%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>科学或是工程领域能够将运行效率提升一千亿倍的发明极少一一我们已经在几个例子中看到，符号表做到了，并且这些改进的影响非常深远。<br><em>算法 第四版</em></p>
</blockquote>
<a id="more"></a> 
<h1 id="该使用哪种符号表的实现"><a href="#该使用哪种符号表的实现" class="headerlink" title="该使用哪种符号表的实现?"></a>该使用哪种符号表的实现?</h1><p>由之前的学习可以发现,符号表的实现应该首先在二叉查找树和散列表中选择.红黑树可以保证最坏情况下的性能且它能够支持的操作更多(如排名、选择、排序和范围查找),而散列表的优点在于代码更简单，且查找时间最优(接近常数).在不需要更多操作时,我们的第一选择应当是<strong>散列表</strong></p>
<h1 id="字典型使用范例"><a href="#字典型使用范例" class="headerlink" title="字典型使用范例"></a>字典型使用范例</h1><p>字典型:每一个键都有且仅有一个值与其相对应<br>csv文件就可以作为一个字典型的例子,每一行都有一个以逗号分隔的键值对.<br>下面的程序使用红黑树实现了从csv文件中读取键值对,并从标准输入中读入键值查找的功能.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Find_csv</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> keyfield=Integer.parseInt(args[<span class="number">1</span>]);</div><div class="line">		<span class="keyword">int</span> valuefield=Integer.parseInt(args[<span class="number">2</span>]);</div><div class="line">		</div><div class="line">		In csv=<span class="keyword">new</span> In(args[<span class="number">0</span>]);</div><div class="line">		ST&lt;String,String&gt; table=<span class="keyword">new</span> ST&lt;String,String&gt;();</div><div class="line">		<span class="keyword">while</span>(csv.hasNextLine())</div><div class="line">		&#123;</div><div class="line">			String line=csv.readLine();</div><div class="line">			String token[]=line.split(<span class="string">","</span>);</div><div class="line">			table.put(token[keyfield], token[valuefield]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span>(!StdIn.isEmpty())</div><div class="line">		&#123;</div><div class="line">			String key=StdIn.readString();</div><div class="line">			<span class="keyword">if</span>(table.contains(key))</div><div class="line">				StdOut.println(table.get(key));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="索引类使用范例"><a href="#索引类使用范例" class="headerlink" title="索引类使用范例"></a>索引类使用范例</h1><p>生活中也有许多键对应多个值,例如一个电影的演员.同时有的时候还需要反向索引的功能,例如查找一个演员演得所有电影.<br>下面的代码,同时建立了正向和反向索引.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lookupindex</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		In in=<span class="keyword">new</span> In(args[<span class="number">0</span>]);</div><div class="line">		ST&lt;String, Queue&lt;String&gt;&gt;table1=<span class="keyword">new</span> ST&lt;String, Queue&lt;String&gt;&gt;();<span class="comment">//正向</span></div><div class="line">		ST&lt;String, Queue&lt;String&gt;&gt;table2=<span class="keyword">new</span> ST&lt;String,Queue&lt;String&gt;&gt;();<span class="comment">//反向</span></div><div class="line">		<span class="keyword">while</span>(in.hasNextLine())</div><div class="line">		&#123;</div><div class="line">			String line=in.readLine();</div><div class="line">			String tokens[]=line.split(args[<span class="number">1</span>]);</div><div class="line">			String key=tokens[<span class="number">0</span>];</div><div class="line">			<span class="keyword">if</span>(!table1.contains(key))</div><div class="line">				table1.put(key, <span class="keyword">new</span> Queue&lt;String&gt;());</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tokens.length;i++)</div><div class="line">			&#123;</div><div class="line">				String value=tokens[i];</div><div class="line">				<span class="keyword">if</span>(!table2.contains(value))</div><div class="line">					table2.put(value,<span class="keyword">new</span> Queue&lt;String&gt;());</div><div class="line">				table1.get(key).enqueue(value);</div><div class="line">				table2.get(value).enqueue(key);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">while</span>(!StdIn.isEmpty())</div><div class="line">			&#123;</div><div class="line">				String query=StdIn.readLine();</div><div class="line">				<span class="keyword">if</span>(table1.contains(query))</div><div class="line">					<span class="keyword">for</span>(String s:table1.get(query))</div><div class="line">						StdOut.println(<span class="string">" "</span>+s);</div><div class="line">				<span class="keyword">if</span>(table2.contains(query))</div><div class="line">					<span class="keyword">for</span>(String s:table2.get(query))</div><div class="line">						StdOut.println(<span class="string">" "</span>+s);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生活中还有一种桌面搜索软件,可以帮我们查找文件以及文件中的内容,他们其实是通过遍历设备中的文件并建立一套反向索引,这样通过内容就可以查到文件<br>下面的程序实现了对文本文件中内容的查找<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filesearcher</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span></div><div class="line">	&#123;</div><div class="line">		ST&lt;String, SET&lt;File&gt;&gt; table=<span class="keyword">new</span> ST&lt;String, SET&lt;File&gt;&gt;();</div><div class="line">		<span class="keyword">for</span>(String s:args)</div><div class="line">		&#123;</div><div class="line">			File file=<span class="keyword">new</span> File(s);</div><div class="line">			In in =<span class="keyword">new</span> In(file);</div><div class="line">			<span class="keyword">while</span>(!in.isEmpty())</div><div class="line">			&#123;</div><div class="line">				String word=in.readString();</div><div class="line">				<span class="keyword">if</span>(!table.contains(word))</div><div class="line">					table.put(word, <span class="keyword">new</span> SET&lt;File&gt;());</div><div class="line">				table.get(word).add(file);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(!StdIn.isEmpty())</div><div class="line">		&#123;</div><div class="line">			String query=StdIn.readString();</div><div class="line">			<span class="keyword">if</span>(table.contains(query))</div><div class="line">				<span class="keyword">for</span>(File f:table.get(query))</div><div class="line">					StdOut.println(<span class="string">" "</span>+f.getName());</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="稀疏向量"><a href="#稀疏向量" class="headerlink" title="稀疏向量"></a>稀疏向量</h1><p>计算机中很多时候会用到矩阵和向量的乘法,如果使用直观的的方法实现通常只能得到平方级别效率的程序,但是实际应用中向量和矩阵是稀疏的,很多元素都为0.得益于这一性质我们使用稀疏向量进行运算.我们使用hash表存储非零的元素,键为元素在向量中的位置,值为元素的值.这样每一个hash表就是一个稀疏向量.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sparsevector</span> </span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> LinearProbingHashST&lt;Integer, Double&gt; st;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sparsevector</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		st=<span class="keyword">new</span> LinearProbingHashST&lt;Integer,Double&gt;();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Double <span class="title">get</span><span class="params">(Integer key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!st.contains(key))</div><div class="line">			<span class="keyword">return</span> <span class="number">0.00</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> st.get(key);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> st.size();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Integer key,Double value)</span></span></div><div class="line">	&#123;</div><div class="line">		st.put(key, value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Double <span class="title">dot</span><span class="params">(Double[] num)</span></span></div><div class="line">	&#123;</div><div class="line">		Double sum=<span class="number">0.00</span>;</div><div class="line">		<span class="keyword">for</span>(Integer i:st.keys())</div><div class="line">			sum=sum+num[i]*st.get(i);</div><div class="line">		<span class="keyword">return</span> sum;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		Sparsevector[] test=<span class="keyword">new</span> Sparsevector[<span class="number">5</span>];</div><div class="line">		Double num[] =<span class="keyword">new</span> Double[<span class="number">5</span>];</div><div class="line">		Double result[]=<span class="keyword">new</span> Double[<span class="number">5</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</div><div class="line">			result[i]=test[i].dot(num);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 散列表]]></title>
      <url>https://ly11tea.github.io/2016/10/06/%E7%AE%97%E6%B3%954-%E6%95%A3%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>All roads lead to Rome.</p>
</blockquote>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>通过算术操作将键转化为数组的索引以将键值对存储在数组中或来访问数组中的键值对</p>
</blockquote>
<a id="more"></a> 
<h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h1><p>如果我们有一个能够保存M个键值对的数组，那么我们就需要一个能够将任意的键值转化为该数组范围内的索引( [0, M-1 ]范围内的整数)的散列函数。我们要找的散列函敛应该易于计算并且能够均匀分布所有的键，即对于任意键，0到m-1之间的每个整数都有<strong>相等</strong>的可能性与之对应(与健无关) 。<br>每一种类型都可能要对应于一种散列函数,例如对于整数,我们常用的是<strong>除留余数法</strong></p>
<p>总的来说好的散列方法需要满足下列性质:<br>等价性一一等价的键一定产生一样的散到值;<br>高效性一一计算简便;<br>均匀性一一均匀地散列到数组下标范围内</p>
<p>设计散列函数是计算机科学家的事情,但我们在使用时要确认:<br>我们使用的散列岳数能够均匀并独立地将所有的键散布于0到 M-l 之间</p>
<h1 id="基于拉链法实现的散列表"><a href="#基于拉链法实现的散列表" class="headerlink" title="基于拉链法实现的散列表"></a>基于拉链法实现的散列表</h1><p>将大小为 M的数组中的每个元素指向一条链表.每条链表中都存储着散列值为这个元素的键值对,这种方法被称为拉链法.<br><img src="/images/lalianbiao.png" style="width: 260px;"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>我们为数组内部的M个元素分别构造符号表</li>
<li>先在散列表的put,get方法中使用散列函数计算是哪一个符号表元素,再用符号表的put,get方法插入或提取元素</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> alg;</div><div class="line"></div><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.SequentialSearchST;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeparatechainingHashST</span> &lt;<span class="title">Key</span>,<span class="title">Value</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> m;<span class="comment">//hash表的数量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> n;<span class="comment">//元素总的数量</span></div><div class="line">	SequentialSearchST&lt;Key, Value&gt;[] st;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SeparatechainingHashST</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>(<span class="number">997</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SeparatechainingHashST</span><span class="params">(<span class="keyword">int</span> number)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.m=number;</div><div class="line">		st= (SequentialSearchST&lt;Key, Value&gt;[]) <span class="keyword">new</span> SequentialSearchST[number];<span class="comment">//java不支持数组的泛型定义,故只能使用类型转换的方法</span></div><div class="line">		<span class="keyword">this</span>.n=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">			st[i]=<span class="keyword">new</span> SequentialSearchST&lt;Key,Value&gt;();</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span><span class="comment">//生成对应的数组下标</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> (key.hashCode()&amp;<span class="number">0x7fffffff</span>)%m;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Value <span class="title">get</span> <span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> st[hash(key)].get(key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span> <span class="params">(Key key,Value value)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!st[hash(key)].contains(key))</div><div class="line">			n++;</div><div class="line">		st[hash(key)].put(key, value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		st[hash(key)].delete(key);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>在一张含有 M条链表和 N个键的的散列表中未命中查我和插入操作所需要的比较次数为 ~N/M<br>使用拉链法的一个好处就是这在N和M的选取上不需要太多的斟酌:<br>M偏小,N偏大时时间只会稍稍变长<br>而M偏大时,虽然浪费了空间但速度很快,甚至能够达到常数级别</p>
<h2 id="有序操作"><a href="#有序操作" class="headerlink" title="有序操作"></a>有序操作</h2><p>因为散列函数需要将键值分散,故已经失去了有序信息,所以在要使用到有序操作的地方,<strong>散列表不是一个好选择</strong></p>
<h1 id="基于线性探测法的散列表"><a href="#基于线性探测法的散列表" class="headerlink" title="基于线性探测法的散列表"></a>基于线性探测法的散列表</h1><p>与拉链法的思路不同,我们也可以直接新建一个一维的总量大于元素数量的符号表数组,当出现碰撞冲突的时候直接使用数组中的空位解决,这种方法叫做开放地址法<br>线性探测法也是开放地址法的一种,对于要插入的键在算出对应的hash值并得到插入下标后,有三种情况:</p>
<ol>
<li>这个下标无元素,那么直接插入键值对 </li>
<li>这个下标的键同要插入键不同,那么将下标加1,循环这个过程,<strong>若已越过数组最后一个元素,则从数组首元素继续开始.</strong></li>
<li>这个下表的键同要插入的键相同,则更新对应的值<br>这样的方法叫做线性探测法<br>在代码实现上我们使用两个平行数组,分别存贮键和值.<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinarProbingHashST</span>&lt;<span class="title">Key</span>,<span class="title">Value</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> m;<span class="comment">//总容量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> n;<span class="comment">//当前容量</span></div><div class="line">	Key[] keys;</div><div class="line">	Value[] values;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinarProbingHashST</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		keys=(Key[])<span class="keyword">new</span> Object[m];</div><div class="line">		values=(Value[])<span class="keyword">new</span> Object[m];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinarProbingHashST</span><span class="params">(<span class="keyword">int</span> cap)</span></span></div><div class="line">	&#123;</div><div class="line">		m=cap;</div><div class="line">		keys=(Key[])<span class="keyword">new</span> Object[m];</div><div class="line">		values=(Value[])<span class="keyword">new</span> Object[m];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key,Value val)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(n&gt;=m/<span class="number">2</span>)</div><div class="line">			resize(m*<span class="number">2</span>);</div><div class="line">		<span class="keyword">if</span>(key==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span>(i=hash(key);keys[i]!=<span class="keyword">null</span>;i=(i+<span class="number">1</span>)%m)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(keys[i]==key)</div><div class="line">			&#123;</div><div class="line">				values[i]=val;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		keys[i]=key;</div><div class="line">		values[i]=val;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> (key.hashCode()&amp;<span class="number">0x7fffffff</span>)%m;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(key==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span>(i=hash(key);keys[i]!=<span class="keyword">null</span>;i=(i+<span class="number">1</span>)%m)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(keys[i]==key)</div><div class="line">				<span class="keyword">return</span> values[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span>(get(key)!=<span class="keyword">null</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>需要注意的是这里的下标处理方式,使用取余的方法使得下标不越界,并循环往复<br>当然我们可以看到get方法是在查找键时若遇到空键则证明无此键,返回未命中.<br>由上述代码我们可以发现,键值中的null十分重要,他标志着一次搜索的终结,因此在删除符号表内容时,我们不能简单的只将对应的键值对置null还必须将其后直到null边界的键值对重新插入.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!contains(key))</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> i=hash(key);</div><div class="line">		<span class="keyword">while</span>(keys[i]!=key)</div><div class="line">			i=(i+<span class="number">1</span>)%m;</div><div class="line">		keys[i]=<span class="keyword">null</span>;</div><div class="line">		values[i]=<span class="keyword">null</span>;</div><div class="line">		i=(i+<span class="number">1</span>)%m;</div><div class="line">		<span class="keyword">while</span>(keys[i]!=<span class="keyword">null</span>)</div><div class="line">		&#123;</div><div class="line">			Key keysave=keys[i];</div><div class="line">			Value valsave=values[i];</div><div class="line">			keys[i]=<span class="keyword">null</span>;</div><div class="line">			values[i]=<span class="keyword">null</span>;</div><div class="line">			n--;</div><div class="line">			put(keysave, valsave);</div><div class="line">			i=(i+<span class="number">1</span>)%m;</div><div class="line">		&#125;</div><div class="line">		n--;</div><div class="line">		<span class="keyword">if</span>(n&gt;<span class="number">1</span>&amp;&amp;n&lt;m/<span class="number">8</span>)</div><div class="line">			resize(m/<span class="number">2</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>数组的大小对于基于线性探测法的散列表也十分重要:</p>
<ol>
<li>全满的数组是<strong>不可以</strong>的,因为这将失去null元素,不能命中的查找会变成死循环.</li>
<li><strong>α =N/M</strong>(n为当前符号表键值对数量,m为数组总的大小)<strong>越大</strong>,就有可能产生更长的键簇,<strong>查找也就更慢</strong>.</li>
</ol>
<p>因此我们在代码中若n&gt;=m/2就扩大一倍数组大小,若n&lt;=m/8就缩小一倍数组大小.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capcity)</span></span></div><div class="line">&#123;</div><div class="line">	LinarProbingHashST&lt;Key, Value&gt;t=<span class="keyword">new</span> LinarProbingHashST&lt;Key,Value&gt;(capcity);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">		<span class="keyword">if</span>(keys[i]!=<span class="keyword">null</span>)</div><div class="line">			t.put(keys[i],values[i]);</div><div class="line">	m=t.m;</div><div class="line">	values=t.values;</div><div class="line">	keys=t.keys;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python的装饰器]]></title>
      <url>https://ly11tea.github.io/2016/10/05/python%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有些面具戴得太久,就摘不下来了。<br><em>盗墓笔记</em></p>
</blockquote>
<a id="more"></a> 
<p>在python中有时我们需要封装一个现有的函数,在不改变现有函数体内容的大前提下,正常执行函数,并在函数执行前后做一些操作.这种做法在调试阶段十分必要.<br>这种情况下我们需要用到python的装饰器功能<br>装饰器的语法是:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="meta">@decorator_name('decorator_arg')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    .....</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_name</span><span class="params">(decorator_arg)</span>:</span><span class="comment">#带参数装饰器外层</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span><span class="comment">#基础框架开始</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">             <span class="comment">#todo 在调用函数前要做的事</span></div><div class="line">             rst = func(*args,**kwargs)</div><div class="line">             <span class="comment">#todo 调用后要做的事</span></div><div class="line">             <span class="keyword">return</span> rst</div><div class="line">          <span class="keyword">return</span> wrapper    <span class="comment">#基础框架结束</span></div><div class="line">    <span class="keyword">return</span> decorator <span class="comment">#带参数装饰器外层结束</span></div><div class="line">    </div><div class="line"><span class="meta">@decorator_name</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line"> <span class="comment">#如果装饰器函数不需要参数则可省略最外层:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span> <span class="comment">#框架开始</span></div><div class="line"><span class="meta">@functools.wraps(func)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    <span class="comment">#todo 前环绕</span></div><div class="line">    rst = func(*args,**kwargs)</div><div class="line">    <span class="comment">#todo 后环绕</span></div><div class="line">    <span class="keyword">return</span> rst</div><div class="line"><span class="keyword">return</span> wrapper <span class="comment">#框架结束</span></div></pre></td></tr></table></figure></p>
<p>其中<br>@decorator_name(‘decorator_arg’)<br>def func():<br>就相当于func=decorator_name(‘decorator_arg’)(func)<br>即将装饰函数生成的对象付给被装饰的函数,这样调用时的函数就进行了封装<br>以第一个框架为例,易得装饰函数的执行顺序是17-26-18-19-25-21-24.函数既接受了装饰器参数,由接受了原有函数的参数(第三层),并且还传递了函数的返回值,达到了装饰器的要求<br>其中@functools.wraps(func)还保证了内层封装函数的函数名同被装饰函数一致.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python的迭代器和生成器]]></title>
      <url>https://ly11tea.github.io/2016/10/05/python%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>一尺之捶,日取其半,万世不竭<br><em>庄子</em></p>
</blockquote>
<a id="more"></a> 
<h1 id="python的生成器"><a href="#python的生成器" class="headerlink" title="python的生成器"></a>python的生成器</h1><p>如果从迭代的视角来说,生成器给了我们一种简易的方法制作出一种可迭代对象.从关系上来时,我们可以称生成器是迭代器的真子集.<br>最简单的一种定义生成器的语法是定义一个列表生成式,这个生成式以()包围,这种语法返回的的就是一个惰性列表,所谓惰性列表,就是其中保存的只是得出列表中下一个元素的数学关系,直到需要下一个元素时才进行计算.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">l=(x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line">print(l)</div><div class="line">print(next(l))</div></pre></td></tr></table></figure></p>
<p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;generator object &lt;genexpr&gt; at 0x01FFE510&gt;</div><div class="line">0</div></pre></td></tr></table></figure></p>
<p>更为常用的方法是将函数改写为一个生成器,将函数中的return语句改为yield语句,这样我们就得到了一个可以定义生成器对象的函数,生成的生成器对象,在每次调用时候执行，遇到yield语句返回，再次执行时<strong>从上次返回的yield语句处继续执行。</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">yanghui</span><span class="params">()</span>:</span></div><div class="line">	l=[<span class="number">1</span>]</div><div class="line">	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">		<span class="keyword">yield</span> l</div><div class="line">		l.append(<span class="number">0</span>)</div><div class="line">		l=[l[i]+l[i<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l))]</div><div class="line">l=yanghui()</div><div class="line">print(next(l))</div><div class="line">print(next(l))</div><div class="line">print(next(l))</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[1]</div><div class="line">[1, 1]</div><div class="line">[1, 2, 1]</div></pre></td></tr></table></figure>
<p>我们可以看到在这个输出杨辉三角的小程序中,上一次计算的结果都被继承.当然我们还可以像其他可迭代对象一样使用它<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</div><div class="line">    <span class="keyword">print</span> i</div><div class="line">    n=n+<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> n==<span class="number">10</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<h1 id="python的迭代器"><a href="#python的迭代器" class="headerlink" title="python的迭代器"></a>python的迭代器</h1><p>我们把python中能够向下迭代的对象都叫做iterable对象,例如list,tuple,dict,生成器等等<br>而在这其中生成器<strong>在使用时不能预知其长度,知道需要下一个值时才进行计算</strong>,我们在python中称为iterator,iterator可以使用next函数得出下一刻的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">l=[1,2,8,3]</div><div class="line">next(l)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;C:\Users\ly\Desktop\test2.py&quot;, line 127, in &lt;module&gt;</div><div class="line">    next(l)</div><div class="line">TypeError: &apos;list&apos; object is not an iterator</div></pre></td></tr></table></figure>
<p>由上面的例子也可以看出,列表虽然iterable,但并不是iterator,利用迭代器与生成器我们可以很便捷的完成一些数学操作,例如:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_generator</span><span class="params">()</span>:</span></div><div class="line">	n=<span class="number">1</span></div><div class="line">	<span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">		n=n+<span class="number">2</span></div><div class="line">		<span class="keyword">yield</span> n</div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_notdivisable</span><span class="params">(n)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">lambda</span> x:x%n&gt;<span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">yield</span> <span class="number">2</span></div><div class="line">	it=_odd_generator()<span class="comment">#第一次使用奇数生成器相当于剔除了能被2整除的数</span></div><div class="line">	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">		n=next(it)</div><div class="line">		<span class="keyword">yield</span> n</div><div class="line">		it=filter(_notdivisable(n),it)<span class="comment">#给惰性队列加入新的剔除条件,并更新it</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primes():</div><div class="line">	<span class="keyword">if</span>(i&lt;<span class="number">10</span>):</div><div class="line">		print(i)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<p>这段代码不但用到了generator还用到了filter,他们都用来生成iterator对象(惰性队列),这段代码使用埃氏筛法计算队列,原理是生成一个从二开始的数列,2是是素数紧接着剔除2以后所有能被2整除的数,然后在新得到的数列中向后移一位(到3),这个数也是素数并提出这个数以后所有能被其整除的数,以此类推…<br>而如果我们使用py的iterator,就可以不必要计算出一定长度的数列,而是在每次计算中利用filter加入下一个数的整除剔除条件到iterator,产生新的iterator,这样使用iterator得出的素数每次都符合条件</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 的文件读写和file-like Object]]></title>
      <url>https://ly11tea.github.io/2016/09/26/python-%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8Cfile-like-Object/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>In UNIX, everything is a file.</p>
</blockquote>
<a id="more"></a> 
<h1 id="file-like-Object"><a href="#file-like-Object" class="headerlink" title="file-like Object"></a>file-like Object</h1><p>要想操纵一个文件你必须要使用open函数打开文件,open函数返回一个类文件对象,这就是这个文件在python中的抽象表示.</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote>
<p>open(file[, mode][, buffering][, encoding][, errors][, newline][, closefd=True])<br>方括号里的内容均可以省略.</p>
</blockquote>
<p>其中<br>file： 要打开的文件名，需加路径(除非是在当前目录)。唯一强制参数<br>mode： 文件打开的模式<br>buffering： 设置buffer（取值为0,1,&gt;1）<br>　0： 代表buffer关闭（只适用于二进制模式）<br>　1： 代表line buffer（只适用于文本模式）<br>encoding： 返回数据的编码（一般为UTF8或GBK）<br>errors： 报错级别（一般为strict，ignore）<br>　strict： 字符编码出现问题时会报错<br>　ignore： 字符编码出现问题时程序会忽略而过，继续执行下面的程序<br>newline： 用于区分换行符(只对文本模式有效，可以取的值有None,’\n’,’\r’,”,’\r\n’)<br>closefd： 传入的file参数类型（缺省为True）<br>　True： 传入的file参数为文件的文件名<br>　False： 传入的file参数只能是文件描述符<br>　Ps： 文件描述符，就是一个非负整数，在Unix内核的系统中，打开一个文件，便会返回一个文件描述符。<br>　<br>常用的参数有mode,encoding,buffering:</p>
<h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><p>mode：文件打开的模式。有如下几种模式<br>‘r’： 以只读模式打开（缺省模式）（必须保证文件存在）<br>‘w’：以只写模式打开。若文件存在，则会<strong>自动清空文件</strong>，然后重新创建；若文件不存在，则新建文件。使用这个模式必须要保证文件所在目录存在，文件可以不存在。<br>‘a’：以追加模式打开。若文件存在，则会追加到文件的末尾；若文件不存在，则新建文件。</p>
<p>要注意上面的<code>a</code>,<code>w</code>模式如果不用下面的<code>+</code>修饰是不能使用read…类的的函数的</p>
<p>下面四个模式要和上面的模式组合使用<br>‘b’：以二进制模式打开<br>‘t’： 以文本模式打开（缺省模式）<br>‘+’：以读写模式打开<br>‘U’：以通用换行符模式打开</p>
<p>所以加起来的组合有下面几种:</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td style="text-align:center">rb</td>
<td style="text-align:left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td style="text-align:center">r+</td>
<td style="text-align:left">打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td style="text-align:center">rb+</td>
<td style="text-align:left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:left">打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:center">wb</td>
<td style="text-align:left">以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:center">w+</td>
<td style="text-align:left">打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:center">wb+</td>
<td style="text-align:left">以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td style="text-align:center">ab</td>
<td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td style="text-align:center">a+</td>
<td style="text-align:left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td style="text-align:center">ab+</td>
<td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody>
</table>
<h2 id="文件读写的方法"><a href="#文件读写的方法" class="headerlink" title="文件读写的方法"></a>文件读写的方法</h2><h3 id="close-方法"><a href="#close-方法" class="headerlink" title="close()方法"></a>close()方法</h3><p>File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。为了防止可能的<strong>写入丢失</strong>,应该在每次关闭时都使用close()方法<br>语法：<br><code>fileObject.close();</code></p>
<h3 id="write-方法"><a href="#write-方法" class="headerlink" title="write()方法"></a>write()方法</h3><p>write()方法可将任何<strong>字符串</strong>写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<br>write()方法<strong>不会自动</strong>在字符串的结尾添加换行符(‘\n’)：<br>语法：<br><code>fileObject.write(string);</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fo = open(<span class="string">"a.txt"</span>, <span class="string">"wb"</span>)</div><div class="line">fo.write( <span class="string">"l\n"</span>);</div></pre></td></tr></table></figure>
<h3 id="read-方法"><a href="#read-方法" class="headerlink" title="read()方法"></a>read()方法</h3><p>read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<br>语法：<br>fileObject.read([count]);<br>在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是<strong>直到文件的末尾</strong>。</p>
<h2 id="文件定位的方法"><a href="#文件定位的方法" class="headerlink" title="文件定位的方法"></a>文件定位的方法</h2><h3 id="tell-方法"><a href="#tell-方法" class="headerlink" title="tell()方法"></a>tell()方法</h3><p>告诉你file-like Object在文件内的当前位置；换句话说，下一次的读写会发生在文件开头这么多字节之后。<br>语法：<br>fileObject.tell();</p>
<h3 id="seek-方法"><a href="#seek-方法" class="headerlink" title="seek()方法"></a>seek()方法</h3><p>语法:<br>fileObject.seek（offset [,from]）<br>方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置(默认为0)<br>如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。</p>
<h2 id="文件迭代"><a href="#文件迭代" class="headerlink" title="文件迭代"></a>文件迭代</h2><p>在Python中，文件不仅仅是一个对象，而且是一个可迭代对象！,我们可以<strong>按行</strong>迭代它.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</div><div class="line">	print(line)</div></pre></td></tr></table></figure></p>
<p>由上面的文件定位方法,我们可以看出file_like object指向的文件位置是可以变动.所以要注意file like object的指向位置</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python函数的参数]]></title>
      <url>https://ly11tea.github.io/2016/09/26/python%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>All roads lead to Rome.</p>
</blockquote>
<a id="more"></a> 
<p>python函数的参数使用非常灵活,有位置参数,默认参数,和多种的可变参数.其中可变参数的使用相较其他语言更加的便捷.现总结如下:</p>
<h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><p>位置参数是最常见的标准化参数。位置参数必须以在被调用函数中定义的<strong>准确顺序</strong>来传递。另外，没有任何默认参数）的话，传入函数（调用）的参数的精确的<strong>数目</strong>必须和声明的数字一致。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def power(a,b)</div><div class="line"></div><div class="line">power(1,2)#少了一个参数都会出现错误</div></pre></td></tr></table></figure></p>
<h1 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h1><p>对于默认参数如果在函数调用时没有为参数提供值则使用预先定义的的默认值。这些定义在函数声明的标题行中给出。c++也支持默认参数，和 python 有同样的语法：参数名等号默认值。<br>值得注意的是,同c++也一样,<strong>所有的位置参数必须出现在任何一个默认参数之前</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span><span class="params">(a,b=<span class="number">12</span>)</span></span></div></pre></td></tr></table></figure></p>
<p>同时还要注意的是,如果使用python中的<strong>可变对象</strong>作为默认参数,可能会继承上一次调用函数的结果,出现不想要的现象.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myadd</span><span class="params">(a,b=[])</span>:</span></div><div class="line">	b.append(a)</div><div class="line">	<span class="keyword">return</span> b</div><div class="line">	</div><div class="line">print(myadd(<span class="number">2</span>))</div><div class="line">print(myadd(<span class="number">3</span>))</div></pre></td></tr></table></figure></p>
<p>输出的结果是<br>[2]<br>[2, 3]<br>而非<br>[2]<br>[3]</p>
<h1 id="非关键字可变长参数（元组）"><a href="#非关键字可变长参数（元组）" class="headerlink" title="非关键字可变长参数（元组）"></a>非关键字可变长参数（元组）</h1><p>当函数被调用的时候，所有的形参（必须的和默认的）都将值赋给了在函数声明中相对应的局部变量。<strong>剩下</strong>的非关键字参数按顺序插入到一个<strong>元组</strong>中便于访问<br>同样的,可变长的参数元组必须在位置参数和默认参数之后:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">var</span><span class="params">(*a)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	<span class="keyword">for</span> ele <span class="keyword">in</span> a:</div><div class="line">		<span class="keyword">print</span> (ele)</div><div class="line">	</div><div class="line">var(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div></pre></td></tr></table></figure></p>
<p>输出为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;tuple&apos;&gt;</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td></tr></table></figure></p>
<h1 id="关键字变量参数-dict"><a href="#关键字变量参数-dict" class="headerlink" title="关键字变量参数(dict)"></a>关键字变量参数(dict)</h1><p>在我们有不定数目的或者额外集合的关键字的情况中，参数被放入一个字典中，字典中键为参数名，值为相应的参数值。为什么一定要是字典呢?因为为每个参数-参数的名字和参数值–都是成对给出—用字典来保存这些参数自然就最适合不过了。 </p>
<p>为了区分关键字参数和非关键字非正式参数，使用了双星号（**）标识符,同样的关键字参数必须位于<strong>位置参数,默认参数和非关键字可变长参数</strong>之后</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(**a)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	<span class="keyword">for</span> ele <span class="keyword">in</span> a.keys():</div><div class="line">		<span class="keyword">print</span> (ele,a[ele])</div><div class="line">vardict(city=<span class="string">'Beijing'</span>,job=<span class="string">'Engineer'</span>)</div></pre></td></tr></table></figure>
<p>输出为:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;class 'dict'&gt;</div><div class="line">job Engineer</div><div class="line">city Beijing</div></pre></td></tr></table></figure></p>
<h1 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h1><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过kw检查。<br>如果要限制关键字参数的名字，就可以用命名关键字参数,语法如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div><div class="line"><span class="comment">#命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数</span></div><div class="line"><span class="comment">#如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div><div class="line">    </div><div class="line"><span class="comment">#调用时要加上参数名</span></div><div class="line">person(<span class="string">'bert'</span>,<span class="number">22</span>,<span class="number">2</span>,<span class="number">3.</span>..,city=<span class="string">'sh'</span>,job=<span class="string">'tea'</span>)</div></pre></td></tr></table></figure></p>
<p>例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(a,b,*,c,d)</span>:</span></div><div class="line">	print(type(c))</div><div class="line">	print(a,b,c,d)</div><div class="line">vardict(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>,d=<span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>输出为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;int&apos;&gt;</div><div class="line">1 2 3 4</div></pre></td></tr></table></figure></p>
<p>值得注意的是:在使用这些参数类型时,要遵循的顺序是:<br><strong>必选参数、默认参数、可变参数、命名关键字参数和关键字参数</strong></p>
<h1 id="基于调用函数的参数概念"><a href="#基于调用函数的参数概念" class="headerlink" title="基于调用函数的参数概念"></a>基于调用函数的参数概念</h1><p>上面的概念都是相对于定义函数参数而言的,下面的两个概念与调用函数相关</p>
<h2 id="参数组"><a href="#参数组" class="headerlink" title="参数组"></a>参数组</h2><p>通过一个把元组（非关键字 参数）或字典（关键字参数）作为参数组传递给函数。</p>
<blockquote>
<p>func(<em>tuple_grp_nonkw_args, *</em>dict_grp_kw_args)</p>
</blockquote>
<p>tuple_grp_nonkw_args对应于非关键字参数,dict_grp_kw_args对应于关键字参数.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(a,b)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	print(a,b)</div><div class="line"></div><div class="line">a=(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">vardict(*a)</div></pre></td></tr></table></figure></p>
<p>输出为:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class 'int'&gt;</div><div class="line">1 2</div></pre></td></tr></table></figure></p>
<h2 id="关键字调用参数"><a href="#关键字调用参数" class="headerlink" title="关键字调用参数"></a>关键字调用参数</h2><p>让调用者通过函数调用中的参数名字来区分参数。这样规范允许参数缺失或者不按顺序,因为解释器能通过给出的关键字来匹配参数的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(a,b)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	print(a,b)</div><div class="line"></div><div class="line">a=(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">vardict(b=<span class="number">5</span>,a=<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>输出结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;int&apos;&gt;</div><div class="line">2 5</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 平衡查找树]]></title>
      <url>https://ly11tea.github.io/2016/09/25/%E7%AE%97%E6%B3%954-%E5%B9%B3%E8%A1%A1%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>天之道,损有余而补不足.<br><em>道德经</em></p>
</blockquote>
<p>目的:寻找一种数据结构,这种结构无论在任何插入情况下都能保证对数级别的运行时间.<br><a id="more"></a> </p>
<h1 id="2-3查找树"><a href="#2-3查找树" class="headerlink" title="2-3查找树"></a>2-3查找树</h1><p>我们将一棵标准的二叉查找树小的结点称为 2- 结点(含有一个键和两条链接), 而现在我们引人 3- 结点，它含有两个键和三条链接。</p>
<blockquote>
<p>定义:一棵2-3 查找树或为一棵空树，或由以下两种结点组成:<br>2- 结点，含有一个键(及其对应的值)和两条链接，左链接指向的 2-3 树中的键都<strong>小子</strong>该结点，右链接指向的 2-3 树中的键都<strong>大于</strong>该给点。<br>3- 结点，含有两个键(及其对应的值)和三条链接，左链接指向的 2-3 树中的键都<strong>小于</strong>该结点，中链接指向的2-3树中的键都位于该结点的两个键<strong>之间</strong>，右链接指向的 2-3树中的键都<strong>大于</strong>该给点。</p>
</blockquote>
<p><img src="images\black_red_tree\2_3tree.png" style="width: 260px;"></p>
<p>下面来重点谈谈2-3查找树的插入过程:</p>
<ol>
<li>向 2- 结点中插入新键:如果要在一个2-节点上插入新键,只需要将这个2-节点改为3-节点即可.<br><img src="images\black_red_tree\1.png" style="width: 260px;"></li>
<li>向只有一个3-节点的树中插入新键:直接向新键插入3-节点中,于是当前节点拥有三个键,四个连接,所以可以分解为三个二叉搜索树的节点,中间节点作为根节点,左节点为最小节点,右节点为最大节点.<br><img src="images\black_red_tree\2.png" style="width: 260px;"></li>
<li>向一个父节点为2-节点的3-节点插入新键:直接将新键插入当前节点中,于是当前节点拥有三个键,四个连接,但此时我们把中间键上浮至2-父节点.使父节点变为3-节点.<br><img src="images\black_red_tree\3.png" style="width: 260px;"></li>
<li><p>向一个父结点为 3- 结点的 3- 结点中插入新键:我们仍然将新键插入当前节点中,再次分解为三个2-节点,但此时上浮的根节点,会将其父节点也变为4-节点,所以我们再次重复,直到找到2-节点为止.<br><img src="images\black_red_tree\4.png" style="width: 260px;"></p>
</li>
<li><p>分解根节点:如果一个新插入键值路途上的所有节点都是3-节点,那么根节点也就变成了4-节点,此时我们套用情况2,将4-节点化为3个2-节点,树高+1<br><img src="images\black_red_tree\5.png" style="width: 260px;"></p>
</li>
</ol>
<p>特点:</p>
<ul>
<li>2-3查找树的每次插入都是局部性的,即对全局没有影响.</li>
<li>和标准的二叉态钱树由上向下生长不同. 2-3 树的生长是由下向上的。</li>
<li>性能:<strong>查找和插入操作访问的结点必然不超过 lgN个</strong></li>
</ul>
<h1 id="红黑二叉查找树"><a href="#红黑二叉查找树" class="headerlink" title="红黑二叉查找树"></a>红黑二叉查找树</h1><p>2-3查找树虽然带来了显著的性能改善,但是也增加了数据结构的复杂度和编码的难度,如果采用不当的编码方式,有可能造成性能低于二叉树;所以我们采用红黑树的方法,在二叉树的基础上实现了2-3查找树<br>我们们将树的链接分为两种类型:</p>
<ol>
<li>红链接将2个2-结点连接起来构成一个 3- 结点.</li>
<li>黑链接则是2-3查找树上的普通连接<br>确切地说,我们将 3- 结点表示为一条左斜的红色链接相连的2个2-节点<br>图</li>
</ol>
<blockquote>
<p>定义:一种带有红黑链接的二叉查找树:</p>
<ol>
<li>红链接均为左链接;</li>
<li>没有任何一个结点问时和两条红链接相连:</li>
<li>该树是完美黑色平衡的(任意空连接到根节点的黑色链接的数量是相同的)</li>
</ol>
</blockquote>
<p>一棵红黑树的红链接拉平.那么所有的空链接到根结点的距离都是相同的。 如果将所有由红链接相应的点结合,得到的就是一棵 2-3 树。<br>图</p>
<h2 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h2><p>我们在节点中表示链接的颜色(除根节点外.每个节点都有且仅有一条指向自己的链接).<br>约定:</p>
<ol>
<li>一个结点的颜色,指的是<strong>指向该结点的链接的颜色</strong></li>
<li>颜色变量类型为bool值,true代表红色,false代表黑色.</li>
<li>空节点颜色为黑色</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackRedTree</span> &lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;,<span class="title">Value</span>&gt; </span></div><div class="line">&#123;</div><div class="line">	Node root;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> Red=<span class="keyword">true</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> Black=<span class="keyword">true</span>;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></div><div class="line">	&#123;</div><div class="line">		Key key;</div><div class="line">		Value value;</div><div class="line">		Node left,right;</div><div class="line">		<span class="keyword">int</span> N;</div><div class="line">		<span class="keyword">boolean</span> colour;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key,Value value,<span class="keyword">int</span> N,<span class="keyword">boolean</span> colour)</span></span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">this</span>.key=key;</div><div class="line">			<span class="keyword">this</span>.value=value;</div><div class="line">			<span class="keyword">this</span>.colour=colour;</div><div class="line">			<span class="keyword">this</span>.N=N;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> Black;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> node.colour==Red;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h2><p>在插入新的键时我们可以使用旋转保证2-3树和红黑树之间的一一对应关系，因为旋转操作可以保持红黑树的两个重要性质:<strong>有序性和完美平衡性</strong>。<br>特点:</p>
<ol>
<li>旋转都是把两节点中较小点作为根节点变为将较大点变为根节点,并调换红节点</li>
<li>使用递归的方式进行旋转,每次返回经过旋转的当前节点值.</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateleft</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		Node temp=node.right;</div><div class="line">		node.right=temp.left; <span class="comment">//注意:本行与下面一行不可颠倒</span></div><div class="line">		temp.left=node;</div><div class="line">		temp.colour=node.colour;</div><div class="line">		node.colour=Red;</div><div class="line">		temp.N=node.N;</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> temp;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">rotateright</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		Node temp=node.left;</div><div class="line">		node.left=temp.right;</div><div class="line">		temp.right=node;</div><div class="line">		temp.colour=node.colour;</div><div class="line">		node.colour=Red;</div><div class="line">		temp.N=node.N;</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> temp;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><p>情况:</p>
<ol>
<li>向 2- 结点中插入新键:如果新键小于老键,我们只需将新键插入老键左链接并作为红节点.若大于,则需要将新键插入老键右链接,并进行左旋.</li>
<li>向树底的 2- 结点插入新键:与情况1相同<br><em>以上两种情况同2-3查找树中的插入情况1相类似.</em></li>
</ol>
<p>3.一棵双键树 〈 即一个 3- 结点〉 中插入新键:<br>a. 新键大于原树中的两个键:这种情况新键作为紅节点插入到双键树的右侧,那么就出现了两个红链接的现象,此时将两个红链接都置黑,得到3个2-树<br>对应于2-3查找树的情况2<br>b. 如果新键小于原树中的两个键,那么新键会被放置进当前左子树的左子树中,这样就出现了两条连续的红链接,此时将根节点右旋即可得到情况a.<br>c. 如果新键小于原树中的一个键大于另外一个,那么也会出现两个连续红链接的现象,一个为左链接一个下一层的右链接.,此时将右链接左旋即可得到情况b.</p>
<p>其中情况a的变换颜色,我们需要把子节点的链接由红置黑,同时将父节点由黑置红.值得注意的是:根节点始终应当是黑的.</p>
<p>4.树底部3-节点插入新键<br>与情况4相同</p>
<p>整个插入过程使用递归实现,事实上就是一个红链接不断向上移动的过程</p>
<p>总的来说,对于红黑树的操作为:</p>
<ol>
<li>如果右子结点是红色的而左子结点是黑色的.当前节点进行左旋转;</li>
<li>如果左子结点是红色的且它的左子结点也是红色,当前节点进行右旋转</li>
<li>如果左右子结点均为红色进行颜色转换。<br>需要在插入时按次序执行上述语句.<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flipcolour</span><span class="params">(Node node)</span></span></div><div class="line">&#123;</div><div class="line">	node.right.colour=Black;</div><div class="line">	node.left.colour=Black;</div><div class="line">	node.colour=Red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key,Value value)</span></span></div><div class="line">&#123;</div><div class="line">	root=put(root,key, value);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changecolour</span><span class="params">(Node node)</span></span></div><div class="line">&#123;</div><div class="line">	node.left.colour=node.right.colour==Black;</div><div class="line">	node.colour=Red;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node node,Key key,Value value)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Node(key, value, <span class="number">1</span>, Red);</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>) node=put(node.left, key, value);</div><div class="line">	<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>) node=put(node.right, key, value);</div><div class="line">	<span class="keyword">if</span>(cmp==<span class="number">0</span>) node.value=value;</div><div class="line">	<span class="keyword">if</span>(node.right.colour==Red&amp;&amp;node.left.colour!=Red)</div><div class="line">		node=rotateleft(node);</div><div class="line">	<span class="keyword">if</span>(node.left.colour==Red&amp;&amp;node.left.left.colour==Red)</div><div class="line">		node=rotateright(node);</div><div class="line">	<span class="keyword">if</span>(node.left.colour==Red&amp;&amp;node.right.colour==Red)</div><div class="line">		changecolour(node);</div><div class="line">	node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><ol>
<li>所有基于红黑树的符号表实现都能保证操作的运行时间为<strong>对数</strong>级别</li>
<li>一棵大小为 N 的红黑树的高度不会超过 2lgn,事实上在大多数情况下比较次数为lgn-0.5</li>
<li>相比较于二叉查找树的1.39lgn提升了40%</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python的格式化字符串与转义字符]]></title>
      <url>https://ly11tea.github.io/2016/09/24/python%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Give therefore to the emperor the things that are the emperor’s;and to God the things that are God’s.</p>
<p> <em>Gospel of Matthew</em></p>
</blockquote>
<p>其实python的格式化字符串与C的printf函数相当类似,但用法显得更为灵活,所以还是稍微总结一下.<br><a id="more"></a> </p>
<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>先看一下python字符串的格式,格式化字符串时，Python使用一个字符串作为模板。模板中有格式符，这些格式符为真实值预留位置，并说明真实数值应该呈现的格式。Python用一个tuple将多个值传递给模板，每个值对应一个格式符。</p>
<blockquote>
<p>模板%(value1,value2,…)</p>
</blockquote>
<p>其中模板格式为:</p>
<blockquote>
<p>[(name)][flags][width].[precision]typecode</p>
</blockquote>
<p>下面来一一介绍其中的元素含义:</p>
<h2 id="flags和width-precision"><a href="#flags和width-precision" class="headerlink" title="flags和width precision"></a>flags和width precision</h2><table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">定义宽度或者小数点精度 </td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">用做左对齐 </td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">在正数前面显示加号( + ) </td>
</tr>
<tr>
<td style="text-align:center">(空格键)</td>
<td style="text-align:center">在正数前面显示空格 </td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) </td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">显示的数字前面填充‘0’而不是默认的空格 </td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">‘%%’输出一个单一的’%’ </td>
</tr>
<tr>
<td style="text-align:center">(var)</td>
<td style="text-align:center">映射变量(字典参数) </td>
</tr>
<tr>
<td style="text-align:center">m.n</td>
<td style="text-align:center">m 是显示的最小总宽度,n是小数点后的位数(如果可用的话) </td>
</tr>
</tbody>
</table>
<h2 id="typecode"><a href="#typecode" class="headerlink" title="typecode"></a>typecode</h2><table>
<thead>
<tr>
<th style="text-align:center">格式化字符</th>
<th style="text-align:center">转换方式 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%c</td>
<td style="text-align:center">转换成字符(ASCII 码值，或者长度为一的字符串) </td>
</tr>
<tr>
<td style="text-align:center">%r</td>
<td style="text-align:center">优先用 repr()函数进行字符串转换 </td>
</tr>
<tr>
<td style="text-align:center">%s</td>
<td style="text-align:center">优先用 str()函数进行字符串转换 </td>
</tr>
<tr>
<td style="text-align:center">%d / %i</td>
<td style="text-align:center">转成有符号十进制数 </td>
</tr>
<tr>
<td style="text-align:center">%u</td>
<td style="text-align:center">转成无符号十进制数 </td>
</tr>
<tr>
<td style="text-align:center">%o</td>
<td style="text-align:center">转成无符号八进制数 </td>
</tr>
<tr>
<td style="text-align:center">%x/%X</td>
<td style="text-align:center">(Unsigned)转成无符号十六进制数(x/X代表转换后的十六进制字符的大小写) </td>
</tr>
<tr>
<td style="text-align:center">%e/%E</td>
<td style="text-align:center">转成科学计数法(e/E 控制输出 e/E) </td>
</tr>
<tr>
<td style="text-align:center">%f/%F</td>
<td style="text-align:center">转成浮点数(小数部分自然截断) </td>
</tr>
<tr>
<td style="text-align:center">%g/%G</td>
<td style="text-align:center">%e 和%f/%E 和%F 的简写 </td>
</tr>
<tr>
<td style="text-align:center">%%</td>
<td style="text-align:center">输出% </td>
</tr>
</tbody>
</table>
<p>其中比较有用的可能是m.n,即设置浮点数和整数的总宽度和浮点数的小数精度.<br>基本的一些例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%x"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'6c'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%X"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'6C'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%#X"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'0X6C'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%#x"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'0x6c'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%f'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.567890'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%.2f'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.57'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%E'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1.234568E+03'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%e'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1.234568e+03'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%g'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.57'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%G'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.57'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%e"</span> % (<span class="number">1111111111111111111111L</span>) </div><div class="line"><span class="string">'1.111111e+21'</span></div><div class="line"><span class="comment">#科学计数法表示同样也可以适用m.n,</span></div><div class="line">&gt;&gt;&gt;print(<span class="string">"%66.10e"</span> % (<span class="number">1111111111111111111111</span>))</div><div class="line"></div><div class="line">                                                  <span class="number">1.1111111111e+21</span></div></pre></td></tr></table></figure></p>
<p>值得一提的是格式化字符<em>,它能够用后面tuple中相应的值代入width和precision<br>例如 :`print(“%.</em>f” % (4, 1.2))`<br>还有利用name参数,我们可以使用预先定义的格式化字符串生成字符串:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">formatter = <span class="string">"%r %r %r %r"</span></div><div class="line"><span class="keyword">print</span> formatter % (<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>当然我们可以看到python的格式化字符串指令不依赖于函数,只是一个返回字符串的运算符.所以我们既可以用来输出字符串,也可以用来定义字符串..等等其他用途.</p>
<h1 id="python的三引号"><a href="#python的三引号" class="headerlink" title="python的三引号"></a>python的三引号</h1><p>三引号’’’ ‘’’,在print中用来输出多行字符串,直接使用三引号还可以用来进行多行注释.</p>
<h1 id="python的转义字符"><a href="#python的转义字符" class="headerlink" title="python的转义字符"></a>python的转义字符</h1><table>
<thead>
<tr>
<th style="text-align:center">转义字符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">(在行尾时)</td>
<td style="text-align:center">续行符</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">反斜杠符号</td>
</tr>
<tr>
<td style="text-align:center">\’</td>
<td style="text-align:center">单引号</td>
</tr>
<tr>
<td style="text-align:center">\”</td>
<td style="text-align:center">双引号</td>
</tr>
<tr>
<td style="text-align:center">\a</td>
<td style="text-align:center">响铃</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:center">退格(Backspace)</td>
</tr>
<tr>
<td style="text-align:center">\e</td>
<td style="text-align:center">转义</td>
</tr>
<tr>
<td style="text-align:center">\000</td>
<td style="text-align:center">空</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:center">换行</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td style="text-align:center">纵向制表符</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:center">横向制表符</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td style="text-align:center">回车</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td style="text-align:center">换页</td>
</tr>
<tr>
<td style="text-align:center">\oyy</td>
<td style="text-align:center">八进制数yy代表的字符，例如：\o12代表换行</td>
</tr>
<tr>
<td style="text-align:center">\xyy</td>
<td style="text-align:center">十进制数yy代表的字符，例如：\x0a代表换行</td>
</tr>
<tr>
<td style="text-align:center">\other</td>
<td style="text-align:center">其它的字符以普通格式输出</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 二叉查找树]]></title>
      <url>https://ly11tea.github.io/2016/09/23/%E7%AE%97%E6%B3%954-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>世界上有10种人，一种懂二进制，一种不懂</p>
</blockquote>
<a id="more"></a> 
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>一根二又查找树 ( BST ) 是一根<strong>二叉树</strong>，其中每个结点都含有一个Comparable 的键(以及相关联的值)且每个结点的键都<strong>大于其左子树</strong>中的任意结点的键而<strong>小子右子树</strong>的任意结点的键。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1></blockquote>
<h2 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h2><p>用嵌套定义的链表实现,每个节点含有一个健、 一个值、一条左链接、一条右链接和一个结点计数器<br>实现的私有方法 size方法 会将空链接的值当作 0 ，这样我们就能保证以下公式对于二叉树中的任意结点 x 总是成立:<br>size(x)  =  size(x .left)  +  size(x. right)  +  1 </p>
<h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h2><p>不难想象,搜索树的查找方法是一个递归的算法:</p>
<ol>
<li>如果树是空的.则查找立刻命中;</li>
<li>如果被查找的键和根结点的键相等，查找命中.</li>
<li>如果被查找的键大于根节点的值,则跳向右节点,如果小于则跳向左节点.</li>
<li>递归的执行</li>
</ol>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> alg;</div><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;,<span class="title">Value</span>&gt; </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Node root;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">private</span> Value value;</div><div class="line">		<span class="keyword">private</span> Key key;</div><div class="line">		<span class="keyword">private</span> Node left;</div><div class="line">		<span class="keyword">private</span> Node right;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> N;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key,Value value,<span class="keyword">int</span> N)</span></span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">this</span>.key=key;</div><div class="line">			<span class="keyword">this</span>.value=value;</div><div class="line">			<span class="keyword">this</span>.N=N;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> size(root);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> node.N;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 公有接口与私有接口需分开:对于用户公有接口,get只需关心键值是什么</div><div class="line"> * 而在私有接口中因为是采用递归的方法查找元素,故需要加入node参数</div><div class="line">*/</div><div class="line">	<span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> get(root,key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node node,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> get(node.left,key);</div><div class="line">		<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> get(node.right, key);</div><div class="line">		<span class="keyword">return</span> node.value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Value value,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		root=put(root, key,value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node node ,Value value,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Node(key, value, <span class="number">1</span>);</div><div class="line">		<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">			node.left=put(node.left, value, key);</div><div class="line">		<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">			node.right=put(node.right, value, key);</div><div class="line">		<span class="keyword">if</span>(cmp==<span class="number">0</span>)</div><div class="line">			node.value=value;</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>使用二叉查找树的算法的运行时间取决于<strong>树的形状</strong>,在最好的情况下，<br>一棵含有 N 个结点的树是完全平衡的.每条空链接和根结点的距离都为~lgN。 在最坏的情况下，搜索路径上可能有 N个结点。<br><img src="/images/condition.png" style="width: 260px;"></p>
<p>如果假设元素的插入顺序是随机的,二义查找树和快速排序几乎就是双胞胎。 树的根节点就是快速排序巾的第一个切分元素(左侧的键都比这个元素小，右侧的键都比它大).<br>可证明:二叉搜索搜索树寻找到一个元素的平均时间为<strong>2lnn</strong>(1.39 lgn)</p>
<h1 id="顺序化函数"><a href="#顺序化函数" class="headerlink" title="顺序化函数"></a>顺序化函数</h1><h2 id="floor和ceiling"><a href="#floor和ceiling" class="headerlink" title="floor和ceiling"></a>floor和ceiling</h2><p>floor(向下取整,找到小于等于要求元素的最大值):</p>
<ol>
<li>若要求元素小于当前节点,则floor元素在左子树中或者无floor元素(左子树为空);</li>
<li>若要求的元素大于当前节点且右子树中有小于待求元素的节点时,要求节点在右子树中.否则当前节点就是要求节点</li>
</ol>
<p>ceiling(向上取整,找到大于等于要求元素的最小值):</p>
<ol>
<li>若要求元素小于当前节点且左子树中还有大于要求元素的节点时,要求节点在左子树中,否则就是当前节点.</li>
<li>若要求元素大于当前节点时,则ceiling元素在右子树中或者没有(右子树为空)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> Node <span class="title">ceiling</span><span class="params">(Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> ceiling(root,key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">ceiling</span><span class="params">(Node node,Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		Node t=ceiling(node.left,key);</div><div class="line">		<span class="keyword">if</span> (t==<span class="keyword">null</span>) </div><div class="line">			<span class="keyword">return</span> node;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> t;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> ceiling(node.right, key);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">floor</span><span class="params">(Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> floor(root,key);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node node,Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp==<span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	<span class="keyword">if</span> (cmp&lt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> floor(node.left,key);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		Node t=floor(node.right, key);</div><div class="line">		<span class="keyword">if</span>(t==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> node;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> t;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="rank和select"><a href="#rank和select" class="headerlink" title="rank和select"></a>rank和select</h2><p>select:</p>
<ol>
<li>即为访问在数组中次序为K(从0开始)的元素，和查找键值为KEY的元素方法不同</li>
<li>找到排名为k 的键(即树中恰好有k个小于其的键)。如果左子树的结点数t 大于k，那么我们就继续(递归地)在左子树中查找排名为 k 的键;如果 t 等于k， 我们就返回根结点;如果 t小子k，我们就(递归地)在右子树巾查找排名为 (k-t-1)(-1是因为根节点) 的节点并返回。 </li>
</ol>
<p>rank:</p>
<ol>
<li>rank是select的逆方法</li>
<li>如果给定的键根结点的键相等.我们返回左子树中的节点数t;如果给定的健小于根结点.我们会返回<br>该键在左子树子树中的排名(递归计算);如果给定的健大于根结点，我们会返回t+1+该键右子树的排名.</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Node <span class="title">select</span><span class="params">(<span class="keyword">int</span> i)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> select(i,root);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">select</span><span class="params">(<span class="keyword">int</span> i,Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> length=size(node.left);</div><div class="line">		<span class="keyword">if</span> (length==i)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> node;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (length&gt;i) </div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> select(i, node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> select(i-length-<span class="number">1</span>, node.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> rank(root,key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node node,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> t=size(node.left);</div><div class="line">		<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(cmp==<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> t;</div><div class="line">		<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> rank(node.left, key);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> t+<span class="number">1</span>+rank(node.right, key);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>删除最大键和删除最小键</p>
<ol>
<li>从根节点开始不断地(递归)向左子树遍历,直到某个节点左子树为空时(显然这个节点就是最小的节点),返回这个节点的右节点,使这个节点的父节点指向这个节点的右节点.</li>
</ol>
<p>删除指定节点,设指向当前节点为x</p>
<ol>
<li>将指向即将被删除的节点的链接保存为t;</li>
<li>将节点链接保存为min(t.right)</li>
<li>将t.right中的最小节点删除.</li>
<li>x.left=t.left</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delmin</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	root=delmin(root);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">delmin</span><span class="params">(Node node)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> node.right;</div><div class="line">	<span class="keyword">else</span> </div><div class="line">	&#123;</div><div class="line">		node.left=delmin(node.left);</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Key key)</span></span></div><div class="line">&#123;</div><div class="line">	root=del(root,key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">del</span><span class="params">(Node node,Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">		node.left=del(node.left, key);</div><div class="line">	<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">		node.right=del(node.right, key);</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node.left==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> node.right;</div><div class="line">		<span class="keyword">if</span>(node.right==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> node.left;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			Node temp=node;</div><div class="line">			node=min(node.right);</div><div class="line">			node.right=delmin(temp.right);</div><div class="line">			node.left=temp.left;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">    node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> node;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要体会递归删除节点的方法:</p>
<ol>
<li>使用返回值为节点类型(node)的函数依次向下递归,不需删除的节点,返回<strong>当前递归所在的节点</strong></li>
<li>需要删除的节点,返回<strong>要删除节点的替代节点</strong>.</li>
<li>还要注意维护当前节点的<strong>数量值</strong>.</li>
</ol>
<h2 id="范围查找"><a href="#范围查找" class="headerlink" title="范围查找"></a>范围查找</h2><ol>
<li>使用中序遍历的方法,先打印出左子树所有的键,然后向上回溯并打印<strong>最近</strong>的根节点,最后打印右子树</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Iterable&lt;Key&gt;keys(Key lo,Key hi)</div><div class="line">	&#123;</div><div class="line">		Queue&lt;Key&gt; matchkeys=<span class="keyword">new</span> Queue&lt;Key&gt;() ;</div><div class="line">		keys(matchkeys, root,lo,hi);</div><div class="line">		<span class="keyword">return</span> matchkeys;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keys</span><span class="params">(Queue&lt;Key&gt;matchkeys,Node node,Key lo,Key hi)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> locmp=lo.compareTo(node.key);</div><div class="line">		<span class="keyword">int</span> hicmp=hi.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(locmp&lt;<span class="number">0</span>)</div><div class="line">			keys(matchkeys,node.left,lo,hi);</div><div class="line">		<span class="keyword">if</span>(locmp&lt;=<span class="number">0</span>&amp;&amp;hicmp&gt;=<span class="number">0</span>)</div><div class="line">			matchkeys.enqueue(node.key);</div><div class="line">		<span class="keyword">if</span>(hicmp&gt;<span class="number">0</span>)</div><div class="line">			keys(matchkeys, node.right, lo, hi);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>要注意中序遍历的递归实现的顺序:先使用<strong>递归语句不断遍历左子树</strong>,遍历完成后首先将当前左子节点送入队列,然后送入根节点,这时若条件达成还会遍历右子树.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一首诗 翻译]]></title>
      <url>https://ly11tea.github.io/2016/09/20/%E4%B8%80%E9%A6%96%E8%AF%97-%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Here, though the world explode, these two survive,And it is always eighteen ninety-five.<br><strong>Vincent Starrett</strong></p>
</blockquote>
<blockquote>
<p>Here dwell together still two men of note<br>Who never lived and so can never die:<br>How very near they seem, yet how remote<br>That age before the world went all awry.<br>But still the game’s afoot for those with ears<br>Attuned to catch the distant view-halloo:<br>England is England yet, for all our fears—<br>Only those things the heart believes are true.</p>
<p>A yellow fog swirls past the window-pane<br>As night descends upon this fabled street:<br>A lonely hansom splashes through the rain,<br>The ghostly gas lamps fail at twenty feet.<br>Here, though the world explode, these two survive,<br>And it is always eighteen ninety-five.</p>
</blockquote>
<a id="more"></a> 
<p>这是著名(好吧其实之前我也没听说过)的福迷Vincent Starrett写的一首诗,这个人几乎与书中的福尔摩斯生活在一个时代,主业是一个美国的记者,但他更为人所知的是写过一本研究福尔摩斯的著作《The Private Life of Sherlock Holmes》(在1933年出版,可见这家伙迷得有多早),还有这首诗.听说神夏4今年寒假会出来,就想着翻译下这首诗酝酿一下感情<br>)))逃</p>
<blockquote>
<p>这住着两个重要的人<br>他们从来没存在过所以也从未死去<br>他们离我们很近却又十分遥远<br>在世界还未崩坏之前<br>但对观众们来说好戏才刚开始<br>就像是远方猎人的呼号:<br>英格兰还是那个令人恐惧的大不列颠–<br>我们相信这是真的.</p>
<p>硫磺色的烟雾划过窗口<br>当夜幕降临这条虚构的街.<br>孤夜,一架马车穿过雨幕<br>鬼魅的煤气灯孤悬于20英尺外.<br>在这里,世界爆炸,这两个人活下来,<br>永恒的1895年.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[<梦断代码>书摘与笔记]]></title>
      <url>https://ly11tea.github.io/2016/09/18/%E6%A2%A6%E6%96%AD%E4%BB%A3%E7%A0%81-%E4%B9%A6%E6%91%98%E4%B8%8E%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“今有程序员五人，代码需时日几何？” “一年。”<br>“吾急需之！若有十人，几何？” “两年。”<br>“百人若何？” “万世。”</p>
</blockquote>
<a id="more"></a> 
<h1 id="软件时间"><a href="#软件时间" class="headerlink" title="软件时间"></a>软件时间</h1><blockquote>
<p>1.那时我年方十五，正迷恋于一个叫做 Sumer的游戏，在费就申 ，我管理着新月沃土上一座古代城邦。今天的电脑游戏玩家也会嘲笑其在嫩:它在一卷纸上逐行打印出大写字母，报告游戏进程。由远姑且分配食用和留种的谷物，然后程序就会告知城邦每年的发展情况。”汉漠拉比陆下，”程序像一个诚惶诚恐的宰相般报告说，”微臣伏启圣鉴……”</p>
</blockquote>
<p>这句话让我想起了2004-05年的时候玩三国志的经历,那时候不知道从哪发现了一个对岸三国游戏爱好者的网站,是一个只有ip地址的网站,从那上面下到了一个dos下的三国游戏,显示游戏地图就是用字符串打印出来的网状图,我想这就是”蛮荒时代”游戏的样子吧.</p>
<blockquote>
<p>2.我不在乎干到多晚。 F 线地铁整夜运行， 可以把我带回位于皇后区<br>的家。一定得重新设计游戏中的革命模式!</p>
</blockquote>
<p>我们编写或者重构软件时总是雄心勃勃的,其实沉浸在编码的体验与沉迷游戏是一样的,常常埋头实现某个feature或者fix bug,再抬头时窗外天色已经昏暗.从另一个方面来说这个过程又是危险的,同电子游戏一样,这个过程能让你完全失去时间的概念,这就是作者所说的软件时间,可长可短.再没有比他更危险,混沌却又迷人的事情了.</p>
<blockquote>
<p>3.关于软件缺陆的话题，只要谈上几分钟，必会有人拍案叹道，”为什<br>么就是不能像造桥那样造软件? .. </p>
</blockquote>
<p>虽然我们一直叫软件工程,然而却从来没有其他任何一种工程掺杂进这么多人的因素,软件工程,事实上我们是在和自己战斗.</p>
<blockquote>
<p>4.软件错误每年造成美国 595 亿美元的经济损失，三分之二的项目明显延误或超出预算，甚至干脆无疾而终。</p>
</blockquote>
<p>延误,延误.可能是每一个项目都要经历的过程,我们永远没有办法准确预估要解决的问题的难度和解决手段的准确性,并且往往显得乐观.所以不要相信程序员的时间表.</p>
<blockquote>
<p>5.有些人梦想炸毁今天的整座软件大厦，替以某种全新之物。 有些人则只一昧盼望找到不太顽固、更能响应人类愿望和行为流程的程序员，盼望能得到招之即来、挥之即去的软件，盼望得到足堪依赖的代码。</p>
</blockquote>
<p>只要我们无法改变我们自己本身,就只能继续妥协.从面向过程到面向对象,泛型编程,我们尽量让自己妥协的更少.</p>
<h1 id="死定了"><a href="#死定了" class="headerlink" title="死定了"></a>死定了</h1><blockquote>
<p>1.不确定因素太多 : 你所需的时间取决于其他人所花的时间。</p>
</blockquote>
<p>开发更多的时候是一项团队运动,一个节点上的阻塞,可能会导致全面的阻塞.</p>
<blockquote>
<p>2.意见取得一致了:黑洞式的缺陆一一即无法确定修正所需时长的缺<br>陷一一在 Bugzilla 申应该用特别的警示词标记出来。</p>
</blockquote>
<p>黑洞式的漏洞看上去会使人感到焦躁,然而真正深入其中会发现他无知无觉,甚至充满诱惑,引诱你用越来越多的时间修复他,也许下一刻就好了呢?,我们在其前的态度越来越像一个赌徒,不过筹码换成了时间,心中也只是单纯希望之前的时间没有白费,但眸然回首,更多的时间消耗于其中.</p>
<blockquote>
<p>3.软件项目难以按照进度安排实现，这种情况极为常见，而且为众人所宽窑。在软件开发世界里，进度延误普遍到人们特意生造出一个委婉词来描述它: slippage (失速).当然， 每个领域都存在延误现象。司法诉讼程序蜗行般的进度尽人皆知 ; 建筑承包商要是按期完工，就会招来怀疑的目光。然而，软件时间自我扭曲再头尾相撞，如同奠比乌斯环①一般令人费解。进度忽而突飞猛进，忽而不知何故驻足道中。在你以为大功即将告成之时，却又山穷水尽，花上整半年时间， 一无所得。</p>
</blockquote>
<p>软件的时间是非线性的,不确定的.我们很可能因为改掉了一个BUG,加快进度.也可能因为增加一个feature掉入深渊.有没有一种方式如同建筑上的施工进度一样线性的衡量开发进度,还没有答案.</p>
<blockquote>
<p>4.布鲁克斯法则就这样产生了 ， 昕起来既是原则也是悖论”<strong>往已延误的项目中补充人力 ， 只会使其继续延误</strong>。”布鲁克斯写道，软件开发者通常都是乐天派，他们认定每个缺陷可以被迅速修正，且修正旧缺陷必能减少新缺陷的数量。布鲁克斯发现，在实际开发中，编码只占项目开发时间的 1/6 ， 有一半时间用于测试和修正缺陷。但只有少数项目经理会真正按照这种思路来安排开发人员的工作时间。</p>
</blockquote>
<p>2-8时间在软件开发上一样适用</p>
<blockquote>
<p>5.在预估及安排项目进度上的每一份努力,是”危险且具欺骗性的神话”。<br>所谓”人月··，是一种科学管理概念，它假定生产力可被拆分为不连续、无差异、可替换的单元。布鲁克斯观察到，”<strong>只有在任务能分派给许多互相之间无须沟通的工作者</strong>时，人和月才是可互换品。”对于软件而言， 项目各有差异、工具不断升级，每当团队中加入一个新组员，老组员就得放下手边的工作，帮助新组员进入角色，每位组员都要等待重新分派任务，好让新组员有事可做。在你意识到这一切之前，已经远远落后于进度了。在最坏的情况下，这会导致<strong>灾难般的延误循环</strong>，一种”再生性进度灾难”。每次重新安排进度计划，都导致<strong>雇用更多人力，于是又不得不重新安排</strong>进度。布鲁克斯对此心存恐惧:疯狂在兹。”</p>
</blockquote>
<p>这算是对人月神话比较经典的概括,十月怀胎,一朝分娩.然而十个孕妇,也无法在一个月里生出孩子.</p>
<blockquote>
<p>6.尽管他们采用了诸如邮件列表、blog、缺陆跟踪、源码控制等工具，但和他人保持一致仍然极其困难。</p>
</blockquote>
<p>没有银弹.自从人月神话诞生那天起有太多的东西被当做银弹,然而没有一个真正奏效.</p>
<blockquote>
<p>7.”开放源代码软件”这种开发方法论在 〈 人月神话〉 的年代尚未出现。与之后其他任何一种开发方式不同，开源让编程世界错以为布鲁克斯法则将成弃履。<br>1985 年，麻省理工怪才斯托曼出于对商业软件产业封闭代码积习的憎恨， 创办了自由软件基金会( Free Software Foundation )。基金会发布了一种特殊的软件许可，依据该许可， 你能够获得全部所需代码、复用这些代码、组合到新产品中一一但利用该代码创建出来的任何产物，也必须采用同样的许可。这种被称作GPL ( GNU Public License )</p>
</blockquote>
<p>不管你相信与否这些人,这项运动确实改变了程序开发的方式,现如今,就连GNU当年的针对者,微软也拥抱了开源.</p>
<blockquote>
<p>8.”多年来，我一直在宣扬小工具、快速原型和进化式编程的 UNIX 福音。 可我曾相信，存在某种重要的复杂性，需要是集中旦有计划的手法来解决。 我也曾相信，最重要的软件……需要像<strong>建教堂一般，由独立的巫师或一队相互隔离的魔法师精心打造</strong>，在面世之前绝不发布 beta 版本。李纳斯 · 托瓦茨的开发风格一一平发布、多发布、全委托、尽开放一一让我吃惊。 这里不存在<strong>静穆、虔诚的教堂式开发</strong>一一相反，Linux社样看似一个<strong>乱哄哄的大集市</strong>，铺陈了各种日程和手法……要从中得到前后一致和稳定的系统，简直只能指望奇迹再三出现。可事实上<strong>这种集市风格看来行之有效</strong>.</p>
<p>9.瑞蒙德指出其中的两个要诀:其一，低成本、广泛地接人像互联网那样的网络，让开发者之间能建立迅速、可信的沟通渠道，存储可被开放访问的共享知识和代码池;其二，围绕一种领导方式一一如托瓦茨那样的方式一一形成合作团队的良好风气.<br>“只要<strong>有足够多的 beta 版测试人员和开发者队伍</strong>， 几乎所有问题都很快被发现，而且总有人知道该怎么修复。或者用不太正式的说法，眼<br>球足够多，缺陆无处躲。’我把这叫做 ‘ 李纳斯法则 ‘ “”乐享即能高效”瑞蒙德写道。”愉悦是金。”这些理想化的格言令人振奋,一旦需经实践验证。开放源代码似乎也受困于延误。开源运动的新集市模式在很多方面改变了计算世界，但说到能比大教堂模式更快地让新产品面世，却并无显著建树。</p>
</blockquote>
<p>敏捷型开发和开源同样不是银弹,他可能使我们开发出更好的软件,但并不一定以最快的速度.并且软件的质量还有可能出现下降:</p>
<blockquote>
<p>现在微软全面拥抱敏捷开发，敏捷开发指的就是快速迭代，第一天提出需求，第二天开发，第三天开发本人做简单局部测试，当天下午上线，根本没时间回归，一切回归测试结果以用户骂娘为准，所以不需要测试职位了.以前每个组的dev和tester比例是1:1，现在基本变成每个组只有很少的tester。</p>
</blockquote>
<p>win10开始微软尝试以快速迭代的互联网方式进行开发,大幅度减少了测试的工作和岗位,将用户反馈作为实际上的测试,这导致win10的最初几个开发版,bug连连.怪不得当时觉得微软对windows insider.这边的投入很大而且像是要搞出一个社区的样子,原来都是套路….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些年踩过的python坑（一）]]></title>
      <url>https://ly11tea.github.io/2016/09/16/%E9%82%A3%E4%BA%9B%E5%B9%B4%E8%B8%A9%E8%BF%87%E7%9A%84python%E5%9D%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>格者，正也，正其不正，以归于正也.</p>
<p><strong>王阳明</strong>, <em>传习录</em></p>
</blockquote>
<p>写一些初学python遇到的坑,主要是总结后给自己提个醒,当然如果能够帮助到别人那就更好了.<br><a id="more"></a> </p>
<h2 id="python的turple-list和dict"><a href="#python的turple-list和dict" class="headerlink" title="python的turple,list和dict"></a>python的turple,list和dict</h2><p>python尽量省略了变量的初始化和定义语句,对于单个变量来说一般情况下完全不需要初始化,直接进行赋值即可.对于数组型数据结构,也仅仅需要在使用前使用纯符号定义类型.这样做好处是加快了编程流程,然而对于新手来说这也增加了混淆的风险.<br>首先先来介绍一下这三种数据结构:</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><blockquote>
<p>列表. list是一种有序的集合，可以随时添加和删除其中的元素.<br>l=[]</p>
</blockquote>
<p>list中的数据类型可以是不固定的,所以是一种复合的数据类型.list也可以方便的使用<strong>内建函数</strong>增加或删除某些元素.</p>
<h3 id="turple"><a href="#turple" class="headerlink" title="turple"></a>turple</h3><blockquote>
<p>元祖. turple是一种有序的集合，一旦定义完成<strong>不能</strong>添加和删除其中的元素.<br>t=()</p>
</blockquote>
<p>list和tuple的性质非常相似，其中最大的区别其实就在于是否为常量。</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><blockquote>
<p>字典，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。<br>d={}</p>
</blockquote>
<p>个人觉得这个就是散列表的一种实现,将散列表直接作为一种常用数据类型,这也体现python现代高级语言的特点.<br>dict与上述两个数据类型最大的不同是其中的element是成对存储的,也就是上面所说的键值对.此外由于是无序的,dict的插入元素也非常方便:你只需要用赋值语句对应的key-value填充字典即可</p>
<blockquote>
<p>d[key]=value</p>
</blockquote>
<p>所以爱偷懒的人(比如我)或者以前学过C++的人可能会想到,可以使用dict来实现list,只要将其中的index换成key即可,在语言使用习惯上更符合c-style的习惯,并且还不用提前分配空间,比vector好使!…然而这并不是一种好的习惯:</p>
<ul>
<li>首先index-&gt;key会改变自身的数据类型,</li>
<li>且占用了大量内存.</li>
<li>还无法保证<strong>迭代时的有序性</strong>(这一点我还没有碰到),即迭代的顺序未必是插入时的顺序.</li>
</ul>
<p>所以,下面我就碰到了坑:<br>我们都知道python中也有for..in..循环,然而与c-style语言中偏好于下标实现不同python更偏向于迭代器实现,甚至根本不鼓励下标实现.也确实做到了用迭代器实现代码更少更方便(这一点上要明显好于C++).<br>例如:<br>遍历list l中元素:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</div><div class="line">    i....</div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</div><div class="line">    l[i]....</div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i,value <span class="keyword">in</span> enumerate(l):</div><div class="line">    l[i]...</div></pre></td></tr></table></figure>
<p>上面的三种方法显然第一种使用迭代器的方案最优.然而使用迭代器我们就必须能够明晓迭代器的数据类型.<br>对于list和tuple迭代器的类型就是其中element的类型,而dict默认为<strong>其中的 key</strong> :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</div><div class="line">    i <span class="comment">##此时的i为int,是key</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> va <span class="keyword">in</span> d.values():</div><div class="line">    va <span class="comment">##此时va为d中值</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i,va <span class="keyword">in</span> d.items():<span class="comment">##还可以遍历键值对</span></div><div class="line">    i,value....</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</div><div class="line">    i <span class="comment">##此时的i为int,是key</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> va <span class="keyword">in</span> d.values():</div><div class="line">    va <span class="comment">##此时va为d中值</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i,va <span class="keyword">in</span> d.items():<span class="comment">##还可以遍历键值对</span></div><div class="line">    i,value....</div></pre></td></tr></table></figure>
<p>对于赋值语句,这个规律仍然存在:<br>例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">std_msgs.msg.Int8MultiArray(data=d)</div><div class="line">t=tuple(d)</div><div class="line">l=list(d)</div></pre></td></tr></table></figure></p>
<p>这个data参数,tuple函数,list函数只接受一个数据序列,此时复制过去的就是dict的key,若要想复制value,就必须使用<code>d.values()</code></p>
<h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h2><p>由于python支持tuple packing 和Sequence unpacking以达到多重赋值,所以赋值时可能出现一些我们不想要的结果然而代码却仍能够执行下去:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enumerate(l)</div><div class="line">    <span class="comment">###此时每一次循环中i是一个两个元素的一维tuple</span></div><div class="line"><span class="keyword">for</span> i,va <span class="keyword">in</span> enumerate(l)</div><div class="line">    <span class="comment">###此时为两个int,分别为 index和value</span></div></pre></td></tr></table></figure></p>
<p>相似的语句却产生了完全不同的两种数据类型,且语句中也没有显式的体现,这也是py极少的对于新手不友好的地方.</p>
<h2 id="bytearrary"><a href="#bytearrary" class="headerlink" title="bytearrary"></a>bytearrary</h2><p>另一个为新手所诟病的python坑,莫过于是python的两个版本,python2和python3了.有偏激的说法说这两个版本实际上已经成为了两种语言,这当然不对.最常见的就是print方法的变化.这里要讨论的是另一种,python2和python3的字符串表示.<br>写这个概念之前,我们先来明确一下字符编码的概念,不同于我们生活中直接可以用字符交流,计算机显然要将字符编为一段二进制码才能进行底层的存储和处理,而用户在进行大多数操作时并不需要过于关心这个编解码的过程,就如同在现实中一样,我们把这样的操作称为<strong>抽象的</strong>.大多数高级编程语言都有string类型,以满足这样的操作:</p>
<blockquote>
<p>字符串是文本的抽象表示。字符串由字符组成，字符则是与任何特定二进制表示无关的抽象实体。在操作字符串时，我们生活在幸福的无知之中。我们可以对字符串进行分割和分片，可以拼接和搜索字符串。我们并不关心它们内部是怎么表示的，字符串里的每个字符要用几个字节保存。只有在将字符串编码成字节包（例如，为了在信道上发送它们）或从字节包解码字符串（反向操作）时，我们才会开始关注这点。</p>
</blockquote>
<p>上面的话是针对字符串抽象的精妙的描述.</p>
<h3 id="python-2"><a href="#python-2" class="headerlink" title="python 2"></a>python 2</h3><p>令人遗憾的是,python2中并没有采用这种抽象的做法,Python2中的str实际上是一组字节序列…<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">l=<span class="string">'好个和'</span></div><div class="line">print(len(l))<span class="comment">##输出为9而非三</span></div></pre></td></tr></table></figure></p>
<p>正是因为是字节序列,所以python也没有限定其编码方式,如果你的字符编码方式不是unicode,并且输入输出环境选用的又不是你的那种字符编码方式,那么输入输出都会变得混乱无比,因为python事实上只是不做修改的发布了这些字符序列而已.<br>那么摆在程序员面前只有两条路</p>
<ol>
<li>确认你的字符编码和输入输出环境的编码一致.</li>
<li>把你的字符编码decode,到unicode字符串.到此时python会帮你自动转换</li>
</ol>
<p>上面谈到的unicode字符串python2中的另一种字符串类型,事实上这才是py2中的真•字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">l=<span class="string">u'好个和'</span></div><div class="line">print(len(l))<span class="comment">##输出为3而非9</span></div><div class="line"><span class="comment">####</span></div><div class="line">l2=<span class="string">'好个和'</span></div><div class="line">decodedUnicode = l.decode(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure></p>
<p>使用这个字符串我们又可以当一个幸福的无知者了,上面两种方法都可以得到unicode串.</p>
<p>事情还没完,对于广大非计类工科狗来说,字节序列并不是一无是处,由于更加接触底层,平时许多甚至大部分工作反而是对这些字节序列操作,然而字节序列又和str搅在了一起……..<br>于是python又提供了一个bytearray类型的数组,见名知义,这是一个字节元素数组,以便于操作二进制.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">l=<span class="string">'aaa'</span></div><div class="line">b=bytearray(l)</div><div class="line">print(l[<span class="number">0</span>])<span class="comment">##输出a</span></div><div class="line">print(b[<span class="number">0</span>])<span class="comment">##输出97</span></div></pre></td></tr></table></figure></p>
<h3 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h3><p>在脑残了整个2.X版本后,python3终于做出了改进:</p>
<blockquote>
<p>文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。Python 3不会以任意隐式的方式混用str和bytes，正是这使得两者的区分特别清晰。你不能拼接字符串和字节包，也无法在字节包里搜索字符串（反之亦然），也不能将字符串传入参数为字节包的函数（反之亦然）。这是件好事。</p>
</blockquote>
<p>string彻彻底底成为了抽象字符串且指定了编码类型unicode,二进制数据则由bytes类型表示.<br>他们之间的关系是:</p>
<p><img src="/images/relation.png" style="width: 260px;"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####in the shell</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'€20'</span>.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">b'\xe2\x82\xac20'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe2\x82\xac20'</span>.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'€20'</span></div><div class="line"><span class="comment">###还可以将string转换为指定格式编码的bytes</span></div><div class="line"><span class="comment">###或者将指定格式编码的bytes转为string</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'€20'</span>.encode(<span class="string">'iso-8859-15'</span>)</div><div class="line"><span class="string">b'\xa420'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xa420'</span>.decode(<span class="string">'iso-8859-15'</span>)</div><div class="line"><span class="string">'€20'</span></div></pre></td></tr></table></figure>
<p>简言之,在py3中py2的unicode变成了string,py2的bytearray变为了bytes</p>
<h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><pre><code>## print 不换行输出
</code></pre><p>这又是一个python2与python3的不同之处了<br>在python2中希望用一条print函数输出并不换行的方法是在末尾加一个逗号.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> a,</div></pre></td></tr></table></figure></p>
<p>而在python3中,方法为是将print函数中的end参数置为空,默认为\n<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(a,...,end=<span class="string">''</span>)</div></pre></td></tr></table></figure></p>
<h2 id="argv的第一个参数为脚本名"><a href="#argv的第一个参数为脚本名" class="headerlink" title="argv的第一个参数为脚本名"></a>argv的第一个参数为脚本名</h2><p>如题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</div><div class="line">scriptname,a,...=argv</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo 命令总结]]></title>
      <url>https://ly11tea.github.io/2016/09/15/hexo-%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>其实作为一个轻量级的静态blog框架，hexo已经做到我能想到的最简单的实现步骤了。但是为了使用方便还是总结一下命令还有配置当中遇到的一些tricks。<br><a id="more"></a> </p>
<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><h3 id="hexo的初始化"><a href="#hexo的初始化" class="headerlink" title="hexo的初始化"></a>hexo的初始化</h3><blockquote>
<p>1 hexo init</p>
</blockquote>
<p>在<strong>已经建好</strong>的目录下输入以上命令，会产生一个目录。要注意的是这个文件夹下不能已经含有文件或者git。</p>
<h3 id="hexo的生成"><a href="#hexo的生成" class="headerlink" title="hexo的生成"></a>hexo的生成</h3><blockquote>
<p>1 hexo generate<br>2 hexo g</p>
</blockquote>
<p>hexo实际上是通过在本地文件夹中的一系列的参数配置和md文件生成静态网页的(在public目录下).这个命令就完成了这个过程,下面的命令是上面的简写.</p>
<h3 id="hexo-在本地架设服务器"><a href="#hexo-在本地架设服务器" class="headerlink" title="hexo 在本地架设服务器"></a>hexo 在本地架设服务器</h3><blockquote>
<p>1 hexo server<br>2 hexo s</p>
</blockquote>
<p>我们可以利用这个命令在本地架设起博客,通常使用这个命令在发布前预览效果.<br>还可以在调试过程中输入<code>hexo s --debug</code>来得到调试信息还可以在不使用<code>hexo g</code>的前提下应用修改.</p>
<h3 id="hexo-发布到github"><a href="#hexo-发布到github" class="headerlink" title="hexo 发布到github"></a>hexo 发布到github</h3><blockquote>
<p>1 hexo deploy<br>2 hexo d</p>
</blockquote>
<p>在站点配置文件设定好之后,使用这个命令就能将站点发布到github上面.</p>
<h3 id="hexo-新建文件"><a href="#hexo-新建文件" class="headerlink" title="hexo 新建文件"></a>hexo 新建文件</h3><blockquote>
<p>1 hexo new [layout]/模板  “标题”</p>
</blockquote>
<p>这其中初始的layout(已实现为模板)有三种<code>post(默认),draft,page</code>,你还可以在<code>Scaffold</code>文件家中自定义新的文件模板,在上述三个layout之中.</p>
<h3 id="hexo-清除缓存"><a href="#hexo-清除缓存" class="headerlink" title="hexo 清除缓存"></a>hexo 清除缓存</h3><blockquote>
<p>1 hexo clean</p>
</blockquote>
<p>有时遇到一些稀奇古怪的问题时,不妨试一试这个命令,事实上就是清除public和deploy文件夹下的所有内容.再使用<code>hexo g</code>生成一遍.</p>
<h2 id="hexo-部署时的一些tricks"><a href="#hexo-部署时的一些tricks" class="headerlink" title="hexo 部署时的一些tricks"></a>hexo 部署时的一些tricks</h2><h3 id="没有文章时-主页不会生成"><a href="#没有文章时-主页不会生成" class="headerlink" title="没有文章时,主页不会生成"></a>没有文章时,主页不会生成</h3><p>这时访问地址会出现404,现象,其实是配置上并没有错.</p>
<h3 id="deploy的type名字"><a href="#deploy的type名字" class="headerlink" title="deploy的type名字"></a>deploy的type名字</h3><p>新版本中全站配置文件中type要写成git而不是github.</p>
<h3 id="首次deploy要安装deployer"><a href="#首次deploy要安装deployer" class="headerlink" title="首次deploy要安装deployer"></a>首次deploy要安装deployer</h3><p>命令为<code>npm install hexo-deployer-git --save</code></p>
<h3 id="站点配置文件中的url参数需要修改"><a href="#站点配置文件中的url参数需要修改" class="headerlink" title="站点配置文件中的url参数需要修改"></a>站点配置文件中的url参数需要修改</h3><p>在next中的localsearch就要用到这个参数生成目标连接。</p>
<h3 id="yaml文件键值后的冒号一定要留空格"><a href="#yaml文件键值后的冒号一定要留空格" class="headerlink" title="yaml文件键值后的冒号一定要留空格"></a>yaml文件键值后的冒号一定要留空格</h3><p>不留空格事实上值并没有赋给键</p>
<h2 id="一些参考"><a href="#一些参考" class="headerlink" title="一些参考"></a>一些参考</h2><p>网上也有许多hexo的文档和教程：</p>
<ul>
<li>hexo的 <a href="https://hexo.io/" target="_blank" rel="external">官方文档</a>.</li>
<li>next的<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">官方文档</a></li>
<li>hexo<a href="http://www.zipperary.com/2013/05/28/hexo-guide-1/" target="_blank" rel="external">系列教程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[new]]></title>
      <url>https://ly11tea.github.io/2016/09/14/new/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[ss]]></title>
      <url>https://ly11tea.github.io/2016/09/13/ss/</url>
      <content type="html"></content>
    </entry>
    
  
  
</search>
