<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[java 笔记 5]]></title>
      <url>https://ly11tea.github.io/2017/02/13/java-%E7%AC%94%E8%AE%B0-5/</url>
      <content type="html"><![CDATA[<h1 id="流与文件"><a href="#流与文件" class="headerlink" title="流与文件"></a>流与文件</h1><a id="more"></a> 
<h2 id="1-流的定义与其基本抽象方法"><a href="#1-流的定义与其基本抽象方法" class="headerlink" title="1. 流的定义与其基本抽象方法"></a>1. 流的定义与其基本抽象方法</h2><p>1.java中从其中读入一个字节序列的对象称做输入流,向其中写入一个字节序列的对象称做输出流</p>
<p>抽象类 InputStream 和 OutputStream 构成了输入/输出类层次结构的基础</p>
<p>为了便于处理字符数据,抽象类 Reader 和 Writer 中继承出来了一个专门用<br>于处理 Unicode 字符的单独的类层次结构</p>
<p>2.InputStream 类有一个抽象方法:<br><code>abstract int read()</code><br>读入一个字节，并返回读入的字节，或者在遇到输入源结尾时返回一1.<br>具体的输入流类,必须覆盖这个方法提供不同的功能</p>
<p>3.Outputstream类有一个抽象方法:<br><code>abstract  void write (int  b)</code><br>它可以向某个输出位置写出一个字节</p>
<p>4.read 和 write 方法在执行时都将阻塞， 直至字节确实被读入或写出.</p>
<h2 id="2-完整的流家族"><a href="#2-完整的流家族" class="headerlink" title="2.完整的流家族"></a>2.完整的流家族</h2><p>按照使用方法来进行划分，流就形成了处理字节和字符的两个单独的层次结构.</p>
<p>1.inputStream 和 outputStream 类可以读写单个字节或字节数组,他们是处理字节层次的基础.</p>
<p>InputStream:</p>
<ul>
<li>|— FileInputStream：从文件系统中的某个文件中获得输入字节。哪些文件可用取决于主机<br>环境。FileInputStream 用于读取诸如图像数据之类的原始字节流。要读取字符流，请考虑使用<br>FileReader。</li>
<li>|— FilterInputStream：包含其他一些输入流，它将这些流用作其基本数据源，它可以直接传输数据或提供一些额外的功能。<ul>
<li>|— BufferedInputStream：该类实现缓冲的输入流。</li>
<li>|— Stream：</li>
</ul>
</li>
<li>|— ObjectInputStream：</li>
<li>|— PipedInputStream：</li>
</ul>
<p>OutputStream:</p>
<ul>
<li>|— FileOutputStream：文件输出流是用于将数据写入 File 或 FileDescriptor 的输出流。</li>
<li>|— FilterOutputStream：此类是过滤输出流的所有类的超类。<ul>
<li>|— BufferedOutputStream：该类实现缓冲的输出流。</li>
<li>|— PrintStream：</li>
<li>|— DataOutputStream：</li>
</ul>
</li>
<li>|— ObjectOutputStream：</li>
<li>|— PipedOutputStream：</li>
</ul>
<p>2.对于 Unicode 文本，可以使用抽象类 Reader 和 Writer 的子类</p>
<p>Reader：用于读取字符流的抽象类。子类必须实现的方法只有 read(char[], int, int) 和 close()。</p>
<ul>
<li>|—BufferedReader：从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。可以指定缓冲区的大小，或者可使用默认的大小。大多数情况下，默认值就足够大了。</li>
<li>|—LineNumberReader： 跟踪行号的缓冲字符输入流。此类定义了方法 setLineNumber(int) 和getLineNumber()，它们可分别用于设置和获取当前行号。</li>
<li>|—InputStreamReader：是字节流通向字符流的桥梁：它使用指定的 charset 读取字节并将其解码为字符。它使用的字符集可以由名称指定或显式给定，或者可以接受平台默认的字符集。</li>
<li>|—FileReader：用来读取字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是适当的。要自己指定这些值，可以先在 FileInputStream 上构造一个InputStreamReader。</li>
<li>|—CharArrayReader：</li>
<li>|—StringReader：</li>
</ul>
<p>Writer：写入字符流的抽象类。子类必须实现的方法仅有 write(char[], int, int)、flush() 和 close()。</p>
<ul>
<li>|—BufferedWriter：将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。</li>
<li>|—OutputStreamWriter：是字符流通向字节流的桥梁：可使用指定的 charset 将要写入流中的字符编码成字节。它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。</li>
<li>|—FileWriter：用来写入字符文件的便捷类。此类的构造方法假定默认字符编码和默认字节缓冲区大小都是可接受的。要自己指定这些值，可以先在 FileOutputStream 上构造一个OutputStreamWriter。</li>
<li>|—PrintWriter：</li>
<li>|—CharArrayWriter：</li>
<li>|—StringWriter：</li>
</ul>
<p>3.还有四个比较重要的接口:</p>
<p>Closeable  :实现关闭流,四大抽象类都继承了</p>
<ul>
<li>InputStream</li>
<li>OutputStream </li>
<li>Reader </li>
<li>Writer</li>
</ul>
<p>Flushable　　声明void flush()方法,把缓存区全部写入</p>
<ul>
<li>OutputStream</li>
<li>Writer</li>
</ul>
<p>接口 Readable　　声明int read(CharBuffer cb)方法,可以实现任意读写</p>
<ul>
<li>Reader</li>
<li>CharBuffer</li>
</ul>
<p>接口 Appendable　　声明Appendable append(xxx)方法,可以添加单个字符,或字符序列</p>
<ul>
<li>Writer</li>
</ul>
<h2 id="3-多个流的包装嵌套"><a href="#3-多个流的包装嵌套" class="headerlink" title="3.多个流的包装嵌套"></a>3.多个流的包装嵌套</h2><p>java中把流类在用途方面又分为了两类:<br>某些流(例如 FilelnputStream 和由URI类的 openstream 方法返回的输入流)可以从文件和其他位置上获取字节.<br>其他的流(例如 DatalnputStream 和 PrintWriter ) 可以将字节组装到更有用的数据类.<br>简单地来说就是一内一外,一个负责从外面取,一个负责包装这些数据</p>
<p>java可以使用嵌套定义的方法,各取所长.<br>例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DatalnputStream  din  =  <span class="keyword">new</span>  Datalnput5tream(<span class="keyword">new</span>  FilelnputStream(<span class="string">"employee.dat"</span>);); </div><div class="line"><span class="keyword">double</span>  s  = din.readDouble();</div></pre></td></tr></table></figure></p>
<p>FilelnputStream与DatalnputStream配合向文件中读数字<br>将DatalnputStream放在外部,希望使用DatalnputStream 的方法，并且希望它们能够使用带缓冲机制的 read 方法。</p>
<p>如果希望用到多个流的方法,则可以分两行嵌套,把要用到的流放在外层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PushbackInputStream  pbin  = <span class="keyword">new</span>  PushbackInputStream( </div><div class="line">    <span class="keyword">new</span>  BufferedInputStream(</div><div class="line">    <span class="keyword">new</span>  FileInputStream(<span class="string">"employee.dat"</span>))); </div><div class="line">DataInputStream din  =  <span class="keyword">new</span>  DataInputStream(pbin);</div></pre></td></tr></table></figure></p>
<p>这样对同一个流,就既可以使用pbin进行预读,也可以使用din实现读取数字.</p>
<h2 id="4-文本的输入与输出"><a href="#4-文本的输入与输出" class="headerlink" title="4.文本的输入与输出"></a>4.文本的输入与输出</h2><p>存储文本字符串时，需要考虑字符编码<br>OutputstreamWriter 类会把 Unicode 字符流,以一定的字符编码方式转换为字节流.<br>InputStreamReader类将包含字节(用某种字符编码方式表示的字符)的输入流转换为可以产生 Unicode 码元的读入器。<br>其中转换所依照的字符编码可以由用户指定,若未指定则为系统的默认编码方式.<br>1.文本输出<br>文本输出，可以使用 PrintWriter,但单单只使用PrintWriter并未指定输出目标,要其他指示输出目标的类包装嵌套使用.如FileWriter类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PrintWriter pw=<span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">"test.txt"</span>), <span class="keyword">true</span>);   <span class="comment">//第2个参数表示是否自动冲刷缓冲区，默认为false。 </span></div><div class="line">PrintWriter pw1=<span class="keyword">new</span> PrintWriter(<span class="string">"test.txt"</span>);<span class="comment">//上述写法的快捷方式,等价.</span></div></pre></td></tr></table></figure></p>
<p>PrintWriter可以使用print(),println,printf()等常见方法.打印数字(int、 short 、 long 、 float 、 double ) 、字符,boolean 值、字符串和对象到文件或其他位置。</p>
<p>设置为自动冲刷模式，那么只要 <strong>println被调用，缓冲区中的所有字符都会被发送到它们的目的地</strong>.</p>
<p>2.文本输入<br>按照对应关系,这里应该有一个Reader大类的类用于文本输入,但是基于便利性的考虑,一般使用Scanner类.</p>
<h2 id="读写二进制数据"><a href="#读写二进制数据" class="headerlink" title="读写二进制数据"></a>读写二进制数据</h2><p>对于二进制数据流,使用者最大的需求就是将其读入到java中,包装成java的数据类型,或者反之.<br>DataOutput和DataInPut接口就完成了这项工作<br>1.DataOutput 接口用于将数据从任意 Java 基本类型转换为一系列字节<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span>	<span class="title">writeBoolean</span><span class="params">(<span class="keyword">boolean</span> v)</span> </span></div><div class="line">         <span class="comment">//将一个 boolean 值写入输出流。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeByte</span><span class="params">(<span class="keyword">int</span> v)</span> </div><div class="line">         <span class="comment">//将参数 v 的八个低位写入输出流。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeBytes</span><span class="params">(String s)</span> </div><div class="line">         <span class="comment">//将一个字符串写入输出流。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeChar</span><span class="params">(<span class="keyword">int</span> v)</span> </div><div class="line">        <span class="comment">// 将一个 char 值写入输出流，该值由两个字节组成。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeChars</span><span class="params">(String s)</span> </div><div class="line">        <span class="comment">// 将字符串 s中的所有字符按顺序写入输出流，每个字符用两个字节表示。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeDouble</span><span class="params">(<span class="keyword">double</span> v)</span> </div><div class="line">         <span class="comment">//将一个 double 值写入输出流，该值由八个字节组成。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeFloat</span><span class="params">(<span class="keyword">float</span> v)</span> </div><div class="line">         <span class="comment">//将一个 float 值写入输出流，该值由四个字节组成。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeInt</span><span class="params">(<span class="keyword">int</span> v)</span> </div><div class="line">         <span class="comment">//将一个 int 值写入输出流，该值由四个字节组成。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeLong</span><span class="params">(<span class="keyword">long</span> v)</span> </div><div class="line">         <span class="comment">//将一个 long 值写入输出流，该值由八个字节组成。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeShort</span><span class="params">(<span class="keyword">int</span> v)</span> </div><div class="line">         <span class="comment">//将两个字节写入输出流，用它们表示参数值。</span></div><div class="line"><span class="keyword">void</span>	<span class="title">writeUTF</span><span class="params">(String s)</span> </div><div class="line">         <span class="comment">//将表示长度信息的两个字节写入输出流，后跟字符串 s 中每个字符的 UTF-8 修改版表示形式。</span></div></pre></td></tr></table></figure></p>
<p>2.DataInput<br>DataInput接口正好相反,用于从二进制流中读取字节，并根据所有 Java 基本类型数据进行重构。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span>	<span class="title">readBoolean</span><span class="params">()</span>                                                   <span class="comment">//读取一个输入字节，如果该字节不是零，则返回true，如果是零，则返回 false。</span></span></div><div class="line"> <span class="keyword">byte</span>	<span class="title">readByte</span><span class="params">()</span> </div><div class="line">          <span class="comment">//读取并返回一个输入字节。</span></div><div class="line"> <span class="keyword">char</span>	<span class="title">readChar</span><span class="params">()</span> </div><div class="line">          <span class="comment">//读取两个输入字节并返回一个 char 值。</span></div><div class="line"> <span class="keyword">double</span>	<span class="title">readDouble</span><span class="params">()</span> </div><div class="line">          <span class="comment">//读取八个输入字节并返回一个 double 值。</span></div><div class="line"> <span class="keyword">float</span>	<span class="title">readFloat</span><span class="params">()</span> </div><div class="line">          <span class="comment">//读取四个输入字节并返回一个 float 值。</span></div><div class="line"> <span class="keyword">void</span>	<span class="title">readFully</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </div><div class="line">          <span class="comment">//从输入流中读取一些字节，并将它们存储在缓冲区数组 b 中。</span></div><div class="line"> <span class="keyword">void</span>	<span class="title">readFully</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> </div><div class="line">          <span class="comment">//从输入流中读取 len 个字节。</span></div><div class="line"> <span class="keyword">int</span>	<span class="title">readInt</span><span class="params">()</span> </div><div class="line">         <span class="comment">// 读取四个输入字节并返回一个 int 值。</span></div><div class="line"> String	<span class="title">readLine</span><span class="params">()</span> </div><div class="line">          <span class="comment">//从输入流中读取下一文本行。</span></div><div class="line"> <span class="keyword">long</span>	<span class="title">readLong</span><span class="params">()</span> </div><div class="line">          <span class="comment">//读取八个输入字节并返回一个 long 值。</span></div><div class="line"> <span class="keyword">short</span>	<span class="title">readShort</span><span class="params">()</span> </div><div class="line">          <span class="comment">//读取两个输入字节并返回一个 short 值。</span></div><div class="line"> <span class="keyword">int</span>	<span class="title">readUnsignedByte</span><span class="params">()</span> </div><div class="line">          <span class="comment">//读取一个输入字节，将它左侧补零 (zero-extend) 转变为 int 类型，并返回结果，所以结果的范围是 0 到 255。</span></div><div class="line"> <span class="keyword">int</span>	<span class="title">readUnsignedShort</span><span class="params">()</span> </div><div class="line">          <span class="comment">//读取两个输入字节，并返回 0 到 65535 范围内的一个 int 值。</span></div><div class="line"> String	<span class="title">readUTF</span><span class="params">()</span> </div><div class="line">          <span class="comment">//读入一个已使用 UTF-8 修改版格式编码的字符串。</span></div><div class="line"> <span class="keyword">int</span>	<span class="title">skipBytes</span><span class="params">(<span class="keyword">int</span> n)</span> </div><div class="line">          <span class="comment">//试图在输入流中跳过数据的 n 个字节，并丢弃跳过的字节。</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java 笔记 4]]></title>
      <url>https://ly11tea.github.io/2017/02/13/java-%E7%AC%94%E8%AE%B0-4/</url>
      <content type="html"><![CDATA[<h1 id="12-泛型程序设计"><a href="#12-泛型程序设计" class="headerlink" title="12 泛型程序设计"></a>12 泛型程序设计</h1><a id="more"></a> 
<p>泛型程序设计 ( Generic programming )意味着编写的代码可以被很多不同类型的对象所重用。</p>
<p>泛型提供了 类型参数( type parameters ),泛型类有一个或多个参数来指示元素类型.<br><code>ArrayList&lt;String&gt; a= new Arraylist&lt;String&gt;();</code><br>这种参数既增加了代码的可读性,也使得编译器能够对类型进行检查,减少错误.</p>
<h2 id="12-1-定义一个泛型类"><a href="#12-1-定义一个泛型类" class="headerlink" title="12.1 定义一个泛型类"></a>12.1 定义一个泛型类</h2><p>泛型类( generic class) 就是具有一个或多个类型变量的类。<br>1.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">a</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">    <span class="keyword">private</span> T object1;</div><div class="line">    <span class="keyword">private</span> T object2;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">func1</span><span class="params">(T param1)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> param1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述类就将了一个类型变量 T ，用尖括号(&lt;&gt;)括起来,并放在类名的后面。在类中我们就可以把类型变量当做类型名一样使用.</p>
<ol>
<li>类型变量一般使用大写形式，且比较短.在 Java 库中，使用变量 E 表示集合的元素类型， K 和 V 分别表示表的关键字与值的类型。 T (需要时还可以用临近的字母 U 和 S) 表示”任意类型” 。</li>
</ol>
<h2 id="12-2-定义一个泛型方法"><a href="#12-2-定义一个泛型方法" class="headerlink" title="12.2 定义一个泛型方法"></a>12.2 定义一个泛型方法</h2><p>可以在普通类或是泛型类中定义泛型方法</p>
<ol>
<li>类型变量放在修饰符(例如 public static) 的后面，返回类型的前面。</li>
</ol>
<p>当调用一个泛型方法时， 在方法名前的尖括号中放入具体的类型:</p>
<p>示例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>;</div><div class="line">Arrays.&lt;String&gt;swap(friends,<span class="number">0</span>,<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<p>许多时候能从调用的信息看出泛型变量的类型,调用时一般无需使用尖括号.例如上面能从函数参数friends是String数组.看出类型变量一定是String.</p>
<h2 id="12-3-类型变量限定"><a href="#12-3-类型变量限定" class="headerlink" title="12.3 类型变量限定"></a>12.3 类型变量限定</h2><p>理论上定义了类型变量,则任意的类型都可以使用泛型.但往往对泛型有一定的要求,将其限定在某个范围内.</p>
<ol>
<li>可以用 extends 定义上限,即对类型变量最少也要求继承自一定的类,实现自一定的接口.以便于代码使用一些特定的方法.<br>或者说T 应该是extends后元素的子类型<br><code>public  static  &lt;T  extends  Comparable&gt; T min(T a)</code><br>若使用上面的代码,类型变量没有实现comparable接口,则不会编译通过.</li>
</ol>
<h2 id="12-4-使用通配符类型"><a href="#12-4-使用通配符类型" class="headerlink" title="12.4 使用通配符类型"></a>12.4 使用通配符类型</h2><p>使用泛型类定义引用变量时,类型变量也可以有灵活性,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Pair&lt;? extends Employee&gt; pair1;</div></pre></td></tr></table></figure></p>
<p>以上定义的pair1,不止可以用来引用<code>pair&lt;Employee&gt;</code>的对象,还可以引用<code>pair&lt;Manager&gt;</code>的对象,以及Employee的任意子类.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Pair&lt;Manager&gt;  managerBuddies  =  <span class="keyword">new</span>  Pair&lt;&gt;(ceo ,  cfo); </div><div class="line">Pair&lt;?  extends  Employee&gt;  wildcardBuddies  =  manage rBuddies ;  <span class="comment">//可用</span></div><div class="line">wildαrdBuddies.setFirst(lowlyEmployee);  <span class="comment">// 使用某个更改器方法时会出现编译错误</span></div></pre></td></tr></table></figure>
<p>因为此时编译器并不知道更改器方法参数的具体类型,只知道是Employee的子类,所以无法设置.<br>使用访问器完全可行,因为可以直接使用Employee类的引用.</p>
<h1 id="13-集合"><a href="#13-集合" class="headerlink" title="13 集合"></a>13 集合</h1><p>java的集合与数学意义上的集合类似,指的是一类对象组织到一起,不同的组合形式就是不同的数据结构,不同操作方法产生了不同的算法.</p>
<h2 id="13-1-接口与实现分离"><a href="#13-1-接口与实现分离" class="headerlink" title="13.1 接口与实现分离"></a>13.1 接口与实现分离</h2><ol>
<li>Java集合类将接口（interface）与实现（impementation）分离开来,接口中只描述这种集合的性质,没有实现部分.把这一部分交给实现类去完成.<br>对于使用者来说,集合的实现无关紧要,所以可以使用接口定义引用变量,去引用实现类定义的实例<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Queue&lt; Customer&gt;  expressLane  =  <span class="keyword">new</span> CircularArrayQueue&lt;&gt;(<span class="number">100</span>);</div><div class="line">Queue&lt;Customer&gt;  expressLane  =  <span class="keyword">new</span> LinkedListQueue&lt;&gt;();</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Queue究竟是用链表实现还是用循环数组实现对使用者来说无关紧要,都可以进行队列操作</p>
<h2 id="13-2-迭代器"><a href="#13-2-迭代器" class="headerlink" title="13.2 迭代器"></a>13.2 迭代器</h2><p>java中将实现了iterator接口的类叫做迭代器<br>iterator接口的定义为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> &lt;<span class="title">E</span>&gt;</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</div><div class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>next 方法返回泛型定义的元素</strong>，调用它可以逐个访问集合中的每个元素.<br>hasNext可以检测是否还有可供迭代的元素<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Collection&lt;String&gt; c = ...;</div><div class="line">Iterator&lt;String&gt; iter = c.iterator();<span class="comment">//定义一个对应类型的迭代器</span></div><div class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">  String element = iter.next();<span class="comment">//获得这一次迭代对应的元素</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果一个类实现了<strong>Iterable接口</strong>,那么还可以写成<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (String element : c) &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Itrable 接口的定义为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">interface</span>  <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt;</span>&#123;</div><div class="line">Iterator&lt; E &gt; iterator(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>即返回对应元素迭代器变量的方法.</p>
<p>remove 方法,删除上次调用 next 方法时返回的元素,删除指定位置上的元素,需要越过这个元素,ext 方法和 remove 方法的调用具有互相依赖性。 <strong>如果调用 remove 之前<br>没有调用 next 将是不合法的</strong></p>
<h2 id="13-3-Collection接口"><a href="#13-3-Collection接口" class="headerlink" title="13.3 Collection接口"></a>13.3 Collection接口</h2><p>1.在java中,集合类公有接口时Collection接口,一个集合代表了一组对象，这组对象被称为集合的元素。<br>一些集合允许重复的元素而其他不允许；一些是有序的而一些是无序的。<br>Java类库中并未提供任何对这个接口的直接实现，而是提供了对于它的更具体的子接口的实现（比如Set接口和List接口）。</p>
<p>2.接口内定义的方法有:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> <span class="comment">//向集合中添加一个元素，若添加元素后集合发生了变化就返回true，若没有发生变化，就返回false。(optional operation).</span></span></div><div class="line"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> <span class="comment">//添加给定集合c中的所有元素到该集合中(optional operation).</span></div><div class="line"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> <span class="comment">//(optional operation).</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> <span class="comment">//判断该集合中是否包含指定对象</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></div><div class="line"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></div><div class="line">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> <span class="comment">//移除给定对象的一个实例（有的具体集合类型允许重复元素） (optional operation).</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> <span class="comment">//(optional operation).</span></div><div class="line"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> <span class="comment">//仅保留给定集合c中的元素(optional operation).</span></div><div class="line"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></div><div class="line">Object[] <span class="title">toArray</span><span class="params">()</span></div><div class="line">&lt;T&gt; T[] <span class="title">toArray</span><span class="params">(T[] a)</span></div></pre></td></tr></table></figure></p>
<p>可以看到Collection接口也实现了Iterator<e> iterator()方法,事实上Collection接口实现了Comparable接口,所以每一种实现Collection接口的数据结构都可以使用for..each的方法迭代</e></p>
<p>3.Collection 与 Iterator都是泛型接口，可以编写操作任何集合类型的实用方法.这些方法与元素具体类型无关,所以java将这些方法定义到一个抽象类AbstractCollection中，以减少类实现Collection接口要定义的方法数量.</p>
<h2 id="13-4-一些集合实例"><a href="#13-4-一些集合实例" class="headerlink" title="13.4 一些集合实例"></a>13.4 一些集合实例</h2><h3 id="13-4-1-链表"><a href="#13-4-1-链表" class="headerlink" title="13.4.1 链表"></a>13.4.1 链表</h3><p>1.在java中,所有链表实际上都是双向链接的 ( doubly linked)<br>2.链表是一个有序集合( ordered collection) ，LinkedList. add 方法将对象添加到链表的尾部,插入任意位置的add方法由迭代器提供.<br>3.因为是双向的,所以链表迭代器还有向前遍历的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</div><div class="line"><span class="function">E <span class="title">previous</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<p>4.还可以使用迭代器set方法修改当前元素</p>
<h3 id="13-4-2-数组列表"><a href="#13-4-2-数组列表" class="headerlink" title="13.4.2 数组列表"></a>13.4.2 数组列表</h3><p>和链表一样同属于List接口,不同于链表,可以使用set()和get()方法实现任意位置的读取</p>
<h3 id="13-4-3-散列集"><a href="#13-4-3-散列集" class="headerlink" title="13.4.3 散列集"></a>13.4.3 散列集</h3><p>散列集实现了Set接口,很显然由其性质可得,其中不可能有相同的元素,故实现Set接口<br>它能够快速的监测某个元素是否在集合中及其位置</p>
<h3 id="13-4-4-树集"><a href="#13-4-4-树集" class="headerlink" title="13.4.4 树集"></a>13.4.4 树集</h3><p>树集也能够快速的监测某个元素是否在集合中及其位置,相较于散列表它是一个有序的集合<br>要使用,元素必须实现Comparable接口</p>
<h3 id="13-4-5-优先级队列"><a href="#13-4-5-优先级队列" class="headerlink" title="13.4.5 优先级队列"></a>13.4.5 优先级队列</h3><p>根据性质可以保证每次出队列的元素都是优先级最高的</p>
<h3 id="13-4-6-映射表"><a href="#13-4-6-映射表" class="headerlink" title="13.4.6 映射表"></a>13.4.6 映射表</h3><p>Map接口用于存储键值对,已知键的信息可以提取到值,表有两种实现:hashmap,treemap.其区别与散列集与树集区别类似</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java 笔记 3]]></title>
      <url>https://ly11tea.github.io/2017/02/13/java-%E7%AC%94%E8%AE%B0-3/</url>
      <content type="html"><![CDATA[<h1 id="6-接口"><a href="#6-接口" class="headerlink" title="6.接口"></a>6.接口</h1><a id="more"></a> 
<p>接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。一个类可以实现一个或多个接口，并在需要接口的地方，随时使用实现了相应接口的对象。</p>
<h2 id="6-1-接口特性"><a href="#6-1-接口特性" class="headerlink" title="6.1 接口特性"></a>6.1 接口特性</h2><ol>
<li><p>在接口声明中，方法自动public，可以不写修饰符。在实现接口时必须把方法声明为public,声明在接口中的内部类自动成为static和public类。一个接口中可以包含多个方法，还可以定义常量，自动设置public static final</p>
</li>
<li><p>接口中不能含有实例域，也不能在接口中实现方法。提供实例域和方法实现的任务应该由实现接口的那个类来完成。</p>
</li>
<li><p>可以将接口看成是没有实例域的抽象类。</p>
</li>
<li><p>接口在很多时候起到标示某一类特定方法存在与否的标志</p>
</li>
</ol>
<h2 id="6-2-接口声明与使用"><a href="#6-2-接口声明与使用" class="headerlink" title="6.2 接口声明与使用"></a>6.2 接口声明与使用</h2><ol>
<li>为了让类实现一个接口，通常需要下面两个步骤:<br>1 ) 将类声明为实现给定的接口 。<br>2 )对接口中的所有方法进行定义。(若此类为抽象类则不强制要求实现所有方法)</li>
</ol>
<p>要将类声明为实现某个接口，需要使用关键字 implements :<br>class  Employee  implements Comparable<br>java 5.0 以后还可以声明泛型接口<br>class  Employee  implements Comparable &lt;..&gt;</p>
<p>2.接口不是类，不能使用new运算符实例化一个接口但是可以声明接口变量，同时接口变量必须引用实现了接口的类对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x = <span class="keyword">new</span> Comparable(...);<span class="comment">//Error</span></div><div class="line">Comparable x ;<span class="comment">// ok</span></div><div class="line">x = <span class="keyword">new</span> Employee(...);</div></pre></td></tr></table></figure></p>
<p>3.可以使用 isinstanceof 方法来判断某个类是否实现了接口<br>if( anObject instanceof Comparable){…}</p>
<p>4.接口与接口之间也可以进行继承.</p>
<p>5.只能继承一个类但是可以实现多个接口.</p>
<p>使用接口既有多继承的好处又避免多继承带来的额外开销.</p>
<h2 id="6-3-实现cloneable接口"><a href="#6-3-实现cloneable接口" class="headerlink" title="6.3 实现cloneable接口"></a>6.3 实现cloneable接口</h2><p>拷贝一个变量时，原始变量与拷贝变量引用同一个对象，改变一个变量所引用的对象会对另一个变量产生影响。</p>
<ol>
<li><p>clone方法是Object 类的一个protected方法,只有以对象为主体才可以调用它,这样做是为了让只有一个类对象本身才能克隆自己,Object类对具体的类对象一无所知，只能将各个域进行对应的拷贝。对于<strong>基本类型或数值拷贝没有问题</strong>，但如果<strong>对象包含了子对象的引用</strong>，拷贝的结果还是<strong>两个域引用同一个子对象。</strong><br>这种不拷贝包含在对象中的内部对象的模式叫浅拷贝.</p>
</li>
<li><p>要实现克隆子对象的深拷贝,就必须重新实现cloneable接口<br>必须重新定义clone方法，以便实现克隆子对象的深拷贝。对每个类都要做出下列判断：</p>
<ul>
<li><p>默认的clone方法能否满足要求</p>
</li>
<li><p>默认的clone方法是否能够通过调用可变子对象的clone得到修补。</p>
</li>
</ul>
</li>
</ol>
<p>如果默认的clone方法能否满足要求,也应该实现Cloneable接口，将clone定义为public，然后调用super.clone() 即可.</p>
<p>如果要实现深拷贝,就要在super.clone()以后,加上对应子对象的拷贝代码,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span></div><div class="line">&#123;</div><div class="line">   ...</div><div class="line">   <span class="function"><span class="keyword">public</span> Employee <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></div><div class="line">   &#123;</div><div class="line">       Employee cloned=(Employee)<span class="keyword">super</span>.clone();<span class="comment">//Object.clone()</span></div><div class="line">       cloned.hireDay=(Date)hireDay.clone();<span class="comment">//克隆子对象</span></div><div class="line">       <span class="keyword">return</span> cloned;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="7-内部类"><a href="#7-内部类" class="headerlink" title="7 内部类"></a>7 内部类</h1><p>内部类 ( inner class ) 是定义在另一个类中的类,<br>为什么需要使用内部类：</p>
<p>1：内部类方法可以访问该类定义所在的作用域中的数据，包括私有数据</p>
<p>2：内部类可以对同一个包中的其他类隐藏起来</p>
<p>3：当想要定义一个回调函数而不想写大量代码时，使用匿名内部类比较便捷</p>
<h2 id="7-1-使用内部类访问外围类的实例域"><a href="#7-1-使用内部类访问外围类的实例域" class="headerlink" title="7.1 使用内部类访问外围类的实例域"></a>7.1 使用内部类访问外围类的实例域</h2><ol>
<li>内部类既可以访问自身的数据域，也可以访问创建它的外围类对象的数据域。</li>
<li>内部类的对象总有一个隐式引用<strong>，指向了创建它的外部类对象</strong>。将外围类的对象的引用称为outer。</li>
<li>外围类的引用在构造器中设置，编译器修改了所有内部类的构造器，添加了一个外围类的引用参数。</li>
</ol>
<h2 id="7-2-内部类的语法规则"><a href="#7-2-内部类的语法规则" class="headerlink" title="7.2 内部类的语法规则"></a>7.2 内部类的语法规则</h2><ol>
<li>更为规范的在内部类中使用外围类的方法是,使用外围类引用：OuterClass(外部类名).this</li>
<li>在外部类中调用内部类的构造器,outerObject.new InnerClass(contruction parameters)</li>
<li>在外部类外部,得到外部类中内部类的引用<br>OuterClass.lnnerClass </li>
</ol>
<h2 id="7-3-局部内部类"><a href="#7-3-局部内部类" class="headerlink" title="7.3 局部内部类"></a>7.3 局部内部类</h2><ol>
<li>可以在一个方法中定义局部类，并且不能用public或private访问说明符进行声明，它的作用域被限定在声明这个局部类的块中。局部类可以对外部世界完全隐藏起来，即使<strong>方法所在类中的其他代码也不能访问</strong>。</li>
<li>局部类的另一个优势：不仅可以访问包含它们的外部类，还可以访问局部变量，<strong>但那些局部变量必须被声明为final</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> interval,<span class="keyword">final</span> <span class="keyword">boolean</span> beep)</span><span class="comment">//beep被声明为final</span></span></div><div class="line">&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TimePrinter</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span></span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(beep)<span class="comment">//局部类访问局部变量</span></div><div class="line">           Toolkit.getDefaultToolkit().beep();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ActionListener listener = <span class="keyword">new</span> TimePrinter();</div><div class="line">    Time t = <span class="keyword">new</span> Timer(interval,listener);</div><div class="line">    t.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="7-4-匿名内部类"><a href="#7-4-匿名内部类" class="headerlink" title="7.4 匿名内部类"></a>7.4 匿名内部类</h2><p>如果只使用定义的类创建一次对象,可以使用”一次性”的匿名内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">start</span><span class="params">(<span class="keyword">int</span> interval ,  <span class="keyword">final</span>  <span class="keyword">boolean</span>  beep)</span> </span></div><div class="line">&#123;</div><div class="line">    ActionListener  listener = <span class="keyword">new</span>  ActionListener() &#123;</div><div class="line">      <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">actionPerformed</span><span class="params">(ActionEvent  event)</span> </span>&#123;</div><div class="line">        Date  now  =  <span class="keyword">new</span>  Date(); </div><div class="line">        System.out.println(<span class="string">"At  the  tone ,  the  time  is "</span>+ now); </div><div class="line">         <span class="keyword">if</span>  (beep) Toolkit.getDefaultToolkit.beep(); </div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    Timer t  = <span class="keyword">new</span>  Timer(interval ,  listener); </div><div class="line">    t.start(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通常的语法是:<br>new  SuperType (construction parameters){<br>inner class methods and data<br>} </p>
<ol>
<li>匿名类不能有构造器。取而代之的是，SuperType可以是接口，内部类就要实现这个接口；也可以是一个类，内部类就要扩展它。<br>因此SuperType是超类时,将构造器参数传递给超类( superclass ) 构造器。<br>SuperType是接口时,不能有任何构造参数.</li>
</ol>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><ol>
<li><p>有时候使用内部类仅<strong>为了把一个类隐藏在另一个类的内部</strong>，并不<strong>需要内部类引用外围类对象</strong>。为此可以将内部类声明为static，以便取消产生的引用。</p>
</li>
<li><p>只有内部类可以声明为static。静态内部类的对象除了没有对生成它的外围类对象的引用特权外，与其他所有内部类完全一样。如果在静态方法中构造内部类，则必须是静态内部类。</p>
</li>
</ol>
<p>声明在接口中的内部类自动称为static和public类。</p>
<h1 id="7-异常"><a href="#7-异常" class="headerlink" title="7 异常"></a>7 异常</h1><p>Java 使用一种称为异常处理( exception handing 的错误捕获机制.<br>理论上,当程序出现错误之后:</p>
<ul>
<li>返回到一种安全状态，并能够让用户执行一些其他的命令;  </li>
<li>允许用户保存所有操作的结果. 并以适当的方式终止程序。</li>
</ul>
<h2 id="7-1-异常的分类"><a href="#7-1-异常的分类" class="headerlink" title="7.1 异常的分类"></a>7.1 异常的分类</h2><ol>
<li>一个异常对象总是Throwable子类的实例。Throwable的子类演变成两个分支：Error和Exception。</li>
<li>Error类体系描述了Java运行系统中的内部错误以及资源耗尽的情况，应用程序不应该抛出这种类型的对象,应该通告给用户，并尽力使程序安全地终止。</li>
<li>Exception自身也演变成两个分支<br>一个是RuntimeException的子类，以及不从它衍生的其他异常。由编程导致的错误会导致RuntimeException异常.<br>而其他错误原因导致的异常，例如因为IO错误导致曾经运行正确的程序出错，都不会导致RuntimeException异常,而是成为其他类型的exception。<br>一般来说RuntimeException 异常,都是编码者造成的.</li>
</ol>
<h2 id="7-2-已检查异常和未检查异常"><a href="#7-2-已检查异常和未检查异常" class="headerlink" title="7.2 已检查异常和未检查异常"></a>7.2 已检查异常和未检查异常</h2><ol>
<li><p>规定 派生于 Error 类或 RuntimeException 类的所有异常称为 未检查<br>( unchecked) 异常，<br>所有其他的异常称为己检查( checked ) 异常。</p>
</li>
<li><p>方法应该在其首部声明所有可能抛出的<strong>已检查异常</strong>。这样可以从首部反映出这个方法可能抛出哪类<strong>已检查异常</strong></p>
</li>
</ol>
<p>程序运行过程中,有如下情况可能<strong>出现异常:</strong><br>      1）调用了一个会抛出“已检查异常”的方法；<br>      2）程序运行过程中发生了错误，并且用throw语句抛出一个“已检查异常”；<br>      3）程序错误，如数组下标越界；<br>      4）Java虚拟机或者运行时库出现了内部错误；</p>
<p>如果出现前两种情况之一,则必须<strong>在方法处声明异常</strong>,抛出多个己检查异常，那么就必须在方法的首部列出所有的异常类,每个异常类之间用逗号隔开。<br>例如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">abc</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">def</span><span class="params">()</span> <span class="keyword">throws</span> IOException,EOFException</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不需要声明 Java 的内部错误，即从 Error 继承的错误,这些由java自行处理.<br>也不需要声明untimeException 继承的那些未检查异常,这些异常<strong>都是代码错误造成</strong>,应该去修正代码.</p>
<p><strong>总而言之,方法应该声明所有可能抛出的己检查异常，而未检查异常要么不可控制(Error )，要么就应该避免发生 ( RuntimeException ) 。</strong></p>
<h2 id="7-3-抛出异常"><a href="#7-3-抛出异常" class="headerlink" title="7.3 抛出异常"></a>7.3 抛出异常</h2><p>抛出异常并不困难,<br>1 )找到一个合适的异常类。<br>2) 创建这个类的一个对象。<br>3 )将对象抛出 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">abc</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">def</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        ....</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="7-4-自定义异常类"><a href="#7-4-自定义异常类" class="headerlink" title="7.4 自定义异常类"></a>7.4 自定义异常类</h2><p>有时需要自定义异常类,只要继承Exception本身或子类即可:<br>定义的类应该包含两个构造器， 一个是默认的构造器;另一个是带有详细描述信息的构造器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> MyIOException extends IOException&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIOException</span><span class="params">()</span></span></div><div class="line">    &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyIOException</span><span class="params">(String msg)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="7-5-捕获异常"><a href="#7-5-捕获异常" class="headerlink" title="7.5 捕获异常"></a>7.5 捕获异常</h2><ol>
<li>有的时候,我们需要在异常发生之后进行一些必要的操作再抛出,或者直接在当前环境中处理,不抛出.此时就需要捕获异常.<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">...<span class="comment">//被捕获异常的代码块</span></div><div class="line">&#125;<span class="keyword">catch</span>(MyIOException)&#123;</div><div class="line">...<span class="comment">//处理异常的代码块</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果在 try 语句块中的任何代码抛出了一个在 catch,子句中说明的异常类，那么<br>1 )程序将跳过 try 语句块的其余代码。<br>2 )程序将执行 catch 子句中的处理器代码。<br>如果在 语句块中的代码没有抛出任何异常，那么程序将跳过 catch 子句。<br>如果代码抛出了一个在 catch子句中没有声明的异常类型，也不会执行catch中的语句</p>
<p>2.可以捕获多个异常,分别处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">catch</span> (UnkonwHostException e) &#123;</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于几个相同处理方法的exception还可以合并catch语句:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException | UnkonwHostException e) &#123;</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于catch到的异常完全可以捕获之后再抛出.</p>
<p>3.由于发生异常之后当前方法会立刻停止运行,所以可能要在发生异常之后做一些普适性的工作.可以使用finally子句<br>如下面的代码,关闭了InputStream<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">InputStream in = ...;</div><div class="line">Exception ex = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    ...</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    ex = e;</div><div class="line">    <span class="keyword">throw</span> e;</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        in.close();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">if</span> (ex == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>try <strong>语句块中是否遇到异常</strong>， finally 子句中的 in.close() 语<strong>句都会被执行。</strong></p>
<ol>
<li>虽然上面的方法能够完成任务,但是可以看出实现很繁琐.Java SE 7 之后,如果资源属于一个实现了 AutoCloseable 接口的类，那么可以try with resource 的方法完成上面的代码.<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>(resource res =)&#123;</div><div class="line">&#125;<span class="keyword">catch</span>(...)&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在try子块的代码运行完成后,代码会自动调用res.close()方法.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java 笔记 2]]></title>
      <url>https://ly11tea.github.io/2017/02/13/java-%E7%AC%94%E8%AE%B0-2/</url>
      <content type="html"><![CDATA[<h1 id="5-1-类、超类和子类-java的继承层次"><a href="#5-1-类、超类和子类-java的继承层次" class="headerlink" title="5.1  类、超类和子类,java的继承层次"></a>5.1  类、超类和子类,java的继承层次</h1><a id="more"></a> 
<ol>
<li><p>关键字 extends 表明正在构造的新类派生 于一个已存在的类。 已存在的类称为超类( superclass ) 、 基类 ( base class ) 或父类( parent  class) ;<br>新类称为子类 ( subclass) 、派生类( derived class) 或孩子类 ( child class ) ;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></div><div class="line">&#123;</div><div class="line">    添加方法和域</div><div class="line">    覆盖：重写一些基类中不适合派生类的方法</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>子类继承了超类的所有方法和域,能否在子类中访问要看这些方法和域在超类中的访问权限.子类不能访问超类中的私有域和方法(尽管存在),要通过超类中提供的公有方法访问(如果有的话)<br>还可以在子类中用新的方法来覆盖( override) 超类中的这个方法:</p>
</li>
<li><p>super在子类构造器中的首行可以代指超类中的对应构造器,往往用来初始化超类中的私有成员:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span> <span class="params">(String  n,  <span class="keyword">double</span>  s, <span class="keyword">int</span>  year , <span class="keyword">int</span> month,  <span class="keyword">int</span>  day)</span> </span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">super</span>(n , s,  year , month ,day); <span class="comment">//</span></div><div class="line">    bonus  =  <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>super是调用超类 Employee 中含有 n,s, year , month 和 day 参数的构造器的简写形式</p>
<p>如果子类中没有显示的调用超类的构造函数,那么,会隐式地调用一个super()即无参的超类构造器,若没有这种构造器,则会报错.</p>
<h2 id="5-1-1-继承层次"><a href="#5-1-1-继承层次" class="headerlink" title="5.1.1 继承层次"></a>5.1.1 继承层次</h2><p>继承并不限于一个层次。但不支持一个子类继承多个超类。</p>
<p>由一个公共超类派生出来的所有类的集合被称为继承层次。</p>
<p>从某个特定的类到其祖先的路径被称为该类的继承链。</p>
<h2 id="5-1-2-多态"><a href="#5-1-2-多态" class="headerlink" title="5.1.2 多态"></a>5.1.2 多态</h2><p>java继承结构的一种描述是 is a 法则,即<strong>子类对象也是超类的对象</strong><br>由此可以发现两者是可以置换的.<br>由此,对象变量是多态 的 。一个 Employee 的对象变量既可以引用一个<br>Employee 类对象，也可以引用一个 Employee 类的任何一个子类的对象.</p>
<h2 id="5-1-3-继承条件下对象方法的执行过程"><a href="#5-1-3-继承条件下对象方法的执行过程" class="headerlink" title="5.1.3 继承条件下对象方法的执行过程"></a>5.1.3 继承条件下对象方法的执行过程</h2><ol>
<li>编译器首先获得<strong>所有可能被调用的候选方法</strong>。通过查看对象获取其声明类型C和方法名f，可能会有多个相同名字但参数不同的f方法，编译器会一一列举C类型中的f方法以及C的超类中访问属性为public的f方法。</li>
<li>编译器查看调用方法时提供的参数列表。如果在所有名为f的方法中存在一个<strong>完全匹配的就选择这个方法</strong>，这个过程称为<strong>重载解析</strong>。</li>
<li>如果调用的方法是private static final 方法或者构造器，编译器可以准确知道应该调用哪个方法，这种调用方式称为<strong>静态绑定</strong>。<br>当调用的方法依赖于隐式参数(调用方法的对象)的实际类型，并且在运行时绑定的称为<strong>动态绑定</strong>。</li>
<li>当程序运行，并且采用动态绑定调用方法时，虚拟机一定调用与 x 所引用对象的实际类型最合适的那个类的方法。 假设 x 的D类的实例, 它是 C 类的子类。 如果 D 类定义了<br>方法 f(String) ， 就直接调用它; 否则.将在 D 类的超类中寻找 f(String) ，以此类推。</li>
</ol>
<h2 id="5-1-4-阻止继承-final-类与final方法"><a href="#5-1-4-阻止继承-final-类与final方法" class="headerlink" title="5.1.4 阻止继承, final 类与final方法"></a>5.1.4 阻止继承, final 类与final方法</h2><ol>
<li>想要阻止为某个类定义子类,可以在类名面前加上final关键字</li>
<li>类中的特定方法也可以使用final修饰,这样的这个方法也不能被他的子类重载.</li>
</ol>
<h2 id="5-1-5-继承关系下的强制类型转换"><a href="#5-1-5-继承关系下的强制类型转换" class="headerlink" title="5.1.5 继承关系下的强制类型转换"></a>5.1.5 继承关系下的强制类型转换</h2><ol>
<li><p>进行类型转换的唯一原因是：在暂时忽略对象的实际类型之后，使用对象的全部功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Manager boss = (Manager)employee;</div></pre></td></tr></table></figure>
</li>
<li><p>将<strong>超类的引用</strong>赋给子类变量时<strong>必须进行类型转换</strong>。上面的例子中employee是超类,boss是子类.</p>
</li>
<li>只能在继承层次内进行类型转换。在将超类转换成子类之前，应该使用 isinstanceof 进行检查。</li>
</ol>
<h2 id="5-1-6-抽象类"><a href="#5-1-6-抽象类" class="headerlink" title="5.1.6 抽象类"></a>5.1.6 抽象类</h2><ol>
<li><p>某个方法在派生类中有各不相同的覆盖实现，如果祖先类不作为特定类使用时，可以将这个方法声明为抽象方法，从而忽略在祖先类中的具体实现。</p>
</li>
<li><p>抽象方法充当着占位的角色，它们的具体实现在子类中。</p>
</li>
<li><p>扩展抽象类可以由两种选择，一是在子类中定义部分抽象方法或抽象方法也不定义，这样子类必须被标记为抽象类；二是定义全部的抽象方法，这样子类就不是抽象的了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></div><div class="line">&#123;</div><div class="line">   ....</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>当一个类中包含一个或多个抽象方法时类本身必须被声明为抽象的。类即使不含抽象方法也可以将类声明为抽象类。</p>
</li>
<li><p>抽象类不能被实例化，不能创建抽象类本身的对象，但可以引用非抽象的子类。</p>
</li>
<li><p>除了抽象方法以外，抽象类还可以包含具体数据和具体方法。建议尽量将通用的域和方法(不管是不是抽象的)放在超类(不管是否抽象类)中。</p>
</li>
</ol>
<h2 id="5-1-7-protected-方法"><a href="#5-1-7-protected-方法" class="headerlink" title="5.1.7 protected 方法"></a>5.1.7 protected 方法</h2><p>1.超类中的某些方法允许被子类访问，或允许子类的方法访问超类的某个域，则可以将这些方法或域声明为protected。子类只能访问对应的子类对象中的受保护域，而不能访问其他超类对象中的这个域。<br>例如:<br>将超类 Employee中的 hireDay 声明为 proteced ，而不是私有的， <strong>manager 类中的方法就能够访问 Manager 对象</strong>中的 hireDay 域,但而不<strong>能访问其他Employee 对象中</strong>的这个域</p>
<h2 id="5-1-8-访问修饰符"><a href="#5-1-8-访问修饰符" class="headerlink" title="5.1.8  访问修饰符"></a>5.1.8  访问修饰符</h2><p>private       仅对本类可见</p>
<p>public        所有类可见</p>
<p>protected     本包和所有子类可见</p>
<p>无修饰         对本包可见，默认</p>
<h1 id="5-2-Object"><a href="#5-2-Object" class="headerlink" title="5.2 Object"></a>5.2 Object</h1><p>Object类是Java所有类的始祖，每个类都由它扩展而来。如果没有明确指出超类，Object就被认为是这个类的超类。</p>
<p><strong>只有基本类型不是对象.</strong></p>
<p>object类有一些基本方法;</p>
<h2 id="5-2-1-equal方法"><a href="#5-2-1-equal方法" class="headerlink" title="5.2.1 equal方法"></a>5.2.1 equal方法</h2><p>检测一个对象是否等同于另一个对象。在Object中这个方法判断两个对象变量是否引用了相同的对象</p>
<h2 id="5-2-2-hashCode方法"><a href="#5-2-2-hashCode方法" class="headerlink" title="5.2.2 hashCode方法"></a>5.2.2 hashCode方法</h2><p>散列码是由对象导出的一个整形值。没有规律。</p>
<h2 id="5-2-3-toString"><a href="#5-2-3-toString" class="headerlink" title="5.2.3 toString"></a>5.2.3 toString</h2><p>toString 方法，用于返回表示对象值的字符</p>
<h1 id="5-3-泛型数组列表"><a href="#5-3-泛型数组列表" class="headerlink" title="5.3 泛型数组列表"></a>5.3 泛型数组列表</h1><p>ArrayList是一个采用类型参数的泛型类。&lt;&gt;内的类型参数不允许是基本类型。<br>它可以根据列表大小自动增加减少空间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</div></pre></td></tr></table></figure></p>
<h2 id="5-3-1-基本使用-增删查改"><a href="#5-3-1-基本使用-增删查改" class="headerlink" title="5.3.1 基本使用(增删查改)"></a>5.3.1 基本使用(增删查改)</h2><ol>
<li>使用 add 方法可以将元素添加到数组列表中</li>
<li>size 方法将返回数组列表中包含的实际元素数目 </li>
<li>在数组列表的尾部追加元素之外，还可以在数组列表的中间插入元素，使用带索引参数的 add 方法。</li>
<li>remove方法可以从数组列表中间删除一个元素</li>
<li>“for each “循环遍历数组列表<br>示例</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造一个空数组列表</span></div><div class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line"><span class="comment">//添加 调用add且内部数组满了，将自动创建一个更大的数组，并将所有对象拷贝过去</span></div><div class="line">staff.add(<span class="keyword">new</span> Employee());</div><div class="line"></div><div class="line"><span class="comment">//确保数组列表在不重新分配存储的情况下就能够保存给定数量的元素</span></div><div class="line">staff.ensureCapacity(<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//返回实际的元素数目，等价于数组a的a.length</span></div><div class="line">staff.size();</div><div class="line"></div><div class="line"><span class="comment">//用指定容量构造一个空数组列表</span></div><div class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="comment">//将数组列表的存储容量削减到当前尺寸</span></div><div class="line">staff.trimToSize();</div><div class="line"></div><div class="line"><span class="comment">//创建列表并拷贝到数组中</span></div><div class="line">ArrayList&lt;x&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"><span class="keyword">while</span>(...)&#123; x = ...; list.add(x); &#125;</div><div class="line">X[] a = <span class="keyword">new</span>  x[list.size()];</div><div class="line">list.toArray(a);</div><div class="line"></div><div class="line"><span class="comment">//在第n个位置插入，n之后的后移</span></div><div class="line">staff.add(n,e);</div><div class="line"></div><div class="line"><span class="comment">//使用get和set方法实现访问或改变数组元素的操作，而非[]方式。</span></div><div class="line"><span class="comment">//替换已存在的i元素的内容</span></div><div class="line">staff.set(i,harry);</div><div class="line"><span class="comment">// 获取第i个元素</span></div><div class="line">Employee e = staff.get(i);</div><div class="line"></div><div class="line"><span class="comment">//移除第n个元素</span></div><div class="line">Employee e = staff.remove(n);</div></pre></td></tr></table></figure>
<h1 id="5-4-对象包装器"><a href="#5-4-对象包装器" class="headerlink" title="5.4 对象包装器"></a>5.4 对象包装器</h1><ol>
<li>将基本类型转换为对象。所有的基本类型都有一个与之对应的类，这些类被称为包装器。</li>
</ol>
<p>Integer  Long  Float  Double  Short  Byte  Character  Void  Boolean<br>将基本类型变为对象叫装箱,反之叫拆箱.</p>
<ol>
<li>大部分装箱和拆箱操作都在编译器层面自动完成.</li>
</ol>
<h1 id="5-5-参数数量可变的方法"><a href="#5-5-参数数量可变的方法" class="headerlink" title="5.5 参数数量可变的方法"></a>5.5 参数数量可变的方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> PrintStream <span class="title">printf</span><span class="params">(String fmt ,Object... args)</span></span></div><div class="line">&#123;</div><div class="line">   <span class="keyword">return</span> format(fmt,args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>省略号…是代码的一部分，表明这个方法可以接收任意数量的对象,这个方法中有两个参数,字符串fmt,对象数组args[].</p>
<h1 id="5-6-反射"><a href="#5-6-反射" class="headerlink" title="5.6 反射"></a>5.6 反射</h1><p>在java中，只要给定类的名字，那么就可以通过反射机制来获得类的所有信息。 </p>
<h2 id="5-6-1-Class-类"><a href="#5-6-1-Class-类" class="headerlink" title="5.6.1 Class 类"></a>5.6.1 Class 类</h2><p>所有的对象维护一个被称为运行时的类型标识。这个信息跟踪着每个对象所属的类。 虚拟机利用运行时类型信息选择相应的方法执行。可以通过专门的 Java 类访问这些信息。 保存这些信息的类被称为 Class </p>
<ol>
<li>获得Class类实例</li>
</ol>
<ul>
<li>Object 类中的 getClass()方法将会返回一个 Class 类型的实例,即通过类的实例的得到类</li>
<li>静态方法 forName 获得类名对应的 Class 对象。</li>
<li>如果 T 是任意的 Java 类型， T.class 将代表匹<br>配的类对象。</li>
</ul>
<ol>
<li>通过Class类实例创建对应的类实例<br>newInstance( ) ，可以用来快速地创建一个类的实例。<br>上面知识点的实例:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">Employee e ;...</div><div class="line"></div><div class="line"><span class="comment">//getClass返回一个Class类的实例。</span></div><div class="line">Class c = e.getClass();</div><div class="line"></div><div class="line"><span class="comment">//返回类名字，包含包名</span></div><div class="line">c.getName();</div><div class="line"></div><div class="line"><span class="comment">//Class.forName()获得类名对应的Class对象</span></div><div class="line"><span class="comment">//这个方法只有在className是类名或接口名才能够执行。否则抛出checkedexception 已检查异常。无论何时使用这个方法都应该提供一个异常处理器</span></div><div class="line"></div><div class="line">String className=<span class="string">"java.util.Date"</span>;</div><div class="line">Class c1 = Class.forName(className);</div><div class="line"></div><div class="line"><span class="comment">//T.class代表匹配的T类对象</span></div><div class="line">Class cl1 = Date.class;</div><div class="line">Class cl2 = <span class="keyword">int</span>.class;</div><div class="line"></div><div class="line"><span class="comment">//虚拟机为每个类型管理一个Class对象，使用==实现两个类对象比较</span></div><div class="line"><span class="keyword">if</span>(e.getClass() == Employee.class )...</div><div class="line"></div><div class="line"><span class="comment">//newInstance() 创建一个类的实例 如果类没有默认构造器会抛出异常</span></div><div class="line">e.getClass().newInstance();</div><div class="line"></div><div class="line"><span class="comment">//根据类名创建一个对象</span></div><div class="line">Object o = Class.forName(<span class="string">"java.util.Date"</span>).newInstance();</div><div class="line"></div><div class="line"><span class="comment">//按名称创建构造器带参数的对象</span></div><div class="line">Constructor.newInstance( ... );</div></pre></td></tr></table></figure>
</li>
</ol>
<p>3.使用Class.forName()方法需要抛出一个已检查异常</p>
<h2 id="5-6-2-利用反射分析类的结构"><a href="#5-6-2-利用反射分析类的结构" class="headerlink" title="5.6.2 利用反射分析类的结构"></a>5.6.2 利用反射分析类的结构</h2><ol>
<li>类中元素的描述</li>
</ol>
<ul>
<li>java.lang.reflect有三个类 Field 、 Method 和 Constructor 分别用于描述类的域,方法和构造器</li>
<li>Field 类有一个 getType 方法，用来返回描述域所属类型的 Class 对象</li>
<li>Method 和 Constructor 类有能够报告参数类型的方法</li>
<li>Method 类还有一个可以报告返回类型的方法</li>
<li>以上3个类都有getModifiers的方法，它将返回一个整型数值，用不同的位开关描述 public 和 static 这样的修饰符使用状况</li>
</ul>
<ol>
<li>使用Class对象的方法获取类中元素的描述</li>
</ol>
<ul>
<li>对象的 getFields 、 getMethods 和 getConstructors 方法将分别返回类提供的 pub1ic 域、 方<br>法和构造器数组，其中包括超类的公有成员。</li>
<li>getDeclareFields 、 getDeclareMethods和 getDeclaredConstructors方法将分别返回类中声明的全部域,方法和构造器</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java 笔记 1]]></title>
      <url>https://ly11tea.github.io/2017/02/13/java-%E7%AC%94%E8%AE%B0-1/</url>
      <content type="html"><![CDATA[<h1 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h1><a id="more"></a> 
<h1 id="4-1-类和对象的基本概念"><a href="#4-1-类和对象的基本概念" class="headerlink" title="4.1 类和对象的基本概念"></a>4.1 类和对象的基本概念</h1><h2 id="4-1-1-类-封装-继承"><a href="#4-1-1-类-封装-继承" class="headerlink" title="4.1.1 类/封装/继承"></a>4.1.1 类/封装/继承</h2><p>类是<strong>构造对象的模板</strong>，由类构造对象的过程称<strong>为创建类的实例</strong>。</p>
<p>封装：也称为<strong>数据隐藏</strong>。从形式上看，封装不过是将<strong>数据和行为</strong>组合在一个包中，并对对象的使用者隐藏了数据的实现方式。优点4.2.3</p>
<p>实例域：<strong>对象中的数据</strong>。</p>
<p>方法：<strong>操纵数据的过程。</strong></p>
<p>对于每个特定的对象都有一组特定的实例域值。这些值的集合就是这个对象的当前状态。</p>
<p>实现封装的关键在与绝对不能让<strong>类中的方法</strong>直接地<strong>访问其他类的实例域</strong>。程序<strong>仅通过对象的方法与对象数据进行交互</strong>。这是提高重用性和可靠性的关键。</p>
<p>继承：通过扩展一个类来<strong>建立另外一个新的类</strong>。</p>
<p>在扩展一个已有的类时，这个扩展后的新类<strong>具有所扩展的类的全部属性和方法</strong>。</p>
<p>Java中一个源文件只能包含<strong>一个公有类</strong>并且文件名必须与<strong>公有类匹</strong>配。</p>
<h2 id="4-1-2-对象的特性"><a href="#4-1-2-对象的特性" class="headerlink" title="4.1.2 对象的特性"></a>4.1.2 对象的特性</h2><p>对象的行为：对象的方法。同一个类的所有对象实例，具有相同的方法而获得家族式的相似性。</p>
<p>对象的状态：当使用方法时对象如何响应。对象的状态描述当前对象的特征信息，状态只能通过调用方法来改变（否则说明封装性遭到了破坏）。</p>
<p>对象标识：对象的状态并不能完全描述一个对象。每个对象都有一个唯一的身份。</p>
<h2 id="4-1-3-类之间的关系"><a href="#4-1-3-类之间的关系" class="headerlink" title="4.1.3 类之间的关系"></a>4.1.3 类之间的关系</h2><p>依赖：use-a </p>
<p>聚合：has-a </p>
<p>继承：is-a </p>
<h1 id="4-2-使用一个类"><a href="#4-2-使用一个类" class="headerlink" title="4.2 使用一个类"></a>4.2 使用一个类</h1><h2 id="4-2-1-对象与对象变量"><a href="#4-2-1-对象与对象变量" class="headerlink" title="4.2.1 对象与对象变量"></a>4.2.1 对象与对象变量</h2><ol>
<li>我们使用constructor创建对象</li>
<li>对象与对象变量是有区别的,对象变量可以引用对象,但他不是一个对象,刚开始定义时也并没有引用一个对象<br>只有在初始化对象变量后,才能让它引用一个对象,对象变量的值<strong>只是对存储在别处某个对象的引用</strong>。new的返回值<strong>也是一个引用</strong></li>
</ol>
<p>3.使用final修饰对象引用,可以让这个对象引用在初始化后,不能够改变,永远指向一个对象.</p>
<h2 id="4-2-2-更改器方法与访问器方法"><a href="#4-2-2-更改器方法与访问器方法" class="headerlink" title="4.2.2 更改器方法与访问器方法"></a>4.2.2 更改器方法与访问器方法</h2><p>实例域做出修改的方法称为更改器方法(通常前绰为get)<br>访问实例域而不进行修改的方法称为访问器方法(通常前绰为set)</p>
<h1 id="4-3-定义一个类"><a href="#4-3-定义一个类" class="headerlink" title="4.3 定义一个类"></a>4.3 定义一个类</h1><p>可以将多个类放在多个源文件中,java编译时可以将他们自动地连接到一起.</p>
<h2 id="4-3-1-构造器"><a href="#4-3-1-构造器" class="headerlink" title="4.3.1 构造器"></a>4.3.1 构造器</h2><p>. 构造器与类同名<br>· 每个类可以有一个以上的构造器<br>·构造器可以有 0 个、 1 个或多个参数<br>·构造器没有返回值<br>· 构造器总是伴随着 new 操作一起调用</p>
<h2 id="4-3-2-方法"><a href="#4-3-2-方法" class="headerlink" title="4.3.2 方法"></a>4.3.2 方法</h2><p>类中的非静态方法总有两种参数,一个是隐式参数即调用这个方法的对象,一种方法处声明的参数.<br>本类中的方法总可以访问所有当前类对象中的<strong>所有域</strong>.</p>
<h2 id="4-3-3-封装"><a href="#4-3-3-封装" class="headerlink" title="4.3.3 封装"></a>4.3.3 封装</h2><p>要做到数据封装,要做到以下几点:<br>· 一个私有的数据域;<br>· 一个公有的域访问器方法;<br>· 一个公有的域更改器方法。</p>
<h2 id="4-3-4-final实例域"><a href="#4-3-4-final实例域" class="headerlink" title="4.3.4 final实例域"></a>4.3.4 final实例域</h2><p>如果实例域定义为 final 构建对象时必须对其就进行初始化,也就是说， 在使用构造器时，这个域的就被设置，并且在后面的操作中，不能够再对它进行修改.</p>
<h2 id="4-4-静态域与静态方法"><a href="#4-4-静态域与静态方法" class="headerlink" title="4.4 静态域与静态方法"></a>4.4 静态域与静态方法</h2><h2 id="4-4-1-静态域"><a href="#4-4-1-静态域" class="headerlink" title="4.4.1 静态域"></a>4.4.1 静态域</h2><p>将域定义为static，则类中只有一个这样的域，每个对象共享静态域，即使没有对象域也会存在，它属于类不属于对象。使用类名访问。<br>常常在静态域中声明静态变量:<br>静态常量：public static final double PI，就算设置为double,静态常量不会被修改.</p>
<h2 id="4-4-2-静态方法"><a href="#4-4-2-静态方法" class="headerlink" title="4.4.2 静态方法"></a>4.4.2 静态方法</h2><p>1.通过类使用，不能对象使用。静态方法没有this引用</p>
<p>2.因为静态方法不能操作对象，所以不能在静态方法中访问实例域。但是可以访问类中的静态域。</p>
<p>3.当一个方法不需要访问对象状态，其参数都通过显示参数提供或只需访问类中的静态域则可设置为静态方法。</p>
<p>设计模式中的工厂模式常常用到静态方法.<br>main方法是一种特殊的静态方法,在执行当前类的时候运行,可以看做程序入口.</p>
<h2 id="4-4-3-函数-方法-参数"><a href="#4-4-3-函数-方法-参数" class="headerlink" title="4.4.3 函数(方法)参数"></a>4.4.3 函数(方法)参数</h2><p>java中的方法参数总是值传递.所以:</p>
<ul>
<li>一个方法不能修改一个基本数据类型的参数 ( 即数值型和布尔型) 。</li>
<li>一个方法可以改变一个对象参数(这里的参数是对象变量)的状态。</li>
<li>一个方法不能让对象参数(这里的参数是对象变量)引用一个新的对象。</li>
</ul>
<h1 id="4-4-对象构造"><a href="#4-4-对象构造" class="headerlink" title="4.4 对象构造"></a>4.4 对象构造</h1><h2 id="4-4-1-重载"><a href="#4-4-1-重载" class="headerlink" title="4.4.1 重载"></a>4.4.1 重载</h2><p>多个方法具有相同的名字、不同的参数。<strong>方法名与参数类型</strong>叫做方法的签名。</p>
<p><strong>返回类型不属于方法签名</strong>，不能有两个名字相同、参数类型相同却返回不同类型值的方法。</p>
<h2 id="4-4-2-默认域初始化"><a href="#4-4-2-默认域初始化" class="headerlink" title="4.4.2 默认域初始化"></a>4.4.2 默认域初始化</h2><p>如果在构造器中没有显式的给<strong>域</strong>赋初值，会自动为域赋为默认值。<br>数值为 0,布尔值为 false 、对象引用为 null.</p>
<p>不同的是,<strong>局部变量</strong>必须明确初始化</p>
<h2 id="4-4-3-无参数的构造器"><a href="#4-4-3-无参数的构造器" class="headerlink" title="4.4.3 无参数的构造器"></a>4.4.3 无参数的构造器</h2><p>对象由无参数构造器创建时，状态会设置为适当的默认值。</p>
<p>只有类中<strong>没有提供任何构造器</strong>的时候，系统才会提供一个默认的构造器。也就是说如果提供了一个带参数的构造器而未提供不带参数的，系统不会自动提供不带参数的构造器，在使用不带参数的构造器时会报错。</p>
<h2 id="4-4-4-显示定义实例域"><a href="#4-4-4-显示定义实例域" class="headerlink" title="4.4.4 显示定义实例域"></a>4.4.4 显示定义实例域</h2><p>可以在定义数据域时就给其一定的初值,尤其是这个数据域在每个构造器中参数都一致时.</p>
<h2 id="4-4-5-在构造器中引用另一个构造器"><a href="#4-4-5-在构造器中引用另一个构造器" class="headerlink" title="4.4.5 在构造器中引用另一个构造器"></a>4.4.5 在构造器中引用另一个构造器</h2><p>构造器的第一个语句形如 this(…)，这个构造器将<strong>调用同一个类的另一个构造器</strong>，括号内为参数列表，根据参数选择是哪一个构造器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">double</span> s)</span></span></div><div class="line">&#123; </div><div class="line">　　<span class="comment">//calls Employee(String,double)...</span></div><div class="line">　　<span class="keyword">this</span>(<span class="string">"Employee "</span>,s);</div><div class="line">　　...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="4-4-6-初始化块"><a href="#4-4-6-初始化块" class="headerlink" title="4.4.6 初始化块"></a>4.4.6 初始化块</h2><p>在一个类的声明中，可以包含多个代码块，只要构造类的对象，这些块就会被执行。如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Class Employee</div><div class="line">&#123;</div><div class="line">　　<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextID;</div><div class="line">　　<span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">　　<span class="keyword">private</span> String name;</div><div class="line">　　&#123;id=nextID&#125; <span class="comment">//初始化块</span></div><div class="line">　　<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span>...</span></div><div class="line">　　<span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String s,<span class="keyword">int</span> i)</span>..</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>无论执行哪个构造器，都会先执行 id=nextID代码块</p>
<h2 id="4-4-7-类的构造器运行的一般步骤"><a href="#4-4-7-类的构造器运行的一般步骤" class="headerlink" title="4.4.7 类的构造器运行的一般步骤"></a>4.4.7 类的构造器运行的一般步骤</h2><p>4.4.7 构造器的处理步骤</p>
<p>基于上述多个途径下的步骤：</p>
<p>1：所有数据域被初始化为默认值。</p>
<p>2：按照在类声明中出现的次序，依次指向所有域初始化语句和初始化块。</p>
<p>3：如果构造器第一行调用了第二个构造器，则执行第二个构造器主体。</p>
<p>4：执行这个构造器的主体。</p>
<h1 id="4-5-包"><a href="#4-5-包" class="headerlink" title="4.5 包"></a>4.5 包</h1><p>包能够尽量保证类名的唯一性又不失灵活性,</p>
<h2 id="4-5-1-包的导入"><a href="#4-5-1-包的导入" class="headerlink" title="4.5.1 包的导入"></a>4.5.1 包的导入</h2><p>一个类可以访问,所属包中的所有类，以及其他包中的公有类.<br>访问其他包中的公有类有两种方法.</p>
<ol>
<li>第一种方式是在每个类名之前添加完整的包名。<br><code>java.util.Date  today =  new  java.util.Date();</code></li>
</ol>
<p>2.使用 import 语句。 import 语句是一种引用包含在包中的类的简明描述。 一旦使用了 import 语句，在使用类时，就不必写出包的全名了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line">Date today=<span class="keyword">new</span> Date();</div></pre></td></tr></table></figure></p>
<p>还可以导入静态方法和静态域<br>如 <code>import static java.lang.System.*;</code> 则可直接使用out.println(…);</p>
<h2 id="4-5-2-将类放入包中"><a href="#4-5-2-将类放入包中" class="headerlink" title="4.5.2 将类放入包中"></a>4.5.2 将类放入包中</h2><p>在源文件的开头，写上  package  包名 ;</p>
<h2 id="4-5-3-包的访问权限"><a href="#4-5-3-包的访问权限" class="headerlink" title="4.5.3 包的访问权限"></a>4.5.3 包的访问权限</h2><p>一个类中的数据域变量应当设置为private的,否则同一个包中其他任何类都可以访问并修改它</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[flask at scale 笔记 2]]></title>
      <url>https://ly11tea.github.io/2017/01/18/flask-at-scale-%E7%AC%94%E8%AE%B02/</url>
      <content type="html"><![CDATA[<h1 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h1><h1 id="v0-12"><a href="#v0-12" class="headerlink" title="v0.12"></a>v0.12</h1><a id="more"></a> 
<h2 id="web-server"><a href="#web-server" class="headerlink" title="web server"></a>web server</h2><p>在Web部署的方案上，有一个方案是目前应用最广泛的：</p>
<blockquote>
<p>首先，部署一个Web服务器专门用来处理HTTP协议层面相关的事情，比如如何在一个物理机上提供多个不同的Web服务（单IP多域名，单IP多端口等）这种事情。<br>然后，部署一个用各种语言编写（Java, PHP, Python, Ruby等）的应用程序，这个应用程序会从Web服务器上接收客户端的请求，处理完成后，再返回响应给Web服务器，最后由Web服务器返回给客户端。</p>
</blockquote>
<p>我们之前做的工作是致力于完成网站的业务逻辑,但是对客户端怎么联系我们,以及我们的响应怎样被传送给用户并没有考虑.事实上这个工作就由web server来完成.<br>根据网络工程的基本概念,web server 更准确地说是http server为我们处理了链路层和应用层上协议的解析和处理,例如在socket上侦听等等,之后web server 与网站应用(以后叫app sever)通过特定的协议通信.(中间通常还有中间件)<br>flask 是自带http sever的,否则我们也没有办法在程序调试阶段就能使用浏览器访问我们的网站.但是在生产环境下,自带的http server 还不够健壮.因此我们需要一些能够用于生产环境下的server软件.</p>
<p>下面再来解释几个名词:</p>
<p>WSGI:</p>
<blockquote>
<p>WSGI的全称是<strong><em>Web Server Gateway,Interface</em></strong>，翻译过来就是Web服务器网关接口.WSGI是一个规范，定义了Web服务器如何与Python应用程序进行交互，使得使用Python写的Web应用程序可以和Web服务器对接起来</p>
</blockquote>
<p>这个东西就是上面说的web server 与app server 之间通信的特定协议中的一种.<br>顾名思义,’网关’,’接口’,这个协议将app和server连接到了一起,只要符合这个统一标准的app就都能同符合这个标准的server配合使用</p>
<p>uWSGI<br>uWSGI是一个Web Server，它实现了WSGI协议、uwsgi、http等协议。我们把它作为接近,app server 的一层服务器.</p>
<p>Nginx (“engine x”)<br>是一个高性能的HTTP和反向代理服务器,同时还有IMAP/POP3/SMTP服务</p>
<p>其实上面的<strong>uWSGI和Nginx 任意一个配合app</strong> server就能使得网站顺利运行,但是往往两者会配合使用,并且总是Nginx在外接近用户的那一侧,uWSGI在内接近app server的那一侧<br>因为:<br>使用uWSGI是因为他专为python开发,兼容性更好,把他安排在内侧,在接下来运行多线程,多进程时兼容性更好.<br>使用Nginx是因为:</p>
<ul>
<li>本地有多个 web 服务，有 Python、php、java 编写的，都想监听 80 端口，这个时候就必须有一个负责转发的服务了。</li>
<li>uwsgi 和 gevent 对于静态资源处理的并不是很好，一是性能问题，二是各种 HTTP 请求缓存头，处理的也没有 Nginx 完善。</li>
<li>Nginx作为久经考验的专业web server 显然安全性更好,并且对HTTPS支持更好,可以让HttpS在Nginx这一层解密为HTTP再发给后面的其他服务器处理<br>Nginx在这里起到反向代理的作用</li>
</ul>
<p>0.12 通过配置uwsgi和Nginx,实现了生产环境下 web server的部署</p>
<h1 id="多线程-多进程与协程"><a href="#多线程-多进程与协程" class="headerlink" title="多线程,多进程与协程"></a>多线程,多进程与协程</h1><p>如果使用单进程进行网页渲染等其他消耗cpu的操作,极有可能造成在一段时间服务器无法响应其他请求,这对于实时性要求较高的聊天室来说是不可接受的</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程是一个具有独立功能的程序关于某个数据集合的一次运行活动。它可以申请和拥有系统资源，是一个动态的概念，是一个活动的实体。它不只是程序的代码，还包括当前的活动，通过程序计数器的值和处理寄存器的内容来表示。</p>
<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>最早的计算机，每次只能执行一个进程， 计算机运算速度提高了，可以多个进程轮流跑,或者有多个cpu可以大家几个同时跑.但是不同的进程交接时,必然要进行上下文切换,这种操作通常由内核完成,多进程的优点是:切换逻辑简单,各进程资源独立不大会出现同步的问题.<br>缺点同样是由资源独立导致的,这使得多线程切换时代价很高,进程一多,大部分系统计算资源反而消耗在了切换上.</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>为了改善这种切换代价过大的情况,引入了线程,实际上是一种轻量级的进程,线程是程序中一个单一的顺序控制流程。进程内一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位.</p>
<p>线程除了栈,状态,优先级,寄存器组独立之外,其他的都与同一个进程下的线程共享,大大提高了切换速度.<br>但正是因为这种资源共享,会引来同一个资源的意外访问问题,所以需要加上一些锁来防止,这样子就使得编程更加繁琐,并且有的时候未必能解决问题.<br>使用线程在python中还有一个特殊的劣势,由于py解释器中GIL全局锁的存在,python事实上无法真的并行,对于多cpu来说是很大的浪费.</p>
<h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>如果把线程之间切换的权限下放给进程,由各个线程之间自行退出,自行切换,相当于把操作线程的权利交给了用户,我们称它为用户态线程又叫协程,由于架构及其简单,有没有资源锁,所以协程能轻松的做到上千个同时进行,比较适合web场景下IO比较密集的特点</p>
<p>事实上,下面几个版本将上面的多线程,多进程,协程都实验了一遍.</p>
<h2 id="同步-异步-阻塞-非阻塞"><a href="#同步-异步-阻塞-非阻塞" class="headerlink" title="同步,异步,阻塞,非阻塞"></a>同步,异步,阻塞,非阻塞</h2><p>先来介绍一下这些名词:<br>同步与异步的主体在客户端,描述的是连接的状态<br>同步:指的是由客户端向服务器发出通信后,如果服务器不返回想要的结果,客户端程序就会一直等待,不作其他任何工作.<br>异步:指的是客户端向服务器发出通信后,立刻返回,客户端通过轮询或通过服务端回调的方法得知处理的状态并取结果</p>
<p>阻塞与非阻塞着重于描述对线程的处理方式,值得注意的是这时候双方应当在一个内核的调度下<br>阻塞:这种模式下调用函数的线程,若函数没有返回结果时,会一直挂起这个线程,不再让其执行.所以从io的视角来说,就是阻塞的.<br>非阻塞:这种模式下,线程正在调用的函数会返回,线程仍可以做其他的事情.</p>
<p>生产环境下的性能瓶颈往往可以分为两类:<br>io瓶颈和cpu瓶颈:</p>
<ul>
<li>io瓶颈<br>多发生在对服务器的请求数量较高时<br>解决的方法:<br>1.利用多线程提高服务器的并发能力,即同一时刻内能够处理更多的进程.<br>2.利用异步的方式去处理I/O时间长的请求,避免客户端阻塞在这个请求上,导致用户无法输入信息</li>
<li>cpu瓶颈<br>多放生在cpu渲染任务比较重的时候<br>解决的办法:<br>利用多线程或多进程防止合理的分配cpu时间,不让其占满整个运行时间,造成整体的卡顿</li>
</ul>
<h1 id="v0-13"><a href="#v0-13" class="headerlink" title="v0.13"></a>v0.13</h1><p>v0.13 就要具体实现异步处理Request的功能.<br>异步request的工作流程如下:</p>
<ol>
<li>客户端发给服务器一个request,如果这个request是容易产生瓶颈的request,我们就采用异步的方式处理</li>
<li>服务器接受到request后,在后台打开一个线程处理具体的逻辑操作,同时立刻返回一个相应,状态码为202,还有一个能够查询任务状态的url</li>
<li>上面提到的url实际上指向一个专门的路由,用于查询任务的进行状态,这个路由在要查询的任务还没好的时候返回202,任务完成后返回任务运行的结果.</li>
<li>客户端每隔一段时间就查询一下任务进度,若完成,则显示结果.</li>
</ol>
<p>在具体实现上,采用装饰器的形式,加在想要改变为异步路由的函数上.<br>装饰器内部,则使用python的threading模块手动开一个线程,成功后即返回202,并将路由器函数的具体处理放到线程函数中.线程函数中,我们使用伪装app.context的方法伪造原post request 的环境,以调用原来的路由函数<br>0.13的方法实践上是比较简单的,也没有用到外部的模块.但是实际使用下来却发现非常的不稳定.后台线程处理的结果经常是500 错误,经过调查后发现是在线程函数中无法访问原request中的body导致的,经过uwsgi的封装,这个body是一个bytes i/o,在传递到线程函数的过程中,有很大的概率会被莫名其妙的关闭,导致在进程函数中,无法读取.<br>我在github上开了一个issue向作者提问,他把这个issue标记为了bug,并建议我,直接将request的body数据记录下来,然后直接作为参数传给线程函数,(而不像之前一样,相当于只传递一个指向原bytes io object的指针),然后在线程函数中直接构造一个bytes io object,以规避被意外关闭的风险,事实上,之后的几个版本他也是这样做的.<br><a href="https://github.com/miguelgrinberg/flack/issues/3" target="_blank" rel="external">提问的具体链接</a></p>
<p>V 0.13的教训是,造轮子的感觉固然爽,但是以一种简陋的方法造出的轮子很有可能不堪用,下一个版本开始,我们把具体的任务调度工作交给celery worker,解决上个版本不稳定的问题.</p>
<h1 id="v0-14"><a href="#v0-14" class="headerlink" title="v0.14"></a>v0.14</h1><p>v0.13 的另一个问题是,由前面的基础知识的介绍我们知道,线程的数目并不是越多越好,过多的线程会导致大量的cpu资源消耗在切换线程上,反而造成整体效率的降低.<br>因此,在0.14中,我们使用celery ,celery是一个异步的任务分配队列,他分为两个部分,前端部分将要做的工作加入任务队列中,任务由函数的形式给出,后端worker部分从任务队列中取任务,完成工作.其中前端添加任务的工作,由我们通过celery的接口完成,后端的任务事先配置好后,由celery自动分配,并均衡负载.<br>在代码上我们仍然使用装饰器的方式实现异步化,在装饰器中将任务添加进入任务队列中,然后返回202,celery也能够查询任务执行的状态,我们用celer提供的接口实现,上一例中实现的状态查询路由的功能.</p>
<h1 id="v0-15"><a href="#v0-15" class="headerlink" title="v0.15"></a>v0.15</h1><p>前面提到这个聊天室客户端与服务器端通信的方式是rest,这就意味着客户端必须不断地向服务器轮询以获得实时地感觉,这种模式天然的就提高了客户端request的数量,可以说rest模式并不适合这个聊天室的应用,他更加适合weibo,zhihu那种以静态资源为主的客户端.<br>我们自然而然地想到通过切换模式,尽量减少request的数量,常用的有下面几种方案:<br>stream:即串流,具体说来就是客户端向服务器请求数据后,服务器并不一次性把数据发完,而是一点一点的发送给客户端,常常应用于视频中<br>long-polling:长轮询,具体上就是把轮询持续的时间延长,服务器收到request后可能过一段时间才会返回response,客观上讲降低了通信频率<br>上面的两种方法,本质上还是http request-response的思路,即client总是通信的发起方,server总是被动方,这样不能从根本上解决问题.<br>html5 引入了一个新特性 websocket,这是一种能够用来双向通信的协议,服务器和客户端之间首先使用http协议握手,之后边不再使用http,这时候两者之间就如同socket一般可以同时收发.<br>在node.js中又将一系列能够进行双向通信的协议进行了封装,以照顾一些不兼容web socket协议的设备使用,这就是socket.io.他保证了兼容性.这种封装也被介绍到了其他的语言中,python中就有socket.io的包.</p>
<p>服务器此时可以通过push model的方式把信息主动的发送给客户端,这种事件驱动的方式,最大限度的解决了i/o的瓶颈.<br>websocket的缺点是,服务器和客户端之间必须保持连接,这种连接可能成千上万,因此无论多线程和多进程都无法满足这样的要求,在这里我们使用green event,保持这种连接.</p>
<h1 id="v0-16"><a href="#v0-16" class="headerlink" title="v0.16"></a>v0.16</h1><p>在0.15中处理信息的原路由函数不再使用,我们转而使用事件驱动的socket.io函数,所以尽管0.15中socket.io能处理较多的连接但是后台的event handler只有一个,这样在cpu负载较重的时候,仍然有可能造成阻塞.<br>socket.io中提供了后台多线程处理的功能,socket.io主线程的event handler在接受到函数后,通过celery将任务发送到message queue中,celery worker完成任务并初始化一个socket.io 子线程,这个线程不直接发送消息给客户端,而是发送信息到msg queue中,由socket.io主线程统一发送消息<br>整个的流程是:<br>socket.io(主)接收到消息-&gt;celery client发布任务到msg queue-&gt;celery worker从msg queue中得到任务并处理-&gt;子线程socket.io发送数据到msg queu-&gt;socket.io从msg.queue得到要发送的数据正式发送.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[FLASK at Scale 笔记(未完)]]></title>
      <url>https://ly11tea.github.io/2017/01/13/FLASK-at-Scale-%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>Miguel Grinberg 在 Pycon 16 上做了这个演讲,讲述怎样合理的,项目化,生产化的部署flask应用,前半部分是开发项目结构上的优化,通过分散模块,建立蓝本函数,使用工厂函数等等方法使得代码的组织更加有序,高效.后半部分生产环境部署上的优化,通过Nginx,uwsgi,celery,socket.io,greenlet等技术的应用,将异步非阻塞,并行的结构应用到项目上,改善高并发环境下的项目性能.</p>
<a id="more"></a> 
<h1 id="v0-1"><a href="#v0-1" class="headerlink" title="v0.1"></a>v0.1</h1><p>作者在演讲的一开始给出了V0.1的文件,首先它是一个完全可用的工程,一个简易的的在线聊天室,提供markdown语言的支持,然而它又十分的丑陋:</p>
<ul>
<li>所有的后端程序文件都集中在一个app当中,在里面寻找,修改代码的体验都是一场灾难.</li>
<li>由于配置没有和程序本身剥离,所以很难进行完整地测试,也无法区分开发环境和生产环境.<br>在生产部署方面:</li>
<li>没有用到一些生产部署方面常用的框架.Nginx,uwsgi等等</li>
<li>客户端单线程并且同步的执行文本渲染等其他操作,在高并发环境下阻塞甚至根本不可用</li>
<li>客户端和服务器之间完全使用REST架构,在这种聊天应用中使用rest意味着要不停的向服务器轮询资源才能得到实时地感觉,这非常消耗服务器和带宽资源</li>
</ul>
<h1 id="V0-2"><a href="#V0-2" class="headerlink" title="V0.2"></a>V0.2</h1><p>v0.2主要是将一些辅助性的并且与用户的其他编码没有相关性的函数移动到其他Moudle中,在文件结构上就是移动到其他py文件中.<br>这些函数因为相互关联性较少,没有互相import的问题,所以操作起来也比较简单.</p>
<h1 id="v0-3"><a href="#v0-3" class="headerlink" title="v0.3"></a>v0.3</h1><p>在0.3中我们将数据模型的类剥离出来形成一个单独的模块(model.py),在这里我们遇到了第一个头疼的问题–python的循环import:<br>在这个版本中,orm sqlalchemy的实例db被初始化在flack.py中,而在model.py中定义模型时必须要用到db实例,又,在flack.py要使用model.py中定义的模型User,Message,这样逻辑上就产生了一个无限循环的相互import<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">--flack.py--</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line">db = SQLAlchemy(app)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_user</span><span class="params">()</span>:</span></div><div class="line">    u = User()</div><div class="line"></div><div class="line">--models.py--</div><div class="line"><span class="keyword">from</span> flack <span class="keyword">import</span> db</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p>循环import的根本原因在于项目,逻辑的层次组织的不对,一般来说被引用的文件不应该包含可直接执行的代码,而应该是函数,类等结构.<br>我们可以看出,<strong>在这里不符合要求的是flack.py</strong>,事实上在<strong>稍后</strong>的几个版本中我们正是继续修改flack.py,继续分离代码，彻底的解决问题。</p>
<p>在这里我们使用‘标’的方法，import<code>__main__</code>这种固定的命名空间解决,当然为了普适性,这里还加入了抛出异常并处理的语句,以解决运行的入口文件不是flack的情况:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">models.py</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> __main__ <span class="keyword">import</span> db</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">from</span> flack <span class="keyword">import</span> db</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div></pre></td></tr></table></figure></p>
<p> <code>__main__</code>是py中的一个命名空间,它指示的是被直接运行的脚本的命名空间,当python进行import的时候,在<code>sys.modules</code>中寻找要导入的模块是否已经载入,<code>__main__</code>第一个运行,显然已经载入,所以此时就会将要导入的目标直接加入当前模块(models.py)的当前命名空间中,之后就可以直接拿来使用了.<br>其中<code>sys.modules</code>模块存储已经导入的模块的名字,但是直接运行的脚本的名字一律是<code>__main__</code>,这就意味着我们之前在使用<code>from flack import db</code>时,系统并未在<code>sys.modules</code>中找到flack,而是又去import 了一遍flack.py,并创建了一个flack的命名空间结构存储在<code>sys.modules</code>中,在这个过程中flack.py第一层级(缩进区分)的代码都被执行,造成了相互import.<br>当然如果在被import的文件中,所有执行性的语句和类的继承,都和import无关,那么你可以将 import 放到这些所有语句的下面,但在这里<strong>行不通,</strong>因为定义数据模型需要继承db.model<br>如下:</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">--flack.py--</div><div class="line">db = SQLAlchemy(app)</div><div class="line"><span class="keyword">from</span> models <span class="keyword">import</span> User</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_user</span><span class="params">()</span>:</span></div><div class="line">    u = User()</div><div class="line"></div><div class="line"></div><div class="line">--models.py--</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line">.....</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">from</span> flack <span class="keyword">import</span> db</div></pre></td></tr></table></figure>
<p>一个可以实现的范例:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">---a.py---</div><div class="line"><span class="keyword">from</span> b <span class="keyword">import</span> action_b </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">action_a</span><span class="params">()</span>:</span>                               </div><div class="line">    print(action_b.__name__)</div><div class="line">print(<span class="string">'a'</span>)               </div><div class="line"></div><div class="line">---b.py---</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">action_b</span><span class="params">()</span>:</span></div><div class="line">    print(action_a.__name__)</div><div class="line">print(<span class="string">'b'</span>)</div><div class="line"><span class="keyword">from</span> a <span class="keyword">import</span> action_a</div></pre></td></tr></table></figure></p>
<p>此时python a.py 是可以执行的<br>总结一下,解决循环import的最好的方法应该是,<strong>尽量避免相互import,避免import执行性的脚本</strong>.这个道理其实很多地方都成立,如果实现一个功能特别费劲,那么很可能你的practice就有问题.例如.直接在包中执行脚本等等。</p>
<h1 id="V0-4"><a href="#V0-4" class="headerlink" title="V0.4"></a>V0.4</h1><p>如上面结束时所说，不要在一个包中直接执行文件，否则的话会在后期项目架构组织上带来许多的麻烦。因此在0.4中就将网站应用放到一个包中，<br>这个包中的层次有：</p>
<ul>
<li>/static 放置静态的图片和js文件</li>
<li>/template 放置用于渲染的网页模板</li>
<li>包中的一些模块,主模块,数据库模型定义模块,辅助函数模块等等<br>在包的外部放置虚拟环境和测试文件等等.<br>将这整个网站的应用部分做成一个包的另一个好处是可以将启动置于包的外部,可以灵活的配置一些启动选项和方式,这里我们使用flask-script 包,将flask初始化的app实例,使用flask-script的manager实例封装后,可以使用命令行参数制定不同的启动选项,包括专用的shell环境,创建数据库等等</li>
</ul>
<h1 id="V0-5"><a href="#V0-5" class="headerlink" title="V0.5"></a>V0.5</h1><p>许多路由都需要用到验证函数,且这些函数在逻辑上又有紧密的关系,是一个整体.将它们放在一个模块中并调用,有利于进一步理清项目之间的逻辑关系,同时也容易维护</p>
<h1 id="V0-6"><a href="#V0-6" class="headerlink" title="V0.6"></a>V0.6</h1><p>测试作为一个相对独立的模块可以不放在网站应用包中而是移到项目的根目录下,作为一个独立的包,两个包通过项目根目录下的manager.py联系到一起,即为网站再增加一个启动参数.<br>这样做,彻底让网站应用程序包中没有直接执行的入口,所有的启动操作都由启动文件manager.py处理,理顺了整个工程的框架逻辑.<br>在包外做启动也理顺了测试业务逻辑,因为用户总是在外部使用网站的,便于后期增加一些模仿用户操作的可能性.<br>在这里我们也看到在包外使用启动文件启动的好处:可以灵活的增删功能,最大限度的避免import的错误.</p>
<h1 id="V0-7"><a href="#V0-7" class="headerlink" title="V0.7"></a>V0.7</h1><p>在包的外部使用启动文件启动的另一个好处就是可以方便的配置,同样的网站应用程序需要可能需要在不同的环境下进行,如部署时的生产环境,调试环境,测试环境,不同的环境需要应用不同的配置.<br>这里将不同层次的配置使用类的关系展开:<br>所有环境下通用的配置作为基类,不同环境个性化的配置由继承自基类,再进行增加.<br>如下:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">config</span><span class="params">(object)</span>:</span></div><div class="line">    ....</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">debug</span><span class="params">(config)</span>:</span></div><div class="line">    ....</div></pre></td></tr></table></figure></p>
<h1 id="V-0-8"><a href="#V-0-8" class="headerlink" title="V 0.8"></a>V 0.8</h1><p>一个网站的路由函数往往有不同的类别,可以将某一类的函数组织在一起,在一个模块中集中定义.在flask中我们将其称为蓝本函数<code>blueprint</code><br>定义完成后只需要将蓝本函数实例在网站app初始化时进行注册即可,需要的话还可以为其在url上统一加上前绰<br>在这个例子中我们将rest api相关的路由函数,封装在一个蓝本内部.<br>这种做法有利于统一管理路由函数.</p>
<h1 id="v0-9"><a href="#v0-9" class="headerlink" title="v0.9"></a>v0.9</h1><p>这个版本中我们把统计request次数的模块剥离出来形成一个独立的模块,由于这个模块同样相对独立,所以可以像0.2 一样直接移动</p>
<h1 id="v0-10"><a href="#v0-10" class="headerlink" title="v0.10"></a>v0.10</h1><p>0.10实行了一个较大的改动:建立了一个app工厂函数,在之前的版本中网站程序的启动文件已经定义到了包外,但是网站<strong>app实例的初始化仍然在flack.py</strong>中.这样其实相当于在包内部仍然运行了多条语句,现在把这些语句改写成函数的形式,并且放到包的<code>__init__.py</code>中,在外部的启动脚本中调用这个函数,这样启动的整个过程都在包的外部了,这样做的动机有:</p>
<ul>
<li>在生产环境中往往有可能不止运行一个网站app,以适应多并发的情况,只有剥离出app工厂函数才能做到这点</li>
<li>app的初始化放到外部脚本后,包内的文件把current_app 作为程序的实例使用,current_app是flask中的程序上下文,比直接使用app更加灵活.此外也大幅度减少了包内部各模块之间的相互import<br>此外</li>
<li><strong>这种实现方法也彻底解决了v0.3引入的循环import的问题</strong>,这个版本开始不会再出现相互import了,由于init.py中不需要使用model中定义的数据模型,所以不会向models.py import,使用数据模型的模块中不进行orm 实例的初始化,所以与之相关的所有import都变成了单向的,从这里可以看出好的设计模式的力量,他可以从根本上解决许多繁琐的问题.</li>
</ul>
<h1 id="V0-11"><a href="#V0-11" class="headerlink" title="V0.11"></a>V0.11</h1><p>之前我们已经将api,auth等路由函数分门别类地收纳在蓝本中,但是每一个蓝本中的路由函数也有类别,比如api中有处理信息的,有处理用户的,所以不妨把api写成包的形式,然后其中不同功能的函数分割成各个模块.此外,model.py里的数据模型也能够通过这种方法分割.<br>关于包的内部组织要把原本被<strong>import出去的内容放在<code>__init__.py</code></strong>中,这样可以保证包外部调用包内内容的函数写法保持不变.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[postgresql 使用小结]]></title>
      <url>https://ly11tea.github.io/2016/12/20/postgresql-%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>postgresql在数据类型的定义方面与其他sql型数据库差别不大,主要是在登录环节略有不同.<br>总的来说,postgresql进行通信有两种方式,<br>一种是local,这时候客户端和服务器在一个操作系统上,通过websocket连接,这时候postgresql的默认验证方式是peer,相当于把验证工作甩给了操作系统,如果操作系统用户名同数据库中的某个用户名相同,那就以那个用户名登录,安装postgresql,数据库中默认添加一个名为postgres用户，密码随机,操作系统中也会添加一个名为postgres用户，密码随机.所以进行初次配置时我们一般要使用<br><code>sudo -u postgres psql</code><br>登入postgresql,然后再添加用户和数据库</p>
<p>另一种方式是host,这时候客户端和服务器不一定在一个操作系统上,这个时候postgresql的默认验证方式是MD5,即MD5加密的密码验证,此时orm的url应该写成<code>&#39;postgresql://user:pass@ip:port/mydatabase&#39;</code>的形式,如果嫌麻烦也可以在pg_hba.conf文件中将localhost的链接改为trust这样在本地发起的tcp连接可以访问任意用户的任意数据库,值得注意的是这种方法只能在开发时用,正式场合使用将非常危险.<br>你也可以将url写成<code>&#39;postgresql:///mydatabase&#39;</code>的形式这样仍然是使用websocket连接</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那些年踩过的python坑（一）]]></title>
      <url>https://ly11tea.github.io/2016/12/09/%E9%82%A3%E4%BA%9B%E5%B9%B4%E8%B8%A9%E8%BF%87%E7%9A%84python%E5%9D%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>格者，正也，正其不正，以归于正也.</p>
<p><strong>王阳明</strong>, <em>传习录</em></p>
</blockquote>
<p>写一些初学python遇到的坑,主要是总结后给自己提个醒,当然如果能够帮助到别人那就更好了.<br><a id="more"></a> </p>
<h2 id="python的turple-list和dict"><a href="#python的turple-list和dict" class="headerlink" title="python的turple,list和dict"></a>python的turple,list和dict</h2><p>python尽量省略了变量的初始化和定义语句,对于单个变量来说一般情况下完全不需要初始化,直接进行赋值即可.对于数组型数据结构,也仅仅需要在使用前使用纯符号定义类型.这样做好处是加快了编程流程,然而对于新手来说这也增加了混淆的风险.<br>首先先来介绍一下这三种数据结构:</p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><blockquote>
<p>列表. list是一种有序的集合，可以随时添加和删除其中的元素.<br>l=[]</p>
</blockquote>
<p>list中的数据类型可以是不固定的,所以是一种复合的数据类型.list也可以方便的使用<strong>内建函数</strong>增加或删除某些元素.</p>
<h3 id="turple"><a href="#turple" class="headerlink" title="turple"></a>turple</h3><blockquote>
<p>元祖. turple是一种有序的集合，一旦定义完成<strong>不能</strong>添加和删除其中的元素.<br>t=()</p>
</blockquote>
<p>list和tuple的性质非常相似，其中最大的区别其实就在于是否为常量。</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h3><blockquote>
<p>字典，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。<br>d={}</p>
</blockquote>
<p>个人觉得这个就是散列表的一种实现,将散列表直接作为一种常用数据类型,这也体现python现代高级语言的特点.<br>dict与上述两个数据类型最大的不同是其中的element是成对存储的,也就是上面所说的键值对.此外由于是无序的,dict的插入元素也非常方便:你只需要用赋值语句对应的key-value填充字典即可</p>
<blockquote>
<p>d[key]=value</p>
</blockquote>
<p>所以爱偷懒的人(比如我)或者以前学过C++的人可能会想到,可以使用dict来实现list,只要将其中的index换成key即可,在语言使用习惯上更符合c-style的习惯,并且还不用提前分配空间,比vector好使!…然而这并不是一种好的习惯:</p>
<ul>
<li>首先index-&gt;key会改变自身的数据类型,</li>
<li>且占用了大量内存.</li>
<li>还无法保证<strong>迭代时的有序性</strong>(这一点我还没有碰到),即迭代的顺序未必是插入时的顺序.</li>
</ul>
<p>所以,下面我就碰到了坑:<br>我们都知道python中也有for..in..循环,然而与c-style语言中偏好于下标实现不同python更偏向于迭代器实现,甚至根本不鼓励下标实现.也确实做到了用迭代器实现代码更少更方便(这一点上要明显好于C++).<br>例如:<br>遍历list l中元素:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</div><div class="line">    i....</div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</div><div class="line">    l[i]....</div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i,value <span class="keyword">in</span> enumerate(l):</div><div class="line">    l[i]...</div></pre></td></tr></table></figure>
<p>上面的三种方法显然第一种使用迭代器的方案最优.然而使用迭代器我们就必须能够明晓迭代器的数据类型.<br>对于list和tuple迭代器的类型就是其中element的类型,而dict默认为<strong>其中的 key</strong> :</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</div><div class="line">    i <span class="comment">##此时的i为int,是key</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> va <span class="keyword">in</span> d.values():</div><div class="line">    va <span class="comment">##此时va为d中值</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i,va <span class="keyword">in</span> d.items():<span class="comment">##还可以遍历键值对</span></div><div class="line">    i,value....</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</div><div class="line">    i <span class="comment">##此时的i为int,是key</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> va <span class="keyword">in</span> d.values():</div><div class="line">    va <span class="comment">##此时va为d中值</span></div><div class="line"><span class="comment">####</span></div><div class="line"><span class="keyword">for</span> i,va <span class="keyword">in</span> d.items():<span class="comment">##还可以遍历键值对</span></div><div class="line">    i,value....</div></pre></td></tr></table></figure>
<p>对于赋值语句,这个规律仍然存在:<br>例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">std_msgs.msg.Int8MultiArray(data=d)</div><div class="line">t=tuple(d)</div><div class="line">l=list(d)</div></pre></td></tr></table></figure></p>
<p>这个data参数,tuple函数,list函数只接受一个数据序列,此时复制过去的就是dict的key,若要想复制value,就必须使用<code>d.values()</code></p>
<h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h2><p>由于python支持tuple packing 和Sequence unpacking以达到多重赋值,所以赋值时可能出现一些我们不想要的结果然而代码却仍能够执行下去:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> enumerate(l)</div><div class="line">    <span class="comment">###此时每一次循环中i是一个两个元素的一维tuple</span></div><div class="line"><span class="keyword">for</span> i,va <span class="keyword">in</span> enumerate(l)</div><div class="line">    <span class="comment">###此时为两个int,分别为 index和value</span></div></pre></td></tr></table></figure></p>
<p>相似的语句却产生了完全不同的两种数据类型,且语句中也没有显式的体现,这也是py极少的对于新手不友好的地方.</p>
<h2 id="bytearrary"><a href="#bytearrary" class="headerlink" title="bytearrary"></a>bytearrary</h2><p>另一个为新手所诟病的python坑,莫过于是python的两个版本,python2和python3了.有偏激的说法说这两个版本实际上已经成为了两种语言,这当然不对.最常见的就是print方法的变化.这里要讨论的是另一种,python2和python3的字符串表示.<br>写这个概念之前,我们先来明确一下字符编码的概念,不同于我们生活中直接可以用字符交流,计算机显然要将字符编为一段二进制码才能进行底层的存储和处理,而用户在进行大多数操作时并不需要过于关心这个编解码的过程,就如同在现实中一样,我们把这样的操作称为<strong>抽象的</strong>.大多数高级编程语言都有string类型,以满足这样的操作:</p>
<blockquote>
<p>字符串是文本的抽象表示。字符串由字符组成，字符则是与任何特定二进制表示无关的抽象实体。在操作字符串时，我们生活在幸福的无知之中。我们可以对字符串进行分割和分片，可以拼接和搜索字符串。我们并不关心它们内部是怎么表示的，字符串里的每个字符要用几个字节保存。只有在将字符串编码成字节包（例如，为了在信道上发送它们）或从字节包解码字符串（反向操作）时，我们才会开始关注这点。</p>
</blockquote>
<p>上面的话是针对字符串抽象的精妙的描述.</p>
<h3 id="python-2"><a href="#python-2" class="headerlink" title="python 2"></a>python 2</h3><p>令人遗憾的是,python2中并没有采用这种抽象的做法,Python2中的str实际上是一组字节序列…<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">l=<span class="string">'好个和'</span></div><div class="line">print(len(l))<span class="comment">##输出为9而非三</span></div></pre></td></tr></table></figure></p>
<p>正是因为是字节序列,所以<strong>python也没有限定其编码方式</strong>,如果你的字符编码方式不是ascii(python的默认编码，defaultencoding是ascii),并且输入输出环境选用的又不是你的那种字符编码方式,或者输入输出环境编码方式不同,那么输入输出都会变得混乱无比,因为python事实上只是<strong>不做修改的发布了这些字符序列并用制定的或者默认的编码方式</strong>解释了而已.<br>他们的之间的关系如下:</p>
<p><img src="/images/relation1.jpg" style="width: 460px;"></p>
<p>值得说明的是,其实str也有encode方法,这里python就自动完成了两个步骤:将str 以默认的编码形式(一般为ascii)decode成unicode字符串,将unicode字符串用上面指定的编码形式encode成str</p>
<p>那么摆在程序员面前只有两条路</p>
<ol>
<li>确认你的字符编码和输入输出环境的编码一致也与你编程文件中的默认编码一致.</li>
<li>把你的字符编码decode,到unicode类型字符串.到此时python会帮你自动转换</li>
</ol>
<p>第一种方式<br>例如在文件首部加入# -<em>- coding: utf-8 -</em>-形式,那么在文件中定义的所有字符串都将使用utf-8编码</p>
<p>上面谈到的unicode字符串python2中的另一种字符串类型,事实上这才是py2中的真•字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">l=<span class="string">u'好个和'</span></div><div class="line">print(len(l))<span class="comment">##输出为3而非9</span></div><div class="line"><span class="comment">####</span></div><div class="line">l2=<span class="string">'好个和'</span></div><div class="line">decodedUnicode = l2.decode(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure></p>
<p>使用这个字符串我们又可以当一个幸福的无知者了,上面两种方法都可以得到unicode串.</p>
<p>事情还没完,对于广大非计类工科狗来说,字节序列并不是一无是处,由于更加接触底层,平时许多甚至大部分工作反而是对这些字节序列操作,然而字节序列又和str搅在了一起……..<br>于是python又提供了一个bytearray类型的数组,见名知义,这是一个字节元素数组,以便于操作二进制.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line">l=<span class="string">'aaa'</span></div><div class="line">b=bytearray(l)</div><div class="line">print(l[<span class="number">0</span>])<span class="comment">##输出a</span></div><div class="line">print(b[<span class="number">0</span>])<span class="comment">##输出97</span></div></pre></td></tr></table></figure></p>
<h3 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h3><p>在脑残了整个2.X版本后,python3终于做出了改进:</p>
<blockquote>
<p>文本总是Unicode，由str类型表示，二进制数据则由bytes类型表示。Python 3不会以任和隐式的方式混用str和bytes，正是这使得两者的区分特别清晰。你不能拼接字符串和字节包，也无法在字节包里搜索字符串（反之亦然），也不能将字符串传入参数为字节包的函数（反之亦然）。这是件好事。</p>
</blockquote>
<p>string彻彻底底成为了抽象字符串且指定了编码类型unicode,二进制数据则由bytes类型表示.<br>他们之间的关系是:</p>
<p><img src="/images/relation.png" style="width: 260px;"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####in the shell</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'€20'</span>.encode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">b'\xe2\x82\xac20'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe2\x82\xac20'</span>.decode(<span class="string">'utf-8'</span>)</div><div class="line"><span class="string">'€20'</span></div><div class="line"><span class="comment">###还可以将string转换为指定格式编码的bytes</span></div><div class="line"><span class="comment">###或者将指定格式编码的bytes转为string</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'€20'</span>.encode(<span class="string">'iso-8859-15'</span>)</div><div class="line"><span class="string">b'\xa420'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xa420'</span>.decode(<span class="string">'iso-8859-15'</span>)</div><div class="line"><span class="string">'€20'</span></div></pre></td></tr></table></figure>
<p>简言之,在py3中py2的unicode变成了string,py2的bytearray变为了bytes</p>
<h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><pre><code>## print 不换行输出
</code></pre><p>这又是一个python2与python3的不同之处了<br>在python2中希望用一条print函数输出并不换行的方法是在末尾加一个逗号.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> a,</div></pre></td></tr></table></figure></p>
<p>而在python3中,方法为是将print函数中的end参数置为空,默认为\n<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(a,...,end=<span class="string">''</span>)</div></pre></td></tr></table></figure></p>
<h2 id="argv的第一个参数为脚本名"><a href="#argv的第一个参数为脚本名" class="headerlink" title="argv的第一个参数为脚本名"></a>argv的第一个参数为脚本名</h2><p>如题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</div><div class="line">scriptname,a,...=argv</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Flask-WhooshAlchemy]]></title>
      <url>https://ly11tea.github.io/2016/12/07/%E4%BD%BF%E7%94%A8Flask-WhooshAlchemy/</url>
      <content type="html"><![CDATA[<p>记录使用python插件的一个坑,看这个插件的官方文档,只要求在model.py(定义数据模型的地方)导入模块,在对应表中指定要搜索的栏即可,当时就觉得奇怪,这个模块怎么在后台自动做索引?<br>果然初始化后在后台shell实验时就出现了问题“Query has no attribute ‘whoosh_search” ,google了以后发现这是没有进行初始化,..搜索一番发现插件的github里有关于这个问题标记为bug的issue,但不知道官方文档为何还没有改过来:要在model.py最后加上<br>whooshalchemy.whoosh_index(app, …表名)这样可以做到每次表插入新值的时候都更新一次索引.</p>
<p>问题还没完,由于blog的结构,app变量是无法在model.py访问到的,直接使用from .. import 也不行,因为只有同一个包内才能相对import,之后使用了绝对import,因为sys.path里面包含项目的根目录,一开始的时候将import语句放在文件开头,发现这样会出现相互import的现象,即定义app实例的文件也import了model.py,后来一想python是动态语言不一定要在开头import,所以将import放到文件末尾,问题解决.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最短路径]]></title>
      <url>https://ly11tea.github.io/2016/12/05/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<p>一种最为形象的最短路径问题,就是地图导航问题在这个问题中顶点对应于交叉路口,边对应为公路,边的权重对应于过这条公路的成本,那么最短路径就是从一个顶点到另一个顶点的最低成本的路径.</p>
<p>为了尽可能广泛的描述问题,我们采用加权有向图作为模型,那么一条路径的权重就是,这条路径上所有边的权重和,问题就归结于找到从一个顶点到另一个顶点的最小权重有向路径.在这节我们致力于寻找出这条路径.</p>
<h1 id="最短路径的性质"><a href="#最短路径的性质" class="headerlink" title="最短路径的性质"></a>最短路径的性质</h1><ol>
<li>路径是有向的,很显然我们使用加权有向图作为模型</li>
<li>权重不一定等价于距离</li>
<li>两个顶点之间不一定是可达的</li>
<li>最短的路径不一定是唯一的</li>
</ol>
<p>在这里我们把要求的单点路径问题具体为给出一个顶点s,得到一个最短路径树,这个树中包含着s和其他所有节点,这条树中的每一条路径都是s到这个顶点的最短路径.</p>
<h1 id="加权有向图的数据结构"><a href="#加权有向图的数据结构" class="headerlink" title="加权有向图的数据结构"></a>加权有向图的数据结构</h1><p>我们先来定义加权有向边的数据结构,他和加权无向边大体类似只不过拥有了方向,所以不必再实现either和other方法,边的权重仍然使用double<br>数据类型定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectedEdge</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> v;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> w;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> weight;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DirectedEdge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">double</span> weight)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.v=v;</div><div class="line">		<span class="keyword">this</span>.w=w;</div><div class="line">		<span class="keyword">this</span>.weight=weight;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">from</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> v;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">to</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> w;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">weight</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> weight;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">tostring</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> String.format(<span class="string">"%d-%d:%.2f"</span>, v,w,weight);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们再来看加权有向图,与加权无向图类似我们也使用edge型的bag数据结构来表示邻接表,不同的边只在邻接表中出现一次.我们同时仍然假设图的节点是不会变动的.我们只在其中添加边:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EdgeweightedDigraph</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> V;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> E;</div><div class="line">	<span class="keyword">private</span> Bag&lt;DirectedEdge&gt;[] adj;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EdgeweightedDigraph</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> e)</span></span></div><div class="line">	&#123;</div><div class="line">		V=v;</div><div class="line">		E=e;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</div><div class="line">			adj[i]=<span class="keyword">new</span> Bag&lt;DirectedEdge&gt;();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(DirectedEdge directedEdge)</span></span></div><div class="line">	&#123;</div><div class="line">		adj[directedEdge.from()].add(directedEdge);</div><div class="line">		E++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">V</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> V;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">E</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> E;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Iterable&lt;DirectedEdge&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> adj[v];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt; DirectedEdge&gt;edges(<span class="keyword">int</span> v)</div><div class="line">	&#123;</div><div class="line">		Bag&lt;DirectedEdge&gt;edges=<span class="keyword">new</span> Bag&lt;DirectedEdge&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</div><div class="line">			<span class="keyword">for</span>(DirectedEdge directedEdge:adj[i])</div><div class="line">				edges.add(directedEdge);</div><div class="line">		<span class="keyword">return</span> edges;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="最短路径的数据结构"><a href="#最短路径的数据结构" class="headerlink" title="最短路径的数据结构"></a>最短路径的数据结构</h1><p>我们先来看实现最短路径算法所需要的数据结构,先讨论单个起点s的情况我们首先需要一个directededge类型的edgeto数组,它存储最短路径树中着<strong>指向</strong>对应索引编号节点的边,我们还需要一个存储权重double型的distto[]数组,他存储着从给定起点到对应索引编号节点的路径的权重和,如果不连通则定义为无穷大<br>此外我们定义edgeto[s]=null,distto[s]=0<br>根据上面的结构我们可以很快的实现一些查询类的方法,比如haspathto(),通过查询distto[]的值实现.pathto则返回一个堆栈,相当于反序输出edgeto[]中的值,这在以前已经用过多次了.</p>
<h1 id="最短路径的算法"><a href="#最短路径的算法" class="headerlink" title="最短路径的算法"></a>最短路径的算法</h1><p>首先一开始我们将disto[s]=0,其他节点都设为无穷,随着算法执行他不断地将目前已知的最短路径加入edgeto[]数组和distto[]数组.我们在其中最常用的是边的松弛操作:当我们遇到一条边e:v-&gt;w时,比较若distto[w]&gt;distto[v]+e.weight的时候我们就更新边,这种情况叫做松弛成功,若不是就将当前遍历到的边设为失效.<br>值得一提的是在算法中我们要松弛一个顶点指出的所有边.</p>
<p>要实现算法我们还要一些理论基础:<br>我们首先要明确判断最短路径时的全局条件同松弛一条边时的条件是等价的.</p>
<blockquote>
<p>最短路径的最优性条件:G 为一幅为加权有向图,从 v 到 w 的任意一条边 e. 这些值都满足 distTo[w] &lt;=distTo[v]+e.weight()时,他们是<strong>最短路径的长度</strong>.</p>
</blockquote>
<p>通过这个条件我们立马可以想到一种找出最短路径的通用方法:放松g中的任意边直到不存在有效边为止.</p>
<h2 id="dijkstra算法"><a href="#dijkstra算法" class="headerlink" title="dijkstra算法"></a>dijkstra算法</h2><p>dijkstra算法就使用了上面的方法,找到一个图中的最短路径,它将distto[s]的值初始化为0,其他顶点为正无穷,它将树中distto[]最小的非树顶点指出的所有边放松,并加入树中,如此循环往复.<br>由上面的方法可知我们需要一个最小优先队列,这应当是一个带索引的最小优先队列,我们每次在其中distto[]最小的顶点,并返回其索引<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> alg;</div><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.*;</div><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.MinPQ;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DijkstraSP</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> [ ] distto;</div><div class="line">	<span class="keyword">private</span> DirectedEdge[] edgeto;</div><div class="line">	<span class="keyword">private</span> IndexMinPQ&lt;Double&gt;pq;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DijkstraSP</span><span class="params">(EdgeweightedDigraph digraph,<span class="keyword">int</span> s)</span></span></div><div class="line">	&#123;</div><div class="line">		distto=<span class="keyword">new</span> <span class="keyword">double</span>[digraph.V()];</div><div class="line">		edgeto=<span class="keyword">new</span> DirectedEdge[digraph.V()];</div><div class="line">		pq=<span class="keyword">new</span> IndexMinPQ&lt;&gt;(digraph.V());</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;digraph.V();i++)</div><div class="line">		&#123;</div><div class="line">			distto[i]=Double.POSITIVE_INFINITY;</div><div class="line">		&#125;</div><div class="line">		distto[s]=<span class="number">0</span>;</div><div class="line">		edgeto[s]=<span class="keyword">null</span>;</div><div class="line">		pq.insert(s, <span class="number">0.0</span>);</div><div class="line">		<span class="keyword">while</span>(!pq.isEmpty())</div><div class="line">		&#123;</div><div class="line">			relax(digraph,pq.delMin());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(EdgeweightedDigraph digraph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(DirectedEdge edge:digraph.adj(v))</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> w=edge.to();</div><div class="line">			<span class="keyword">if</span>(distto[w]&gt;distto[v]+edge.weight())</div><div class="line">			&#123;</div><div class="line">				distto[w]=distto[v]+edge.weight();</div><div class="line">				edgeto[w]=edge;</div><div class="line">				<span class="keyword">if</span>(pq.contains(w))</div><div class="line">					pq.changeKey( w,distto[w]);</div><div class="line">				<span class="keyword">else</span> </div><div class="line">					pq.insert(w, distto[w]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">distto</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> distto(v);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haspathto</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!(distto[v] == Double.POSITIVE_INFINITY))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt;DirectedEdge&gt;pathto(<span class="keyword">int</span> w)</div><div class="line">	&#123;</div><div class="line">		Stack&lt;DirectedEdge&gt;edge=<span class="keyword">new</span> Stack&lt;DirectedEdge&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=w;edgeto[i]!=<span class="keyword">null</span>;i=edgeto[i].from())</div><div class="line">		&#123;</div><div class="line">			edge.push(edgeto[i]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> edge;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="无环加权有向图的最短路径方法"><a href="#无环加权有向图的最短路径方法" class="headerlink" title="无环加权有向图的最短路径方法"></a>无环加权有向图的最短路径方法</h2><p>如果加权有向图不含有有向环,那么寻找最短路径的方法可以有一定简化,它可以做到:</p>
<ul>
<li>在线性的时间内解决最短路径问题</li>
<li>处理负权重的边</li>
</ul>
<p>只要将顶点的放松和拓扑排序相结合就能实现,具体方法上与上面的dijistra方法类似,只是放松节点的顺序变为拓扑排序的顺序:我们可以使用之前实现的拓扑排序方法先得到拓扑顺序,然后按照这个顺序放松节点</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AcyclicSP</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> DirectedEdge[] edgeto;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span>[] distto;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">AcyclicSP</span><span class="params">(EdgeweightedDigraph digraph,<span class="keyword">int</span> s)</span></span></div><div class="line">	&#123;</div><div class="line">		edgeto=<span class="keyword">new</span> DirectedEdge[digraph.V()];</div><div class="line">		distto=<span class="keyword">new</span> <span class="keyword">double</span>[digraph.V()];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;digraph.V();i++)</div><div class="line">			distto[i]=Double.POSITIVE_INFINITY;</div><div class="line">		distto[s]=<span class="number">0</span>;</div><div class="line">		edgeto[s]=<span class="keyword">null</span>;</div><div class="line">		Topological topological=<span class="keyword">new</span> Topological(digraph);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i:topological.order())</div><div class="line">			relax(digraph,i);</div><div class="line">		</div><div class="line">	 &#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">relax</span><span class="params">(EdgeweightedDigraph digraph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span>(DirectedEdge directedEdge:digraph.adj(v))</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> w=directedEdge.to();</div><div class="line">			<span class="keyword">if</span>(distto[w]&gt;distto[v]+directedEdge.weight())</div><div class="line">			&#123;</div><div class="line">				distto[w]=distto[v]+directedEdge.weight();</div><div class="line">				edgeto[w]=directedEdge;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">distto</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> distto[v];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haspathto</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(distto[v]!=Double.NEGATIVE_INFINITY)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt;DirectedEdge&gt;pathto(<span class="keyword">int</span> v)</div><div class="line">	&#123;</div><div class="line">		Stack&lt;DirectedEdge&gt;stack=<span class="keyword">new</span> Stack&lt;DirectedEdge&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=v;pathto(i)!=<span class="keyword">null</span>;i=edgeto[i].from())</div><div class="line">			stack.push(edgeto[i]);</div><div class="line">	   <span class="keyword">return</span> stack;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="无环加权有向图对应的最长路径"><a href="#无环加权有向图对应的最长路径" class="headerlink" title="无环加权有向图对应的最长路径"></a>无环加权有向图对应的最长路径</h3><p>先来定义一下加权有向图图最长路径:</p>
<blockquote>
<p>给定一幅加权有向无环图,是否存在从s到v的路径,如果存在,找到最长的那一条.</p>
</blockquote>
<p>其实将上面的寻找最短路径的算法稍作改进,就能实现,我们只要将当前的无环加权有向图复制一份,将边所有的权限改为负值,再使用最短路径算法,找到的就是最长路径.</p>
<p>另一种方案是: 将distto[]数组中初始化为负无穷,同时改变relax函数中等号的方向.</p>
<p>最长路径的思想可以用来解决并行任务调度问题:</p>
<blockquote>
<p>假定一组具有优先级先后限制的任务,在数量不限的并行处理器上如何尽快的完成?</p>
</blockquote>
<p>我们将这种尽快完成任务的问题叫做关键路径,现在我们拥有无数个可以在规定时间内完成任务的处理器,显然为了尽快完成任务,我们要尽可能地(在不违反先后限制的基础上)将耗时长的任务优先安排执行.</p>
<p>我们将边表示为任务,边的权重作为任务耗费时间,同时将边的先后限制表示为从前任务的结束顶点指向后任务的开始顶点的零权重边.同时还定义一个总的开始点和结束点,总的开始点有若干个指向每一个任务开始节点的0权重的边,每一个任务的结束节点都有一个0权重的边指向总的结束节点.<br>这样做是为了便于表示每个任务的开始时间—从总的开始点指向这个任务的起始点和总的消耗时间–从总的开始点指向总的结束点的最长路径</p>
<p>我们可以使用最长路径实现以上方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CPM</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> N=StdIn.readInt();</div><div class="line">		StdIn.readLine();</div><div class="line">		EdgeWeightedDigraph digraph=<span class="keyword">new</span> EdgeWeightedDigraph(<span class="number">2</span>*N+<span class="number">2</span>);</div><div class="line">		<span class="keyword">int</span> s=<span class="number">2</span>*N;</div><div class="line">		<span class="keyword">int</span> t=<span class="number">2</span>*N+<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</div><div class="line">		&#123;</div><div class="line">			String[] a=StdIn.readLine().split(<span class="string">"//s+"</span>);  <span class="comment">//正则表达式,匹配任意空白字符</span></div><div class="line">			digraph.addEdge(<span class="keyword">new</span> DirectedEdge(i, <span class="number">2</span>*i,Double.parseDouble(a[<span class="number">0</span>])));</div><div class="line">			digraph.addEdge(<span class="keyword">new</span> DirectedEdge(s, i, <span class="number">0</span>));</div><div class="line">			digraph.addEdge(<span class="keyword">new</span> DirectedEdge(i, t, <span class="number">0</span>));</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;a.length;j++)</div><div class="line">			&#123;</div><div class="line">				digraph.addEdge(<span class="keyword">new</span> DirectedEdge(i , Integer.parseInt(a[i]) , <span class="number">0</span>));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		AcyclicLP acyclicLP=<span class="keyword">new</span> AcyclicLP(digraph, s);</div><div class="line">		</div><div class="line">		StdOut.println(<span class="string">"各任务开始时间"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s;i++)</div><div class="line">		&#123;</div><div class="line">			StdOut.printf(<span class="string">"%4d:%5.1f "</span>, i,acyclicLP.distTo(i));</div><div class="line">		&#125;</div><div class="line">		StdOut.printf(<span class="string">"总时间 %5.1f"</span>, acyclicLP.distTo(t));</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[flask-images]]></title>
      <url>https://ly11tea.github.io/2016/11/30/flask-images/</url>
      <content type="html"><![CDATA[<p>flask-image 是一个基于python pillow库的插件.它能够提供一个特定名称的路由和一个函数,能够接受一个指向url的图像链接,或者本地图像文件,将其转换为图像格式.<br>函数原型:<br>resized_img_src(filename, **kw)<br>在模板文件中可以直接使用,在python文件中需要在首部添加<code>from flask_images import resized_img_src</code><br>具体的参数主要是用来调用相对应的Pillow的接口,链接如下:<a href="https://mikeboers.github.io/Flask-Images/#usage" target="_blank" rel="external">usage</a></p>
<p> 还可以使用images路由并向其传参得到同样的结果<br>值得注意的是,当使用本地图像时必须要设置IMAGES_PATH参数,这是一个字符串list,所以可以包括不止一个路径,如果不设置的话,就算填完整地路径插件也找不到图片进行处理<br>一般来说可以设置为:IMAGES_PATH = [‘static/‘]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于HTTP的POST的两种Conten-type]]></title>
      <url>https://ly11tea.github.io/2016/11/28/%E5%85%B3%E4%BA%8EHTTP%E7%9A%84POST%E7%9A%84%E4%B8%A4%E7%A7%8DConten-type/</url>
      <content type="html"><![CDATA[<p>在给一个flask博客的表单加filefield,以实现上传自定义头像的功能的时候,发现一旦上传文件时会出现:</p>
<blockquote>
<p>you tried to access the file “avatar” in the request.files dictionary but it does not exist. The mimetype for the request is “application/x-www-form-urlencoded” instead of “multipart/form-data” which means that no file contents were transmitted. To fix this error you should provide enctype=”multipart/form-data” in your form.</p>
</blockquote>
<p>其实错误信息已经说得很清楚了,需要改变表单的enctype 编码类型,下面描述一下这两个类型的概念</p>
<p>enctype类型说明<br>application/x-www-form-urlencoded:<br>当action为<strong>get</strong>时候，浏览器用x-www-form-urlencoded的编码方式把form数据转换成一个字串（name1=value1&amp;name2=value2…），然后把这个字串append到url后面，用?分割，加载这个新的url。 当action为<strong>post</strong>时候，浏览器把form数据封装到http <strong>body</strong>中，然后发送到server。 </p>
<p>multipart/form-data:<br>浏览器会把整个表单以控件为单位分割，并为每个部分加上Content-Disposition(form-data或者file),Content-Type(默认为text/plain),name(控件name)等信息，并加上分割符(boundary)。<br>类似于:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">POST /t2/upload.do HTTP/1.1</div><div class="line"> </div><div class="line">User-Agent: SOHUWapRebot</div><div class="line"> </div><div class="line">Accept-Language: zh-cn,zh;q=0.5</div><div class="line"> </div><div class="line">Accept-Charset: GBK,utf-8;q=0.7,*;q=0.7</div><div class="line"> </div><div class="line">Connection: keep-alive</div><div class="line"> </div><div class="line">Content-Length: 60408</div><div class="line"> </div><div class="line">Content-Type:multipart/form-data; boundary=ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</div><div class="line"> </div><div class="line">Host: w.sohu.com</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</div><div class="line"> </div><div class="line">Content-Disposition: form-data;name=&quot;desc&quot;</div><div class="line"> </div><div class="line">Content-Type: text/plain; charset=UTF-8</div><div class="line"> </div><div class="line">Content-Transfer-Encoding: 8bit</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line">[......][......][......][......]...........................</div><div class="line"> </div><div class="line">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</div><div class="line"> </div><div class="line">Content-Disposition: form-data;name=&quot;pic&quot;; filename=&quot;photo.jpg&quot;</div><div class="line"> </div><div class="line">Content-Type: application/octet-stream</div><div class="line"></div><div class="line"></div><div class="line">Content-Transfer-Encoding: binary</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line">[图片二进制数据]</div><div class="line"> </div><div class="line">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--</div></pre></td></tr></table></figure>
<p>可以从上面看出这里的boundary=ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</p>
<p>那么只要将模板中将表单渲染成对应编码类型的即可,此时我们要找到wtf.quick_form的文档<a href="https://pythonhosted.org/Flask-Bootstrap/forms.html" target="_blank" rel="external">文档链接</a></p>
<p>可知参数为enctype=”multipart/form-data”</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最小生成树]]></title>
      <url>https://ly11tea.github.io/2016/11/23/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>要了解最小生成树,我们先来了解一下加权图的概念</p>
<blockquote>
<p>加权图是一种为每条边关联一个权位或是成本的图模型</p>
</blockquote>
<p>在加权无向图的基础上,我们给出生成树和最小生成树的定义:</p>
<blockquote>
<p>图的生成树是它的一棵含有其所有顶点的无环连通子图<br>一幅加权无向图的最小生成树( MST ) 是它的一棵权值(树中所有边的权值之和)最小的生成树</p>
</blockquote>
<p>显然可以从定义处得出只有<strong>连通图</strong>才有<strong>最小生成树</strong>,如果这个图是非连通图,那么我们只能得出其<strong>连通分量</strong>的最小生成树,以组成最小生成森林.</p>
<p>同时为了讨论的简便,我们假设加权图的每条边的权值互不相同.</p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>为了找出最小生成树我们需要定义一种特殊的切分图的方式:</p>
<blockquote>
<p>图的一种<strong>切分</strong>是将图的所有顶点分为两个非空且不重复的两个集合。 </p>
</blockquote>
<p>定义加权图中一条连接两个属于不同集合的顶点的<strong>边</strong>是<strong>横切边</strong>。</p>
<p>由此我们给出定理:在一幅加权图中，给定任意的切分，它的横切边中的<strong>权重最小</strong>者必然属于图的最小生成树。</p>
<p>由上面的定理我们自然能够想到,我们可以通过对加权无向图的不断切分找出最小生成树,由这中思想我们导出一种生成最小生成树的贪心算法.</p>
<blockquote>
<p>下面这种方法会将含有 V个顶点的任意加权连通图中属于最小生成树的边标记为黑色:初始状态下所有边均为灰色，找到<strong>一种切分</strong>，它产生的横切边均不为<br><strong>黑色</strong>。将它<strong>权重最小的横切边标记为黑色</strong>。反复，直到标记了 V-l 条黑色边为止。</p>
</blockquote>
<p>下面证明上面的结论:先假设所有边的权重不相同,根据切分定理首先按照上面方法标黑的所有边都在最小生成树中,但只要这种边的数量小于V-1,那么就必然还存在着不产生黑色横切边的切分(因为图是连通的,所以必然存在着一个最小生成树,所以必然还存在着未被标记出来的最小横切边,所以必然存在着不为最小横切边的切分),只要找到了这V-1条切分,就找到了最小生成树</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>首先要更新的必然是边的数据结构,要在每一条边上引入权重的表示方法.<br>为此我们使用一种新的实现方式,定义一种表示边的对象Edge;<br>为了便于以后的权重比较操作,我们在Edge上面实现了Comparable接口并定义了CompareTo方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Edge</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span>  <span class="keyword">int</span> v;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> w;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> weight;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">double</span> weight)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.v=v;</div><div class="line">		<span class="keyword">this</span>.w=w;</div><div class="line">		<span class="keyword">this</span>.weight=weight;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">weight</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.weight;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">either</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.v;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">other</span><span class="params">(<span class="keyword">int</span> number)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(v==number) <span class="keyword">return</span> w;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(w==number) <span class="keyword">return</span> v;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"inconsisten edge"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Edge that)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.weight&gt;that.weight)</div><div class="line">			<span class="keyword">return</span> +<span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.weight&lt;that.weight)</div><div class="line">			<span class="keyword">return</span> +<span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">tostring</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> String.format(<span class="string">"%d-%d : .2%f"</span>, <span class="keyword">this</span>.v,<span class="keyword">this</span>.w,<span class="keyword">this</span>.weight);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个边的定义的基础上我们实现带权重的无向图的实现,总的来说和无向图的实现并没有太大不同,但这一次邻接表的数据类型变为了背包型的数组,这是为了在其中存储Edge对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EdgeWeightedGraph</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> V;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> E;</div><div class="line">	<span class="keyword">private</span> Bag&lt;Edge&gt;[] adj;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EdgeWeightedGraph</span><span class="params">(<span class="keyword">int</span> V,<span class="keyword">int</span> E)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.V=V;</div><div class="line">		<span class="keyword">this</span>.E=E;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</div><div class="line">		&#123;</div><div class="line">			adj[i]=(Bag&lt;Edge&gt;)<span class="keyword">new</span> Bag();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">v</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> V;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">e</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> E;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(Edge edge)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> v=edge.either();</div><div class="line">		<span class="keyword">int</span> w=edge.other(v);</div><div class="line">		adj[v].add(edge);</div><div class="line">		adj[w].add(edge);</div><div class="line">		E++;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Iterable&lt;Edge&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> adj(v);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Iterable&lt;Edge&gt; <span class="title">edges</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		Bag&lt;Edge&gt;edges=<span class="keyword">new</span> Bag&lt;Edge&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">0</span>;v&lt;V;v++)</div><div class="line">			<span class="keyword">for</span>(Edge e:adj[v])</div><div class="line">				<span class="keyword">if</span>(e.other(v)&gt;v)</div><div class="line">					edges.add(e);</div><div class="line">		<span class="keyword">return</span> edges;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面介绍两种得到最小生成树的算法</p>
<h1 id="prim-算法"><a href="#prim-算法" class="headerlink" title="prim 算法"></a>prim 算法</h1><p>每一步都会为一棵生长中的树添加一条边,这棵树一开始只有一个顶点,然后向其中添加v-1条边,每一次添加的都是连接树中的顶点和不在树中的顶点的权重最少的的边.<br>可以发现这个算法的核心问题是每一次如何找到那个权重最小的边呢?</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>要回答这个问题,我们需要设计prim算法用到的数据结构</p>
<ol>
<li>一个布尔值的数组,我们用它来标记一个顶点是否在这个树中.</li>
<li>一个上面带权重的边的类型的最小队列,用来存储所有横切边的权重,并得出最小的那一条</li>
<li>一个队列,用来记录在最小生成树中的边</li>
</ol>
<p>要找到那个权重最小的边,首先我们要维护<strong>一条横切边的优先队列</strong>,当一个新的顶点加入后,我们需要向<strong>其中添加所有树外顶点与新顶点相连的边</strong>,因为他们是新的横切边.此外原有的在优先队列中的横切边有<strong>可能失效</strong>(添加他们进去的时候新顶点还不在树中),我们现在使用”懒惰”的方法,在要将新节点加入树的时候(即选定最小权重横切边)时再计算是否是无效的边</p>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LazyPrimMst</span><span class="params">(EdgeWeightedGraph graph)</span></span></div><div class="line">	&#123;</div><div class="line">		pq=<span class="keyword">new</span> MinPQ&lt;Edge&gt;();</div><div class="line">		mst=<span class="keyword">new</span> Queue&lt;Edge&gt;();</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span> [graph.v()];	</div><div class="line">		</div><div class="line">		visit(graph, <span class="number">0</span>);</div><div class="line">		<span class="keyword">while</span>(!pq.isEmpty())</div><div class="line">		&#123;</div><div class="line">			Edge edge=pq.delMin();</div><div class="line">			<span class="keyword">int</span> v=edge.either();</div><div class="line">			<span class="keyword">int</span> w=edge.other(v);</div><div class="line">			<span class="keyword">if</span>(marked[v]&amp;&amp;marked[w])</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			mst.enqueue(edge);</div><div class="line">			<span class="keyword">if</span>(!marked[v])</div><div class="line">				visit(graph, v);</div><div class="line">			<span class="keyword">if</span>(!marked[w])</div><div class="line">				visit(graph, w);</div><div class="line">			</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(EdgeWeightedGraph graph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(Edge e:graph.adj(v))</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (marked[e.other(v)]!=<span class="keyword">true</span>)</div><div class="line">				pq.insert(e);	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到上述代码是在构造函数中实现了找出最小生成树的操作,代码中的visit方法将新顶点加入树中,并加入新的边到优先队列中</p>
<h2 id="另一种实现"><a href="#另一种实现" class="headerlink" title="另一种实现"></a>另一种实现</h2><p>回想上面的实现,我们其实在优先队列中存储了许多不必要的边信息,其实我们关心的<strong>只是树顶点连接非树顶点中权重最小的那个边</strong>,也就是说每一次有<strong>新顶点加入时</strong>我们<strong>只关心</strong>每一个<strong>树外的顶点是否离当前的树更近</strong>了?<br>结论是我们不必在优先队列中保存<strong>每一个</strong>树外顶点<strong>所有</strong>的与树内顶点相连的边,我们只需保存每个树外顶点最小的那一条,在每一次加入新节点时,对比是否有更小的边出现就可以了</p>
<p>所以我们引入两个数组:<br>edge数组edgeto[],若w是树外的顶点,edgeto[w]就是一条连接w与树内顶点权值最小的边.<br>double数组distto[],是上面相对应的索引的边的权重,初始时刻数组值<strong>全为正无穷</strong></p>
<p>每一次向树中加入新顶点V时,都会在邻接表中搜索每一个相连的顶点w,比较这些边同disto[w]的权值,若更小则更新edgeto,distto,和优先队列中的相应数据.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimMST</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> marked[];</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> disto[];</div><div class="line">	<span class="keyword">private</span> Edge edgeto[];</div><div class="line">	<span class="keyword">private</span> IndexMinPQ&lt;Double&gt; pq;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PrimMST</span><span class="params">(EdgeWeightedGraph graph)</span></span></div><div class="line">	&#123;</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span> [graph.v()];</div><div class="line">		disto=<span class="keyword">new</span> <span class="keyword">double</span> [graph.v()];</div><div class="line">		edgeto=<span class="keyword">new</span> Edge [graph.v()];</div><div class="line">		pq=<span class="keyword">new</span> IndexMinPQ&lt;Double&gt;(graph.v());</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.v();i++)</div><div class="line">			disto[i]=Double.POSITIVE_INFINITY;</div><div class="line">		disto[<span class="number">0</span>]=<span class="number">0.00</span>;</div><div class="line">		pq.insert(<span class="number">0</span>, disto[<span class="number">0</span>]);</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(!pq.isEmpty())</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> v=pq.delMin();</div><div class="line">			visit(graph,v);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(EdgeWeightedGraph graph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(Edge edge:graph.adj(v))</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> w=edge.other(v);</div><div class="line">			<span class="keyword">if</span>(marked[w])</div><div class="line">				<span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(disto[w]&gt;edge.weight())</div><div class="line">			&#123;</div><div class="line">				edgeto[w]=edge;</div><div class="line">				disto[w]=edge.weight();</div><div class="line">				<span class="keyword">if</span>(pq.contains(w))</div><div class="line">					pq.changeKey(w, disto[w]);</div><div class="line">				<span class="keyword">else</span> pq.insert(w, disto[w]);</div><div class="line">				</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Krustal-算法"><a href="#Krustal-算法" class="headerlink" title="Krustal 算法"></a>Krustal 算法</h1><p>krustal算法的基本思想是按照边的权重大小顺序处理每一个边,将边加入当前的树中,但要保证<strong>当前加入的边不会让最小生成树变成环</strong>,直到这个树拥有V-1个节点为止.其整个过程相当于将V个节点组成的森林连接成最小生成树</p>
<p>krustal 算法的实现较为简单,我们使用优先队列对边的权重进行排序,使用unionfind识别可能存在的环的边,用队列保存最小生成树的边.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KruskalMST</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Queue&lt;Edge&gt;mst;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">double</span> weight;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">KruskalMST</span><span class="params">(EdgeWeightedGraph graph)</span></span></div><div class="line">	&#123;</div><div class="line">		weight=<span class="number">0</span>;</div><div class="line">		mst=<span class="keyword">new</span> Queue&lt;Edge&gt;();</div><div class="line">		MinPQ&lt;Edge&gt;pq=<span class="keyword">new</span> MinPQ&lt;Edge&gt;();</div><div class="line">		<span class="keyword">for</span>(Edge edge:graph.edges())</div><div class="line">			pq.insert(edge);</div><div class="line">		UF uf=<span class="keyword">new</span> UF(graph.v());</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(!pq.isEmpty()&amp;&amp;mst.size()&lt;=graph.v()-<span class="number">1</span>)</div><div class="line">		&#123;</div><div class="line">			Edge edge=pq.delMin();</div><div class="line">			<span class="keyword">int</span> v=edge.either();</div><div class="line">			<span class="keyword">int</span> w=edge.other(v);</div><div class="line">			<span class="keyword">if</span>(!uf.connected(v, w))</div><div class="line">			&#123;</div><div class="line">				uf.union(v, w);</div><div class="line">				mst.enqueue(edge);</div><div class="line">				weight=weight+edge.weight();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> Iterable&lt;Edge&gt;edges()</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> mst;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">weight</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> weight;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[有向图]]></title>
      <url>https://ly11tea.github.io/2016/11/22/%E6%9C%89%E5%90%91%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h1 id="有向图的概念"><a href="#有向图的概念" class="headerlink" title="有向图的概念"></a>有向图的概念</h1><p>有向图的一个突出特点，<strong>边是单向</strong>的:每条边所连接的<strong>两个顶点都是一个有序对</strong>.它们的<strong>邻接性是单向</strong>的<br>下面给出有向图的定义:</p>
<blockquote>
<p>一幅有方向性的图(或有向图)是由一组顶点和一组有方向的边组成的，每条有方向的边都连接着有序的一对顶点</p>
</blockquote>
<a id="more"></a> 
<p>还有一些由此引申的定义:<br>一个顶点的<strong>出度</strong>为自该顶点指出的边的总数;<br>一个班点的<strong>入度</strong>为指向该顶点的边的总数<br>一条有向边的<strong>第一个</strong>顶点称为它的头，<strong>第二个</strong>顶点则被称为它的尾<br>有向路径由一系列顶点组成，对于其中的每个顶点都存在一条有向边从它指向序列中的下一个顶点<br>有向环在为一条至少含有一条边且起点和终点相同的有向路径。<br>简单有向环是一条(除了起点和终点必须相同之外)不含有重复的顶点和边的环<br>路径或者环的长度即为其中所包含的边数</p>
<h1 id="有向图的数据表示"><a href="#有向图的数据表示" class="headerlink" title="有向图的数据表示"></a>有向图的数据表示</h1><p>可能让人感到讶异,有向图的数据表示和无向图几乎是一模一样的.在无向图中V到W连接,就意味着v的邻接表中有W,W的邻接表中有V,而在有向图中,仅仅意味着v的邻接表中有W.即连接不具有<strong>对称性</strong><br>还有不同的是,数据表示中要实现一个reverse方法,这个方法返回一个有向图所有边反向的副本,这个副本反向图的邻接表可以表示<strong>指向某个顶点的所有边</strong>,而这个有向图本身的邻接表自然表示从某个顶点指出的所有边.</p>
<p>为了方便起见,定义一下有向图构造函数的输入格式<br>v w<br>代表由V指向W的有向边<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Digraph</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> V;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> E;</div><div class="line">	<span class="keyword">private</span> Bag&lt;Integer&gt;adj[];</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Digraph</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.V=v;</div><div class="line">		<span class="keyword">this</span>.E=<span class="number">0</span>;</div><div class="line">		adj=(Bag&lt;Integer&gt;[])<span class="keyword">new</span> Bag[<span class="keyword">this</span>.V];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.V;i++)</div><div class="line">			adj[i]=<span class="keyword">new</span> Bag&lt;Integer&gt;();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Digraph</span><span class="params">(In in)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>(in.readInt());</div><div class="line">		E=in.readInt();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E;i++)</div><div class="line">		&#123; </div><div class="line">			<span class="keyword">int</span> v=in.readInt();</div><div class="line">			<span class="keyword">int</span> w=in.readInt();</div><div class="line">			AddEdge(v, w);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">V</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.V;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">E</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.E;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w )</span></span></div><div class="line">	&#123;</div><div class="line">		adj[v].add(w);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt;Integer&gt;adj(<span class="keyword">int</span> v)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> adj[v];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Digraph <span class="title">reverse</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		Digraph newgraph=<span class="keyword">new</span> Digraph(V);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> w:adj[i])</div><div class="line">				newgraph.AddEdge(w, i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> newgraph;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="有向图的可达性"><a href="#有向图的可达性" class="headerlink" title="有向图的可达性"></a>有向图的可达性</h1><p>先来明确可达性的定义<br>单点可达性:给定一幅有向图和一个起点S,回答”<strong>是否存在一条从 s到达给定顶点 v 的有向路径</strong>?<br>多点可达性:多点可达性给定一幅有向图和顶点的集合(<strong>即将这个集合作为起点集合</strong>)，回答是否存在一条从给定的起点集合到达给定顶点v的有向路径?</p>
<p>对于判断可达性的问题,我们自然而然的想到了使用深度优先搜索的方式,搜索有向图.有向图的深度优先搜索方法同无向图类似,但是这时需要注意边的方向性,不过由于我们在进行数据定义时,<strong>adj[]表示从每个顶点指出的所有边</strong>,所以在代码上也不需要特别修改:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectedDFS</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> marked[];</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DirectedDFS</span><span class="params">(Digraph graph,<span class="keyword">int</span> s)</span></span></div><div class="line">	&#123;</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span> [graph.V()];</div><div class="line">		dfs(graph,s);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DirectedDFS</span><span class="params">(Digraph graph,Iterable&lt;Integer&gt;sources)</span></span></div><div class="line">	&#123;</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span>[graph.V()];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> v:sources)</div><div class="line">			<span class="keyword">if</span>(!marked[v])</div><div class="line">				dfs(graph, v);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Digraph graph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> w:graph.adj(v))</div><div class="line">			dfs(graph,w);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> marked[v];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		In in=<span class="keyword">new</span> In(args[<span class="number">0</span>]);</div><div class="line">		Digraph dgraph=<span class="keyword">new</span> Digraph(in);</div><div class="line">		Bag&lt;Integer&gt;argbag=<span class="keyword">new</span> Bag&lt;Integer&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;args.length;i++)</div><div class="line">			argbag.add(Integer.parseInt(args[<span class="number">1</span>]));</div><div class="line">		DirectedDFS directedDFS=<span class="keyword">new</span> DirectedDFS(dgraph, argbag);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;dgraph.V();i++)</div><div class="line">			<span class="keyword">if</span>(directedDFS.connected(i))</div><div class="line">				StdOut.print(i+<span class="string">"    "</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>多点可达性可以被应用在内存管理中,一个顶点代表一个对象,从一个点(对象)指向另一个点(对象)的边代表引用.在某个特定的时刻,总有一些点对象能被访问,一些对象不能被访问.这些能够访问的对象<strong>可达的点(对象)</strong>,应当予以保留,与此同时不可达的点(对象)应当被回收以释放空间.</p>
<h1 id="环和有向无环图"><a href="#环和有向无环图" class="headerlink" title="环和有向无环图"></a>环和有向无环图</h1><p>有时我们必须在有向图中找到有向环,调度问题是一个典型的例子:<br>在调度问题中较为常见的问题就是优先级问题,即哪些任务必须在哪些任务之前完成.</p>
<h2 id="优先级限制下的任务调度问题"><a href="#优先级限制下的任务调度问题" class="headerlink" title="优先级限制下的任务调度问题"></a>优先级限制下的任务调度问题</h2><p>我们可以给出优先级限制下的调度问题的精确描述</p>
<blockquote>
<p>给定一组需要完成的任务,一组关于任务完成的先后次序的优先级顺序,如何在满足所有条件的前提下完成任务?</p>
</blockquote>
<p>对于这样的问题,我们可以画出一张有向图,其中顶点对应任务,有向边对应优先级顺序.然后为了解决优先级排序问题,我们可以等价的解决<strong>拓扑排序</strong>问题,即:</p>
<blockquote>
<p>给定一幅有向图，将所有的顶点排序.使得<strong>所有的有向边均从排在前面的元素指向排在后面的元素</strong></p>
</blockquote>
<p>但是如果画出的这幅图中,a节点指向b,b指向c,c又指向了a,即出现了有向环,那么是不可能完成拓扑排序的,那么拓扑排序的首要问题是判断一个图是否存在有向环?<br>那么如何找到有向环呢?<br>回想在无向图中我们如何寻找一个起点开始的路径?我们使用深度优先搜索递归(即隐式地使用了堆栈)记录下了一整条连通的路径,在使用递归时这个堆栈上的节点值是不可见,然而我们可以在<strong>每个函数的开头手动</strong>的标记节点<strong>入栈</strong>,在函数的<strong>结尾**</strong>手动标记节点<strong>**出栈</strong>.这样就能得到当前在栈上的节点列表,如果<strong>一个节点二次入栈</strong>,很显然存在有向环.同时在出现有向环后,我们可以通过堆栈,将edgeto[]数组存储的环链逆序输出,以存储有向环.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Directedcycle</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span>[]marked;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span>[]onstack;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> []edgeto;</div><div class="line">	<span class="keyword">private</span> Stack&lt;Integer&gt;cycle;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Directedcycle</span><span class="params">(Digraph graph)</span></span></div><div class="line">	&#123;</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span>[graph.V()];</div><div class="line">		onstack=<span class="keyword">new</span> <span class="keyword">boolean</span> [graph.V()];</div><div class="line">		edgeto=<span class="keyword">new</span> <span class="keyword">int</span>[graph.V()];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.V();i++)</div><div class="line">			<span class="keyword">if</span>(!marked[i])</div><div class="line">				dfs(graph,i);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Digraph digraph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		onstack[v]=<span class="keyword">true</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> w: digraph.adj(v) )</div><div class="line">		&#123;</div><div class="line">				<span class="keyword">if</span>(<span class="keyword">this</span>.hascycle()) <span class="keyword">return</span>;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(!marked[w])</div><div class="line">				&#123;</div><div class="line">					edgeto[w]=v;</div><div class="line">					dfs(digraph, w);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(onstack[w])</div><div class="line">				&#123;</div><div class="line">					cycle=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">					<span class="keyword">for</span>(<span class="keyword">int</span> i=v;i!=w;i=edgeto[i])</div><div class="line">						cycle.push(i);</div><div class="line">					cycle.push(w);</div><div class="line">					cycle.push(v);</div><div class="line">				&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		onstack[v]=<span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hascycle</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> cycle!=<span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt;Integer&gt;cycle()</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> cycle();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拓扑排序的实现"><a href="#拓扑排序的实现" class="headerlink" title="拓扑排序的实现"></a>拓扑排序的实现</h3><p>在实现拓扑排序之前,我们先来看看基于深度优先搜索的顶点排序.<br>深度优先搜索的一个突出特点是只会访问图中的每一个节点一次,如果将dfs中的参数在某个位置(递归调用前或递归调用后)以某种数据结构(队列或堆栈)保存,我们可以得到下面三种顺序:</p>
<ul>
<li>前序:在递归调用之前将顶点加入队列</li>
<li>后续:在递归调用之后将顶点加入队列</li>
<li>逆后续:在递归调用之后将顶点加入堆栈</li>
</ul>
<p>根据这样的描述我们不难写出代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthFirstOrder</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> marked[];</div><div class="line">	<span class="keyword">private</span> Queue&lt;Integer&gt;pre;</div><div class="line">	<span class="keyword">private</span> Queue&lt;Integer&gt;post;</div><div class="line">	<span class="keyword">private</span> Stack&lt;Integer&gt;reversepost;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DepthFirstOrder</span><span class="params">(Digraph graph)</span></span></div><div class="line">	&#123;</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span>[graph.V()];</div><div class="line">		pre=<span class="keyword">new</span> Queue&lt;Integer&gt;();</div><div class="line">		post=<span class="keyword">new</span> Queue&lt;Integer&gt;();</div><div class="line">		reversepost=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.V();i++)</div><div class="line">			<span class="keyword">if</span> (!marked[i])</div><div class="line">			&#123;</div><div class="line">				dfs(graph,i);</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Digraph graph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		pre.enqueue(v);</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> w:graph.adj(v))</div><div class="line">			<span class="keyword">if</span>(!marked[w])</div><div class="line">				dfs(graph, w);</div><div class="line">		post.enqueue(v);</div><div class="line">		reversepost.push(v);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt;Integer&gt;pre()</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> pre();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> Iterable&lt;Integer&gt;post()</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> post();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt;Integer&gt;reversepost()</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> reversepost();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面我们来证明这其中<strong>逆后序的顺序</strong>就是<strong>拓扑排序的顺序</strong>:<br>对于任意边 v → W. 在调用 dfs(v) 时，下面三种情况必有其一成立:</p>
<ul>
<li>dfs(w) 已经被调用过并且已经返回了,此时w自然已经被标记</li>
<li>dfs(w)没有被调用,那么那么接下来dfs(v)函数会间接或直接地调用dfs(w),并且由递归的性质得<strong>dfs(w)必然将在dfs(v)函数返回之前就返回</strong></li>
<li>dfs(w)已经被调用但还没有被返回,这种情况在有向无环图中是不可能出现的,因为这样就意味着在调用dfs(v)之前就调用过dfs(w),根据约当链的性质就必然存在着w-&gt;v的边,那么就成为了有环图</li>
</ul>
<p>了解到了第三点不可能,我们回看前两点,前两点的共同点是dfs(w)都在dfs(v)之前完成,那么后续排列中w必然在v之前,而逆后序中v必然在w之前.也即在逆后序序列中每一条边都由前一个节点指向后一个节点.<br>那么,我们只需要调用我们之前写的逆后序方法即可实现拓扑排序:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToPoLogical</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Iterable&lt;Integer&gt;order;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ToPoLogical</span><span class="params">(Digraph digraph)</span></span></div><div class="line">	&#123;</div><div class="line">		Directedcycle directedCycle=<span class="keyword">new</span> Directedcycle(digraph);</div><div class="line">		<span class="keyword">if</span>(!directedCycle.hascycle())</div><div class="line">		&#123;</div><div class="line">			DepthFirstOrder depthFirstOrder=<span class="keyword">new</span> DepthFirstOrder(digraph);</div><div class="line">			order=depthFirstOrder.reversepost();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt;Integer&gt;order()</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> order;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDAG</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> order!=<span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		String filename=args[<span class="number">0</span>];</div><div class="line">		String seperator=args[<span class="number">1</span>];</div><div class="line">		SymbolDigraph symbolDigraph=<span class="keyword">new</span> SymbolDigraph(filename,seperator);</div><div class="line">		ToPoLogical toPoLogical=<span class="keyword">new</span> ToPoLogical(symbolDigraph.G());</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i:toPoLogical.order())</div><div class="line">			StdOut.print(symbolDigraph.name(i));</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<h1 id="有向图的强连通性"><a href="#有向图的强连通性" class="headerlink" title="有向图的强连通性"></a>有向图的强连通性</h1><p>强连通性:如果一个有向图的两个节点相互可达,那么就称这两个图为强连通的.<br>自然地,两个顶点是强连通的当且仅当它们都在一个普通的有向环中</p>
<p>有向图的强连通性是顶点之间的平衡关系,即具有:<br>自反性:任意顶点 v 都和自己是强连通的<br>对称性:如果 v 和 w是强连通的，那么 w 和v 也是强连通的<br>传递性:如果 v 和 w是强连通 的,w 和 x 也是强连通的，那<br>么 v 和 x 也是强联通的</p>
<p>使用强连通性可以将节点化成一个个相互均为强连通的最大子集,我们把这样的子集叫做强连通分量,显然一个强连通图可能含有1–v(顶点个数)个强连通分量,对于强连通图来说只有一个强连通分量,对于一个有向无环图来说有v个强连通分量.</p>
<p>我们在无向图中计算连通分量时使用了深度优先搜索,而在有向图中我们仍然可以利用它,但要做如下的修改:</p>
<ol>
<li>对于一幅给定的有向图G我们首先使用<strong>深度优先排序</strong>的<strong>逆后序顺序</strong>对G的<strong>反向图</strong>进行排序.</li>
<li>在G中进行深度优先搜索,但要按照从1得到的顺序进行而非正常的顺序</li>
<li>在构造函数中,所有在同一个dfs()调用中被访问的顶点都在同一个强连通分量中,通过以顶点序号为下标的一维整型数组记录他们.</li>
</ol>
<p>下面我们来证明这个算法步骤:<br>我们先来证明每一个和S强连通的顶点V都能够在<strong>构造函数中</strong> dfs(G,S)中被访问到,首先这两个节点是强连通的,即一定存在这从S到V的路径.那么在dfs(G,S)中没有访问到V的唯一可能就是V节点之前已经被访问了,然而由于也存在由V到S的路径,所以访问V的同时也必然访问到S,那么就根本不存在会在构造函数中调用dfs(G,S)这个说法了.所以矛盾,故可知每一个和S强连通的顶点V都能够在<strong>构造函数中</strong> dfs(G,S)中被访问到</p>
<p>其次我们再来证明在<strong>构造函数中</strong> dfs(G,S)被访问到的<strong>任意顶点V</strong>都与S是强连通的<br>首先能在dfs(G,S)中访问到V必然意味着有从S到V的路径<br>所以我们主要是要证明必然存在一条从V到S的路径,这就等价于证明在G的<strong>反向图</strong>中存在一条从S到V的路径:<br>我们进行的是以G的反向图的逆后序排序为顺序的深度优先搜索,逆后序的顺序是dfs搜索结束的从最迟到最早的顺序,这也就意味着dfs(G反向图,v)在dfs(G反向图,s)前面结束:<br>那么就只剩下了两种情况:<br>调用dfs(G,V)在调用dfs(G,S)之前,那么他也只可能在调用dfs(G,S)之前结束,那<strong>么反向图中没有从V到S路径</strong>,那就意味着图中没有从S到V路径,显然矛盾.<br> 那么只剩下第二种可能:dfs(G,V)调用在dfs(G,S)之后,这种情况证明了<strong>反向图中有从S到V的路径</strong></p>
<p> 所以命题得证:<br> 根据之前的算法描述,不难写出程序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KosarajuSCC</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> ismarked[];</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id[];</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">KosarajuSCC</span><span class="params">(Digraph digraph)</span></span></div><div class="line">	&#123;</div><div class="line">		count=<span class="number">0</span>;</div><div class="line">		ismarked=<span class="keyword">new</span> <span class="keyword">boolean</span> [digraph.V()];</div><div class="line">		id=<span class="keyword">new</span> <span class="keyword">int</span> [digraph.V()];</div><div class="line">		DepthFirstOrder depthFirstOrder=<span class="keyword">new</span> DepthFirstOrder(digraph.reverse());</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i:depthFirstOrder.reversepost())</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(!ismarked[i])</div><div class="line">				dfs(digraph,i);</div><div class="line">			count++;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Digraph digraph,<span class="keyword">int</span> i)</span></span></div><div class="line">	&#123;</div><div class="line">		ismarked[i]=<span class="keyword">true</span>;</div><div class="line">		id[i]=count;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> w:digraph.adj(i))</div><div class="line">			<span class="keyword">if</span>(!ismarked[i])</div><div class="line">				dfs(digraph,w);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isstrongconnect</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> ismarked[i]==ismarked[w];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> id[v];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="可达性"><a href="#可达性" class="headerlink" title="可达性"></a>可达性</h2><p>从上面讨论的基础上我们可以开始探讨有向图的可达性<br>先给出可达性的定义:</p>
<blockquote>
<p>是否存在一条从一个给定的顶点 v 到另一个给定的顶点 w 的路径</p>
</blockquote>
<p>回想在无向图中,我们通过使用线性时间实现的联通分量可以以常数时间回答这个问题<br>在有向图中我们则使用传递闭包实现这个问题:</p>
<blockquote>
<p>有向图G 的传递闭包是由<strong>相同的一组顶点</strong>组成的<strong>另一幅有向图</strong>.在传递间包中存在<strong>一条从 v 指向 w 的边</strong>自且仅当<strong>在G中从V可达W</strong></p>
</blockquote>
<p>从上面我们可以看出有向图的传递闭包一般是稠密的,所以我们想到直接使用深度优先搜索来表示它,即为有向图中的每一个顶点构建一个深度优先搜索,组成一个深度优先搜索数组:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransitiveClousure</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> DirectedDFS all[];</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TransitiveClousure</span><span class="params">(Digraph digraph)</span></span></div><div class="line">	&#123;</div><div class="line">		all=<span class="keyword">new</span> DirectedDFS[digraph.V()];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;digraph.V();i++)</div><div class="line">			all[i]=<span class="keyword">new</span> DirectedDFS(digraph, i);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">reachable</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> all[v].marked[w];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看出这种解决方案并没有完成上面的任务,我们必须要以平方级别的时间代价进行预处理,然而这已经是目前最优的解决方案了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 无向图]]></title>
      <url>https://ly11tea.github.io/2016/11/14/%E7%AE%97%E6%B3%954-%E6%97%A0%E5%90%91%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>图可能是计算机数据结构中内容最为丰富,又最为复杂的一种.它能够与我们身边许多实际事物联合起来,地图,社交关系网等等.</p>
<a id="more"></a> 
<p>我们先来看其中最为简单的一种:无向图<br>在这种图中,边 (edge) 仅仅是两个顶点(vertex) 之间的连接<br>并且允许<strong>自环</strong>( 一条连接一个顶点和其自身的边),<strong>平行边</strong>(连接同一对顶点的两条边)的存在</p>
<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ol>
<li>两个顶点通过一条边相连时，我们称这两个顶点是<strong>相邻</strong>的，并称该连接依附于这两个顶点</li>
<li>边数即为依附于它的边的总数。</li>
<li>子图是由一幅图的所有边的一个子集</li>
<li>路径是由边顺序连接的一系列<strong>顶点</strong>,<br> 简单路径是一条没有重复顶点的路径</li>
<li>环是一条至少含有一条边且起点和终点相同的路径<br>简单环是一条(除了起点和终点必须相同之外)不含有重复顶点和边的环</li>
<li>4和5的长度就是他们包含的边数</li>
<li>任意一个顶点都存在一条路径到达另一个任意顶点的图叫做联通图</li>
<li>一幅<strong>非联通</strong>的图自若干<strong>连通</strong>的部分组成，它们都是其极大连通子图。</li>
<li>无环图是一种不包含环的图。</li>
<li>树是一幅无环连通图<br>互不相连的树组成的集合称为森林。</li>
<li>一幅图中不同的边的数量只占顶点总数V的一小部分..那么我们就认为这幅图是稀疏的</li>
</ol>
<p>图的几种表示方法:<br>邻接矩阵:邻接矩阵是一个V*V的布尔型矩阵,用真假值标示连通性<br>邻接表数组:邻接表数组是一个以顶点为索引的数组,这个数组内的每一个元素都是列表,若其他顶点与该顶点相邻,则会在列表记录下其值</p>
<p>因为我们生活中的大部分图都是稀疏的,所以我们使用邻接表数组来表示图</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> V;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> E;</div><div class="line">	<span class="keyword">private</span> Bag&lt;Integer&gt;[] adj;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		V=v;</div><div class="line">		E=<span class="number">0</span>;</div><div class="line">		adj=(Bag&lt;Integer&gt;[])<span class="keyword">new</span> Bag[v];<span class="comment">//java的数组不允许泛型声明,所以使用强制类型转换</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v;i++)</div><div class="line">			adj[i]=<span class="keyword">new</span> Bag&lt;Integer&gt;();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(In in)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>(in.readInt());</div><div class="line">		<span class="keyword">int</span> e=in.readInt();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> v=in.readInt();</div><div class="line">			<span class="keyword">int</span> w=in.readInt();</div><div class="line">			<span class="keyword">this</span>.addedge(v,w);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">V</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.V;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">E</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.E;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.adj[v].add(w);</div><div class="line">		<span class="keyword">this</span>.adj[w].add(v);</div><div class="line">		E++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">public</span> Iterable&lt;Integer&gt;adj(<span class="keyword">int</span> v)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.adj[v];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		String string=V+<span class="string">"vertices,"</span>+E+<span class="string">"edges\n"</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;V;i++)</div><div class="line">		&#123;</div><div class="line">			string=string+i+<span class="string">":"</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> w:adj(i))</div><div class="line">				string=string+w+<span class="string">" "</span>;</div><div class="line">			string=string+<span class="string">'\n'</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> string;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体实现上,我们将背包数组作为邻接表数组,背包中的值为整型.<br>值得注意的是,相同图的邻接表表示是可能不同的,边的插入顺序决定了顶点的位置.<br>总体上说,邻接表能够做到:</p>
<ol>
<li>使用的空间和V+E成正比;</li>
<li>添加一条边所要的时间为常数:</li>
<li>遍历顶点 v 的所有相邻顶点所需的时间和 v 的度数成正比<br>可以说上面的性质已经相当优秀了</li>
</ol>
<h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1><h2 id="Tremaux-搜索"><a href="#Tremaux-搜索" class="headerlink" title="Tremaux 搜索"></a>Tremaux 搜索</h2><p>要引入深度优先搜索,我们先介绍一个迷宫搜索方法,因为迷宫从本质上说来同图类似:<br>图类比于迷宫,通道类比于图的边,路口类比于图的顶点.<br>Tremaux 搜索方法是:</p>
<ol>
<li>选择一条没有标记过的通道，在你走过的路上铺一条绳子;</li>
<li>标记所有你第一次路过的路口和通道;</li>
<li>当来到一个标记过的路口时(用绳子)回退到上个路口</li>
<li>当回退到的路口 已没有可走的通道时继续回退<br>只要这个迷宫存在出口,用这种方法总能找到.</li>
</ol>
<h2 id="深度优先"><a href="#深度优先" class="headerlink" title="深度优先"></a>深度优先</h2><p>深度优先方法同Tremaux 搜索类似,这个方法使用递归实现:<br>在访问一个节点时:将他标记为已访问,递归地访问他没有被标记的邻居节点.<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthFirstSearch</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">boolean</span> marked[];</div><div class="line">	<span class="keyword">int</span> count;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DepthFirstSearch</span><span class="params">(Graph g,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		count=<span class="number">0</span>;</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span>[g.V()];</div><div class="line">		dfs(g,v);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Graph g,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		count++;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i:g.adj(v))</div><div class="line">			<span class="keyword">if</span>(!marked[i])</div><div class="line">				dfs(g, i);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Count</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> marked[w];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="使用深度优先搜索寻找两点间的路径"><a href="#使用深度优先搜索寻找两点间的路径" class="headerlink" title="使用深度优先搜索寻找两点间的路径"></a>使用深度优先搜索寻找两点间的路径</h1><p>计算两点间的路径是图算法中较为基础然而又十分普遍的问题,深度优先搜索恰好能解决这样的问题<br>我们使用一个叫做edgeTo的整型数组起到Tremaux搜索中绳子的作用,用它来记录每个与 s 连通的顶点回到起点的路径,具体到每一次从v-&gt;w的过程,第一次访问v-&gt;w时，将 edgeTo[w] 设为 v 来记住这条路径 换句话说. v-&gt;w 是从s到 w的路径上的最后一条已知的边。这样，搜索的结果是一颗以起点为根结点的树.<br>当要寻找从s点开始到任意点W路径时,则<strong>一条一条地通过数组edgeTo[w]=v,向前遍历</strong>,直到v=s,自然而然我们会想到使用<strong>堆栈方法</strong>进行这种遍历,这样在遍历完弹出时,就成为了正向的路径.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DepthFirstPath</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> start;</div><div class="line">	<span class="keyword">private</span> Integer edgeto[];</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> marked[];</div><div class="line">	<span class="keyword">private</span> Object String;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DepthFirstPath</span><span class="params">(Graph graph,<span class="keyword">int</span> s)</span></span></div><div class="line">	&#123;</div><div class="line">		start=s;</div><div class="line">		edgeto=<span class="keyword">new</span> Integer[graph.V()];</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span>[graph.V()];</div><div class="line">		dfs(graph,s);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Graph graph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> w:graph.adj(v))</div><div class="line">			<span class="keyword">if</span>(!marked[w])</div><div class="line">			&#123;</div><div class="line">				edgeto[w]=v;</div><div class="line">				dfs(graph,w);</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haspathto</span><span class="params">(<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> marked[w];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Iterable&lt;Integer&gt; <span class="title">pathto</span><span class="params">(<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!haspathto(w))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		Stack&lt;Integer&gt;path=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> x=w;x!=start;x=edgeto[x])</div><div class="line">			path.push(x);</div><div class="line">		path.push(start);</div><div class="line">		<span class="keyword">return</span> path;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		In in=<span class="keyword">new</span> In(args[<span class="number">0</span>]);</div><div class="line">		Graph graph=<span class="keyword">new</span> Graph(in);</div><div class="line">		<span class="keyword">int</span> s=Integer.parseInt(args[<span class="number">1</span>]);</div><div class="line">		DepthFirstPath paths=<span class="keyword">new</span> DepthFirstPath(graph,s);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.V();i++)</div><div class="line">		&#123;</div><div class="line">			StdOut.print(s+<span class="string">"--&gt;"</span>+i);</div><div class="line">			<span class="keyword">if</span>(paths.haspathto(i))</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j:paths.pathto(i))</div><div class="line">				&#123;</div><div class="line">					<span class="keyword">if</span>(j!=s)</div><div class="line">						StdOut.print(<span class="string">"-"</span>+j);</div><div class="line">					<span class="keyword">else</span></div><div class="line">						StdOut.print(s);</div><div class="line">				&#125;</div><div class="line">			StdOut.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><p>要找到从 s 到 v 的最短路径,从 s开始在所有由一条边就可以到达的顶点中寻找 V. 如果找不到我们就继续在与 s 距离两条边的所有顶点中查找 V.<br>在广度优先搜索中，我们希望按照与起点的距离的顺序来遍历所有顶点,起来这种顺序很容易实现:<strong>使用(FIFO. 先进先出)队列</strong>来代替栈(LIFO; 后进先出即可。<br>代码中的bfs方法不像深度优先搜索中的dfs方法一样使用递归(事实上是以此来隐式地使用栈),而是在显式地使用队列记录.它的结果也是一个数组edgeTo[]，也是一棵用父链接表示的根结点为 s 的树。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bfs</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> marked[];</div><div class="line">	<span class="keyword">private</span> Queue&lt;Integer&gt; queue;</div><div class="line">	<span class="keyword">private</span> Integer edgeto[];</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> s;</div><div class="line">	String string;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Bfs</span><span class="params">(Graph graph,<span class="keyword">int</span> s)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.s=s;</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span>[graph.V()];</div><div class="line">		edgeto=<span class="keyword">new</span> Integer[graph.V()];</div><div class="line">		bfs(graph,s);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(Graph graph,<span class="keyword">int</span> s)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[s]=<span class="keyword">true</span>;</div><div class="line">		queue.enqueue(s);</div><div class="line">		<span class="keyword">while</span>(!queue.isEmpty())</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">int</span> v=queue.dequeue();<span class="comment">//从队列中弹出一个当前要遍历的节点</span></div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> w:graph.adj(v))</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(!marked[w])<span class="comment">//如果这个节点还没有被探索到</span></div><div class="line">				&#123;</div><div class="line">					marked[w]=<span class="keyword">true</span>;</div><div class="line">					edgeto[w]=v;</div><div class="line">					queue.enqueue(w);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">haspathto</span><span class="params">(<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> marked[w];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">public</span> Iterable&lt;Integer&gt;pathto(<span class="keyword">int</span> w)</div><div class="line">	&#123;</div><div class="line">		Stack&lt;Integer&gt;stack=<span class="keyword">new</span> Stack&lt;Integer&gt;();</div><div class="line">		<span class="keyword">if</span>(!haspathto(w))</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=w;i!=s;i=edgeto[i])</div><div class="line">		&#123;</div><div class="line">			stack.push(i);</div><div class="line">		&#125;</div><div class="line">		stack.push(s);</div><div class="line">		<span class="keyword">return</span> stack;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="连通分量"><a href="#连通分量" class="headerlink" title="连通分量"></a>连通分量</h1><p>深度优先搜索的另一种应用是搜索连通分量,在无向图中,连通分量就是每一个极大连通子图中的所有顶点.<br>由之前的寻找路径算法我们发现,在构造函数中调用一次dfs(g,s),可以搜索到所有与s连通的顶点.<br>所以我们自然而然的想到对此稍作改动,加入一个循环,对图中的每一个顶点都重复上述过程.<br>当然这其中还有重复,如果发现某个顶点已经被标记,则无需再重复上述过程.<br>此外为了保存连通分量,我们再定义一个顶点为下标的数组id，将同一个连通分量中的顶点和这个连通分量的标识符关联起来(这里的标识符就是单纯的次序,第0个连通分量,第一个连通分量…),这样我们要找到第一个连通分量所有的顶点,就只要找到数组id中元素为0的所有下标.<br>总结如下:</p>
<ol>
<li>通过递归地调用dfs开始对顶点0进行深度优先搜索,所有搜索到的顶点其id数组值都赋为0,如果递归结束则所有与0相通的顶点都被遍历完.</li>
<li>此时从顶点1开始寻找第一个未被标记的顶点,将连通分量计数值加一,重复上述步骤</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> [] marked;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> [] id; <span class="comment">//记录定点所在的连通向量的序号</span></div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CC</span><span class="params">(Graph graph)</span></span></div><div class="line">	&#123;</div><div class="line">		count=<span class="number">0</span>;</div><div class="line">		id=<span class="keyword">new</span> <span class="keyword">int</span>[graph.V()];</div><div class="line">		marked=<span class="keyword">new</span> <span class="keyword">boolean</span>[graph.V()];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.V();i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(!marked[i])</div><div class="line">			&#123;</div><div class="line">				dfs(graph,i);</div><div class="line">				count++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(Graph graph,<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		marked[v]=<span class="keyword">true</span>;</div><div class="line">		id[v]=count;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i:graph.adj(v))</div><div class="line">			<span class="keyword">if</span>(!marked[v])</div><div class="line">				dfs(graph, i);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> id[v]==id[w];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> id[v];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> count;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		Graph graph=<span class="keyword">new</span> Graph(<span class="keyword">new</span> In(args[<span class="number">0</span>]));</div><div class="line">		CC cc=<span class="keyword">new</span> CC(graph);</div><div class="line">		<span class="keyword">int</span> componentcount=cc.count();</div><div class="line">		Bag&lt;Integer&gt;[]components=(Bag&lt;Integer&gt;[])<span class="keyword">new</span> Bag[componentcount];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;componentcount;i++)</div><div class="line">			components[i]=<span class="keyword">new</span> Bag&lt;Integer&gt;();</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph.V();i++)</div><div class="line">			components[cc.id[i]].add(i);</div><div class="line">		StdOut.println(componentcount+<span class="string">"components"</span>);</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;componentcount;i++)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">for</span>(Integer v:components[i])</div><div class="line">				StdOut.print(v+<span class="string">"  "</span>);</div><div class="line">			StdOut.println();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="符号图"><a href="#符号图" class="headerlink" title="符号图"></a>符号图</h1><p>图都是通过文件或者网页定义的，使用的是<strong>字符串</strong>而非整数来表示和指代顶点.符号图可以用来表示和解决许多的实际问题,<br>例如用它来表示许多机场连通关系的关系对,长春-上海,上海-北京,北京-广州….,建立索引表后,例如,列出所有与上海连通的顶点就是列出了从上坐飞机海能达到的机场.<br>还有例如电影的演员表,值得注意的是,电影与其演员的对应关系是<strong>二分图关系</strong>(一条边的两边是两类不同的顶点),即电影不可能与电影相对应,演员也不可能与演员相对应,我们从电影出发找到他们的相邻顶点,就是寻找一部电影的演员表,我们从演员出发寻找他们的相邻顶点,就是寻找一个演员演过的所有电影.</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们使用一个符号表,一个字符串数组,一个标准无向图来实现符号图:<br>符号表:用来建立从字符串到索引的关系<br>字符串数组:与上面正好相反,建立索引到字符串之间的关系<br>标准无向图:记录顶点与顶点间的链接关系</p>
<p>由于建立标准无向图时要知道顶点数,这对于上面两种用例来说都是困难的,所以我们在无向图的构造函数中遍历输入信息<strong>两遍</strong>,第一遍初始化符号表和字符数组并得到顶点个数,第二遍初始化标准无向图.<br>方便起见,我们定义输入格式如下:</p>
<ul>
<li>顶点名均为字符串;</li>
<li>用可指定的分隔符隔开字符串</li>
<li>每一行都<strong>代表着一组边的集合</strong>,为:本行<strong>第一个顶点与其他所有顶点分别相连</strong>的集合<br>代码如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymbolGraph</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> ST&lt;String, Integer&gt;st;<span class="comment">//记录从符号到图索引的映射</span></div><div class="line">	<span class="keyword">private</span> String[]keys;<span class="comment">//st的反向映射</span></div><div class="line">	Graph graph;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SymbolGraph</span><span class="params">(String stream,String divide)</span></span></div><div class="line">	&#123;</div><div class="line">		st=<span class="keyword">new</span> ST&lt;String,Integer&gt;();</div><div class="line">		In in=<span class="keyword">new</span> In(stream);</div><div class="line">		<span class="keyword">while</span>(in.hasNextLine())</div><div class="line">		&#123;</div><div class="line">			String line[]=in.readLine().split(divide);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;line.length;i++)</div><div class="line">				<span class="keyword">if</span>(!st.contains(line[i]))</div><div class="line">					st.put(line[i], st.size());</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		keys=<span class="keyword">new</span> String[st.size()];</div><div class="line">		<span class="keyword">for</span>(String key:st.keys())</div><div class="line">			keys[st.get(key)]=key;</div><div class="line">		graph=<span class="keyword">new</span> Graph(st.size());</div><div class="line">		in=<span class="keyword">new</span> In(stream);</div><div class="line">		<span class="keyword">while</span>(in.hasNextLine())</div><div class="line">		&#123;</div><div class="line">			String line[]=in.readLine().split(divide);</div><div class="line">			<span class="keyword">int</span> v=st.get(line[<span class="number">0</span>]);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;line.length;i++)</div><div class="line">				graph.addedge(v, st.get(line[i]));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String key)</span></span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> st.contains(key);</div><div class="line">		&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">index</span><span class="params">(String key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> st.get(key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(<span class="keyword">int</span> v)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> keys[v];</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		SymbolGraph symbolGraph=<span class="keyword">new</span> SymbolGraph(args[<span class="number">0</span>], args[<span class="number">1</span>]);</div><div class="line">		<span class="keyword">while</span>(StdIn.hasNextLine())</div><div class="line">		&#123;</div><div class="line">			String symbol=StdIn.readLine();</div><div class="line">			<span class="keyword">if</span>(symbolGraph.contains(symbol))</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i:graph.adj(symbolGraph.index(symbol)))</div><div class="line">					StdOut.print(<span class="string">"  "</span>+keys[i]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>由符号图展开的一个有趣应用就是两个人之间关系的度数.,即两人之间最短关系链之间的长度,例如所有与小明认识的人与同小明之间关系的度数为1,所有<strong>认识与小明认识的人却又不认识小明的人的</strong>关系度数为2.依次类推<br>不难得出这其实是<strong>图算法中的最短路径问题</strong>,我们要使用广度优先搜索来解决这一问题.<br>书中介绍了一个计算Kevin Bacon数的游戏,找出某个演员同kevin bacon的最短电影链.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DegreesOfSepration</span> </span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		SymbolGraph symbolGraph=<span class="keyword">new</span> SymbolGraph(args[<span class="number">0</span>], args[<span class="number">1</span>]);</div><div class="line">		Graph graph=symbolGraph.graph;</div><div class="line">		String start=args[<span class="number">2</span>];</div><div class="line">		<span class="keyword">if</span>(!symbolGraph.contains(start))</div><div class="line">		&#123;</div><div class="line">			StdOut.println(<span class="string">"not in it"</span>);</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line">		BreadthFirstPaths br=<span class="keyword">new</span> BreadthFirstPaths(graph, symbolGraph.index(start));</div><div class="line">		<span class="keyword">while</span>(StdIn.hasNextLine())</div><div class="line">		&#123;</div><div class="line">			String dest=StdIn.readLine();</div><div class="line">			<span class="keyword">if</span>(symbolGraph.contains(dest))</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">if</span>(br.hasPathTo(symbolGraph.index(dest)))</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i:br.pathTo(symbolGraph.index(dest)))</div><div class="line">					StdOut.println(symbolGraph.name(i));</div><div class="line">				<span class="keyword">else</span></div><div class="line">				&#123;</div><div class="line">					StdOut.println(<span class="string">"not connected"</span>);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span></div><div class="line">			&#123;</div><div class="line">				StdOut.println(<span class="string">"not in debate"</span>);	</div><div class="line">				<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http 初探笔记]]></title>
      <url>https://ly11tea.github.io/2016/10/21/http-%E5%88%9D%E6%8E%A2%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><blockquote>
<p>超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器.<br><a id="more"></a> </p>
</blockquote>
<p>例如,最简单的一个页面的浏览过程:<br>我们输入URL后，我们的浏览器给Web服务器发送了一个Request, Web服务器接到Request后进行处理，生成相应的Response，然后发送给浏览器， 浏览器解析Response中的HTML,这样我们就看到了网页.<br><img src="/images/http_protcool/1.PNG" style="width: 300px;"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Client-&gt;Server: Request(get)</div><div class="line"></div><div class="line">Server--&gt;Client:Response(body中为html网页)</div></pre></td></tr></table></figure>
<h1 id="URL格式"><a href="#URL格式" class="headerlink" title="URL格式"></a>URL格式</h1><blockquote>
<p>schema://host[:port#]/path/…/[?query-string][#anchor]</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>scheme</td>
<td>指定低层使用的协议(例如：http, https, ftp)</td>
</tr>
<tr>
<td>host</td>
<td>HTTP服务器的IP地址或者域名</td>
</tr>
<tr>
<td>port</td>
<td>HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 <a href="http://www.cnblogs.com:8080/" target="_blank" rel="external">http://www.cnblogs.com:8080/</a></td>
</tr>
<tr>
<td>path</td>
<td>访问资源的路径</td>
</tr>
<tr>
<td>query-string</td>
<td>发送给http服务器的数据</td>
</tr>
<tr>
<td>anchor-</td>
<td>锚</td>
</tr>
</tbody>
</table>
<p>例如:<a href="http://www.mywebsite.com/sj/test/test.aspx?name=sviergn&amp;x=true#stuff" target="_blank" rel="external">http://www.mywebsite.com/sj/test/test.aspx?name=sviergn&amp;x=true#stuff</a><br>Schema:                 http<br>host:                   www.mywebsite.com<br>path:                   /sj/test/test.aspx<br>Query String:           name=sviergn&amp;x=true<br>Anchor:                 stuff</p>
<h1 id="http的request消息结构"><a href="#http的request消息结构" class="headerlink" title="http的request消息结构"></a>http的request消息结构</h1><p>request有三部分:<br>1.Request line<br>2.Request header<br>3.body</p>
<table>
<thead>
<tr>
<th>Request line</th>
<th>Request header</th>
<th style="text-align:center">body</th>
</tr>
</thead>
<tbody>
<tr>
<td>Method</td>
<td>Cache 头域:If-Modified-Since,If-None-Match,Pragma</td>
</tr>
<tr>
<td>Path-to-resoure</td>
<td>Client 头域:Accept,Accept-Encoding,Accept-Language,User-Agent,Accept-Charset</td>
</tr>
<tr>
<td>Http/version-number</td>
<td>Cookie/Login 头域 Cookie</td>
</tr>
<tr>
<td></td>
<td>Entity头域:Content-Length,Content-Type</td>
</tr>
<tr>
<td></td>
<td>Miscellaneous 头域:Referer</td>
</tr>
<tr>
<td></td>
<td>Transport 头域:Connection,Host</td>
</tr>
</tbody>
</table>
<h2 id="Request-line"><a href="#Request-line" class="headerlink" title="Request line"></a>Request line</h2><p>Method表示请求方法,比如”POST”,”GET”, </p>
<blockquote>
<p>HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p>
<ol>
<li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456.  POST方法是把提交的数据放在HTTP包的Body中.</li>
<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</li>
<li>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</li>
<li>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</li>
</ol>
</blockquote>
<p>Path-to-resoure表示请求的资源，<br>Http/version-number 表示HTTP协议的版本号</p>
<h2 id="Request-header"><a href="#Request-header" class="headerlink" title="Request header"></a>Request header</h2><h3 id="Cache-头域"><a href="#Cache-头域" class="headerlink" title="Cache 头域"></a>Cache 头域</h3><h4 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h4><p>作用： 把浏览器端缓存页面的最后修改时间发送到服务器去，服务器会把这个时间与服务器上实际文件的最后修改时间进行对比。如果时间一致，那么返回304，客户端 就直接使用本地缓存文件。如果时间不一致，就会返回200和新的文件内容。客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示在浏览器中.</p>
<p>例如：If-Modified-Since: Thu, 09 Feb 2012 09:07:57 GMT</p>
<h4 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h4><p>作用: If-None-Match和ETag一起工作，工作原理是在HTTP Response中添加ETag信息。 当用户再次请求该资源时，将在HTTP Request 中加入If-None-Match信息(ETag的值)。如果服务器验证资源的ETag没有改变（该资源没有更新），将返回一个304状态告诉客户端使用 本地缓存文件。否则将返回200状态和新的资源和Etag.  使用这样的机制将提高网站的性能</p>
<p>例如: If-None-Match: “03f2b33c0bfcc1:0”</p>
<h4 id="Pragma"><a href="#Pragma" class="headerlink" title="Pragma"></a>Pragma</h4><p>作用： 防止页面被缓存， 在HTTP/1.1版本中，它和Cache-Control:no-cache作用一模一样</p>
<p>Pargma只有一个用法， 例如： Pragma: no-cache</p>
<p>注意: 在HTTP/1.0版本中，只实现了Pragema:no-cache, 没有实现Cache-Control</p>
<h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>作用: 这个是非常重要的规则。 这个用来指定Response-Request遵循的缓存机制。各个指令含义如下</p>
<p>Cache-Control:Public   可以被任何缓存所缓存（）</p>
<p>Cache-Control:Private     内容只缓存到私有缓存中</p>
<p>Cache-Control:no-cache  所有内容都不会被缓存</p>
<h3 id="Client-头域"><a href="#Client-头域" class="headerlink" title="Client 头域"></a>Client 头域</h3><h4 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h4><p>作用： 浏览器端可以接受的媒体类型,</p>
<p>例如：  Accept: text/html  代表浏览器可以接受服务器回发的类型为 text/html  也就是我们常说的html文档,</p>
<p>如果服务器无法返回text/html类型的数据,服务器应该返回一个406错误(non acceptable)</p>
<p>通配符 * 代表任意类型</p>
<p>例如  Accept: <em>/</em>  代表浏览器可以处理所有类型,(一般浏览器发给服务器都是发这个)</p>
<h6 id="Accept-Encoding："><a href="#Accept-Encoding：" class="headerlink" title="Accept-Encoding："></a>Accept-Encoding：</h6><p>作用： 浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate），（注意：这不是只字符编码）;</p>
<p>例如： Accept-Encoding: gzip, deflate</p>
<h5 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h5><p>作用： 浏览器申明自己接收的语言。 </p>
<p>语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等；</p>
<p>例如： Accept-Language: en-us</p>
<h5 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h5><p>作用：告诉HTTP服务器， 客户端使用的操作系统和浏览器的名称和版本.</p>
<p>我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人感到很神 奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息User-Agent请求报头域允许客户端将它的操作系统、浏览器 和其它属性告诉服务器。</p>
<p>例如： User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; InfoPath.2; .NET4.0E)</p>
<h5 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="Accept-Charset"></a>Accept-Charset</h5><p>作用：浏览器申明自己接收的字符集，这就是本文前面介绍的各种字符集和字符编码，如gb2312，utf-8（通常我们说Charset包括了相应的字符编码方案）；</p>
<p>例如：</p>
<h4 id="Cookie-Login-头域"><a href="#Cookie-Login-头域" class="headerlink" title="Cookie/Login 头域"></a>Cookie/Login 头域</h4><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie:"></a>Cookie:</h5><p>作用： 最重要的header, 将cookie的值发送给HTTP 服务器</p>
<h3 id="Entity头域"><a href="#Entity头域" class="headerlink" title="Entity头域"></a>Entity头域</h3><h4 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h4><p>作用：发送给HTTP服务器数据的长度。</p>
<p>例如： Content-Length: 38</p>
<h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><p>作用：</p>
<p>例如：Content-Type: application/x-www-form-urlencoded</p>
<h5 id="Miscellaneous-头域"><a href="#Miscellaneous-头域" class="headerlink" title="Miscellaneous 头域"></a>Miscellaneous 头域</h5><h5 id="Referer"><a href="#Referer" class="headerlink" title="Referer:"></a>Referer:</h5><p>作用： 提供了Request的上下文信息的服务器，告诉服务器我是从哪个链接过来的，比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p>
<p>例如: Referer:<a href="http://translate.google.cn/?hl=zh-cn&amp;tab=wT" target="_blank" rel="external">http://translate.google.cn/?hl=zh-cn&amp;tab=wT</a></p>
<h3 id="Transport-头域"><a href="#Transport-头域" class="headerlink" title="Transport 头域"></a>Transport 头域</h3><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>例如：　Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</p>
<p>例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</p>
<h4 id="Host（发送请求时，该报头域是必需的）"><a href="#Host（发送请求时，该报头域是必需的）" class="headerlink" title="Host（发送请求时，该报头域是必需的）"></a>Host（发送请求时，该报头域是必需的）</h4><p>作用: 请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的</p>
<p>例如: 我们在浏览器中输入：<a href="http://www.guet.edu.cn/index.html" target="_blank" rel="external">http://www.guet.edu.cn/index.html</a></p>
<p>浏览器发送的请求消息中，就会包含Host请求报头域，如下：</p>
<p>Host：<a href="http://www.guet.edu.cn" target="_blank" rel="external">http://www.guet.edu.cn</a></p>
<p>此处使用缺省端口号80，若指定了端口号，则变成：Host：指定端口号</p>
<h1 id="http的reponse消息结构"><a href="#http的reponse消息结构" class="headerlink" title="http的reponse消息结构"></a>http的reponse消息结构</h1><p>分为三部分,第一部分叫Response line, 第二部分叫Response header，第三部分是body</p>
<table>
<thead>
<tr>
<th>reponse line</th>
<th>Response header</th>
<th style="text-align:center">body</th>
</tr>
</thead>
<tbody>
<tr>
<td>HTTP/version-number</td>
<td>Cache头域:Date,Expires,Vary</td>
</tr>
<tr>
<td>status-code</td>
<td>Cookie/Login 头域:P3P,Set-Cookie</td>
</tr>
<tr>
<td>message</td>
<td>Entity头域:ETag,Last-Modified,Content-Type,Content-Length,Content-Encoding,Content-Language</td>
</tr>
<tr>
<td></td>
<td>Miscellaneous 头域:Server,X-AspNet-Version,X-Powered-By:</td>
</tr>
<tr>
<td></td>
<td>Transport头域:Connection</td>
</tr>
<tr>
<td></td>
<td>Location头域:Location</td>
</tr>
</tbody>
</table>
<h2 id="reponse-line"><a href="#reponse-line" class="headerlink" title="reponse line"></a>reponse line</h2><p>HTTP/version-number表示HTTP协议的版本号，  status-code 和message分别是状态代码和状态信息</p>
<h2 id="Response-header"><a href="#Response-header" class="headerlink" title="Response header"></a>Response header</h2><h3 id="Cache头域"><a href="#Cache头域" class="headerlink" title="Cache头域"></a>Cache头域</h3><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p>作用:  生成消息的具体时间和日期</p>
<p>例如：　Date: Sat, 11 Feb 2012 11:35:14 GMT </p>
<h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>作用: 浏览器会在指定过期时间内使用本地缓存</p>
<p>例如: Expires: Tue, 08 Feb 2022 11:35:14 GMT</p>
<h4 id="Vary"><a href="#Vary" class="headerlink" title="Vary"></a>Vary</h4><p>作用：</p>
<p>例如: Vary: Accept-Encoding</p>
<h3 id="Cookie-Login-头域-1"><a href="#Cookie-Login-头域-1" class="headerlink" title="Cookie/Login 头域"></a>Cookie/Login 头域</h3><h4 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h4><p>作用: 用于跨域设置Cookie, 这样可以解决iframe跨域访问cookie的问题</p>
<p>例如: P3P: CP=CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR</p>
<h4 id="Set-Cookie"><a href="#Set-Cookie" class="headerlink" title="Set-Cookie"></a>Set-Cookie</h4><p>作用： 非常重要的header, 用于把cookie 发送到客户端浏览器， 每一个写入cookie都会生成一个Set-Cookie.</p>
<p>例如: Set-Cookie: sc=4c31523a; path=/; domain=.acookie.taobao.com</p>
<h3 id="Entity头域-1"><a href="#Entity头域-1" class="headerlink" title="Entity头域"></a>Entity头域</h3><h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><p>作用:  和If-None-Match 配合使用。 （实例请看上节中If-None-Match的实例）</p>
<p>例如: ETag: “03f2b33c0bfcc1:0”</p>
<h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified:"></a>Last-Modified:</h4><p>作用： 用于指示资源的最后修改日期和时间。（实例请看上节的If-Modified-Since的实例）</p>
<p>例如: Last-Modified: Wed, 21 Dec 2011 09:09:10 GMT</p>
<h4 id="Content-Type-1"><a href="#Content-Type-1" class="headerlink" title="Content-Type"></a>Content-Type</h4><p>作用：WEB服务器告诉浏览器自己响应的对象的类型和字符集,</p>
<p>例如:</p>
<p>Content-Type: text/html; charset=utf-8</p>
<p>Content-Type:text/html;charset=GB2312</p>
<p>Content-Type: image/jpeg</p>
<h4 id="Content-Length-1"><a href="#Content-Length-1" class="headerlink" title="Content-Length"></a>Content-Length</h4><p>指明实体正文的长度，以字节方式存储的十进制数字来表示。在数据下行的过程中，Content-Length的方式要预先在服务器中缓存所有数据，然后所有数据再一股脑儿地发给客户端。</p>
<p>例如: Content-Length: 19847</p>
<p>####Content-Encoding</p>
<p>WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。</p>
<p>例如：Content-Encoding：gzip</p>
<p>####Content-Language</p>
<p>作用： WEB服务器告诉浏览器自己响应的对象的语言者</p>
<p>例如： Content-Language:da</p>
<h3 id="Miscellaneous-头域-1"><a href="#Miscellaneous-头域-1" class="headerlink" title="Miscellaneous 头域"></a>Miscellaneous 头域</h3><h4 id="Server"><a href="#Server" class="headerlink" title="Server:"></a>Server:</h4><p>作用：指明HTTP服务器的软件信息</p>
<p>例如:Server: Microsoft-IIS/7.5</p>
<h4 id="X-AspNet-Version"><a href="#X-AspNet-Version" class="headerlink" title="X-AspNet-Version:"></a>X-AspNet-Version:</h4><p>作用：如果网站是用ASP.NET开发的，这个header用来表示ASP.NET的版本</p>
<p>例如: X-AspNet-Version: 4.0.30319</p>
<h4 id="X-Powered-By"><a href="#X-Powered-By" class="headerlink" title="X-Powered-By:"></a>X-Powered-By:</h4><p>作用：表示网站是用什么技术开发的</p>
<p>例如： X-Powered-By: ASP.NET</p>
<h3 id="Transport头域"><a href="#Transport头域" class="headerlink" title="Transport头域"></a>Transport头域</h3><h4 id="Connection-1"><a href="#Connection-1" class="headerlink" title="Connection"></a>Connection</h4><p>例如：　Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</p>
<p>例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。</p>
<h3 id="Location头域"><a href="#Location头域" class="headerlink" title="Location头域"></a>Location头域</h3><h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><p>作用： 用于重定向一个新的位置, 包含新的URL地址</p>
<p> 实例请看304状态实例</p>
<h1 id="Http认证"><a href="#Http认证" class="headerlink" title="Http认证"></a>Http认证</h1><p>桌面应用程序也通过HTTP协议跟Web服务器交互，桌面应用程序一般不会使用cookie, 而是把”<strong>用户名+冒号+密码”用BASE64编码的字符串放在htp request 中的header Authorization</strong>中发送给服务端，这种方式叫HTTP基本认证(Basic Authentication)<br>第一步:  客户端发送http request 给服务器，<br>第二步:  因为request中没有包含Authorization header,  服务器会返回一个401 Unauthozied 给客户端，并且在Response 的 header “WWW-Authenticate” 中添加信息。<br>第三步：客户端把用户名和密码用BASE64编码后，放在Authorization header中发送给服务器， 认证成功。<br>第四步：服务器将Authorization header中的用户名密码取出，进行验证， 如果验证通过，将根据请求，发送资源给客户端</p>
<p><strong>HTTP基本认证要和HTTPS结合在一起,</strong>否则的话密码会轻易地被读取出来</p>
<h2 id="HTTP-OAuth认证"><a href="#HTTP-OAuth认证" class="headerlink" title="HTTP OAuth认证"></a>HTTP OAuth认证</h2><p>OAuth 对于Http来说，就是放在Authorization header中的不是用户名密码， 而是一个token.</p>
<h1 id="HTTP内容编码和压缩"><a href="#HTTP内容编码和压缩" class="headerlink" title="HTTP内容编码和压缩"></a>HTTP内容编码和压缩</h1><p> 在http协议中，可以对内容（也就是body部分）进行编码,起到混淆内容或者压缩的目的,而如果使用压缩编码进行编码,那么就称为http压缩</p>
<h2 id="内容编码类型"><a href="#内容编码类型" class="headerlink" title="内容编码类型"></a>内容编码类型</h2><p> HTTP定义了一些标准的内容编码类型，并允许用扩展的形式添加更多的编码。<br>response中的content type域的Content-Encoding header说明编码时使用的算法</p>
<p>Content-Encoding值</p>
<p>gzip　　表明实体采用GNU zip编码</p>
<p>compress 表明实体采用Unix的文件压缩程序</p>
<p>deflate　　表明实体是用zlib的格式压缩的</p>
<p>identity　　表明没有对实体进行编码。当没有Content-Encoding header时， 就默认为这种情况</p>
<p>gzip, compress, 以及deflate编码都是无损压缩算法，用于减少传输报文的大小，不会导致信息损失。 其中gzip通常效率最高， 使用最为广泛。</p>
<h2 id="压缩的步骤"><a href="#压缩的步骤" class="headerlink" title="压缩的步骤"></a>压缩的步骤</h2><ol>
<li><p>浏览器发送Http request 给Web服务器,  request 中有Accept-Encoding: gzip, deflate。 (告诉服务器， 浏览器支持gzip压缩)</p>
</li>
<li><p>Web服务器接到request后， 生成原始的Response, 其中有原始的Content-Type和Content-Length。</p>
</li>
<li><p>Web服务器通过Gzip，来对Response进行编码， 编码后header中有Content-Type和Content-Length(压缩后的大小)， 并且增加了Content-Encoding:gzip.  然后把Response发送给浏览器。</p>
</li>
<li><p>浏览器接到Response后，根据Content-Encoding:gzip来对Response 进行解码。 获取到原始response后， 然后显示出网页。</p>
</li>
</ol>
<h1 id="http缓存"><a href="#http缓存" class="headerlink" title="http缓存"></a>http缓存</h1><p>http缓存是指:当Web请求抵达缓存时，如果本地有“已缓存的”副本，就可以从本地存储设备而不是从原始服务器中提取这个文档。</p>
<h2 id="判断缓存新鲜度"><a href="#判断缓存新鲜度" class="headerlink" title="判断缓存新鲜度"></a>判断缓存新鲜度</h2><p>共有两种方法:</p>
<ol>
<li>浏览器把缓存文件的最后修改时间通过 header ”If-Modified-Since“来告诉Web服务器。</li>
<li>浏览器把缓存文件的ETag, 通过header “If-None-Match”, 来告诉Web服务器。</li>
</ol>
<p>###　通过最后修改时间, 来判断缓存新鲜度</p>
<ol>
<li><p>浏览器客户端想请求一个文档，  首先检查本地缓存，发现存在这个文档的缓存，  获取缓存中文档的最后修改时间，通过： <strong>If-Modified-Since，</strong> 发送Request给Web服务器。</p>
</li>
<li><p>Web服务器收到Request，将服务器的<strong>文档修改时间（Last-Modified）: 跟request header 中的，If-Modified-Since相比较，</strong> 如果时间是一样的， 说明缓存还是最新的， Web服务器将发送<strong>304 Not Modified给浏览器客户端，</strong> 告诉客户端直接使用缓存里的版本。如下图。</p>
</li>
</ol>
<p><img src="/images/http_protcool/2.PNG" style="width: 300px;"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Client-&gt;Cache:</div><div class="line">Cache-&gt;Server:</div><div class="line">Note right of Server: 检查新鲜度</div><div class="line">Server--&gt;Cache:缓存已是最新</div><div class="line">Cache--&gt;Client:使用缓存</div></pre></td></tr></table></figure>
<p><img src="/images/http_protcool/3.PNG" style="width: 300px;"></p>
<p>3.假如该文档已经被更新了。Web服务器将发送该文档的最新版本给浏览器客户端， 如下图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Client-&gt;Cache:</div><div class="line">Cache-&gt;Server:</div><div class="line">Note right of Server: 检查新鲜度</div><div class="line">Server--&gt;Cache:缓存不是最新,发送最新内容</div><div class="line">Cache--&gt;Client:使用最新内容</div></pre></td></tr></table></figure></p>
<h3 id="ETag判断"><a href="#ETag判断" class="headerlink" title="ETag判断"></a>ETag判断</h3><p>ETag是实体标签（Entity Tag）的缩写， 根据实体内容生成的一段hash字符串（类似于MD5或者SHA1之后的结果），可以标识资源的状态。 当资源发送改变时，ETag也随之发生变化。<br><strong>ETag是Web服务端产生的，然后发给浏览器客户端。</strong>浏览器客户端是不用关心Etag是如何产生的。</p>
<p>为什么使用ETag呢？ 主要是为了解决Last-Modified 无法解决的一些问题。</p>
<ol>
<li><p>某些服务器不能精确得到文件的最后修改时间， 这样就无法通过最后修改时间来判断文件是否更新了。</p>
</li>
<li><p>某些文件的修改非常频繁，在秒以下的时间内进行修改. Last-Modified只能精确到秒。</p>
</li>
<li><p>一些文件的最后修改时间改变了，但是内容并未改变。 我们不希望客户端认为这个文件修改了。</p>
</li>
</ol>
<h2 id="与缓存有关的header"><a href="#与缓存有关的header" class="headerlink" title="与缓存有关的header"></a>与缓存有关的header</h2><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>Cache-Control: max-age=0    以秒为单位<br>If-Modified-Since: Mon, 19 Nov 2012 08:38:01 GMT    缓存文件的最后修改时间。<br>If-None-Match: “0693f67a67cc1:0”    缓存文件的Etag值<br>Cache-Control: no-cache    不使用缓存<br>Pragma: no-cache    不使用缓存</p>
<h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>Cache-Control: public    响应被缓存，并且在多用户间共享，  （公有缓存和私有缓存的区别，请看另一节）<br>Cache-Control: private    响应只能作为私有缓存，不能在用户之间共享<br>Cache-Control:no-cache    提醒浏览器要从服务器提取文档进行验证<br>Cache-Control:no-store    绝对禁止缓存（用于机密，敏感文件）<br>Cache-Control: max-age=60    60秒之后缓存过期（相对时间）<br>Date: Mon, 19 Nov 2012 08:39:00 GMT    当前response发送的时间<br>Expires: Mon, 19 Nov 2012 08:40:01 GMT    缓存过期的时间（绝对时间）<br>Last-Modified: Mon, 19 Nov 2012 08:38:01 GMT    服务器端文件的最后修改时间<br>ETag: “20b1add7ec1cd1:0”    服务器端文件的Etag值<br>如果同时存在cache-control和Expires怎么办呢？<br>浏览器总是优先使用cache-control，如果没有cache-control才考虑Expires  </p>
<h2 id="缓存命中"><a href="#缓存命中" class="headerlink" title="缓存命中"></a>缓存命中</h2><p>按F5刷新浏览器和在地址栏里输入网址然后回车。 这两个行为是不一样的。</p>
<p>按F5刷新浏览器， <strong>浏览器会去Web服务器验证缓存</strong>。</p>
<p>如果是在地址栏输入网址然后回车，<strong>浏览器会”直接使用有效的缓存”, 而不会发http request</strong> 去服务器验证缓存，这种情况叫做<strong>缓存命中</strong>，如下图:</p>
<p><img src="/images/http_protcool/4.PNG" style="width: 300px;"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Client-&gt;Cache:</div><div class="line">Note right of Server:与服务器无关 </div><div class="line">Cache--&gt;Client:使用缓存</div></pre></td></tr></table></figure></p>
<p>如果使用ctrl+f5则会不使用缓存</p>
<h2 id="公有缓存和私有缓存的区别"><a href="#公有缓存和私有缓存的区别" class="headerlink" title="公有缓存和私有缓存的区别"></a>公有缓存和私有缓存的区别</h2><p>Cache-Control: public 指可以公有缓存，可以是数千名用户共享的。</p>
<p>Cache-Control: private 指只支持私有缓存，私有缓存是单个用户专用的。</p>
<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>Web代理（proxy）服务器是网络的中间实体。代理位于Web客户端和Web服务器之间，扮演“中间人”的角色。代理既是服务器,又是客户端<br><img src="/images/http_protcool/5.PNG" style="width: 300px;"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Client-&gt;Proxy:Request</div><div class="line">Proxy-&gt;Client:Response</div><div class="line">Proxy-&gt;Server:Request</div><div class="line">Server-&gt;Proxy:Response</div></pre></td></tr></table></figure></p>
<h2 id="使用PAC配置代理"><a href="#使用PAC配置代理" class="headerlink" title="使用PAC配置代理"></a>使用PAC配置代理</h2><p>PAC（Proxy Auto Config）文件是一个小型的JavaScript程序的文本文件，后缀为.dat。<br>当浏览器访问网络的时候，会根据PAC文件中的JavaScript函数来选择恰当的代理服务器。</p>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>代理服务器可以获取用户的http Request的内容,因此我们应当注意使用HTTPS协议传输</p>
<h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><p>HTTP状态码的作用是：Web服务器用来告诉客户端，发生了什么事。</p>
<p>状态码位于HTTP Response 的第一行中，会返回一个”三位数字的状态码“和一个“状态消息”。 ”三位数字的状态码“便于程序进行处理， “状态消息”更便于人理解。 </p>
<h2 id="状态码分类"><a href="#状态码分类" class="headerlink" title="状态码分类"></a>状态码分类</h2><table>
<thead>
<tr>
<th>已定义范围</th>
<th>分类</th>
</tr>
</thead>
<tbody>
<tr>
<td>1XX    100-101</td>
<td>信息提示</td>
</tr>
<tr>
<td>2XX    200-206</td>
<td>成功</td>
</tr>
<tr>
<td>3XX    300-305</td>
<td>重定向</td>
</tr>
<tr>
<td>4XX    400-415</td>
<td>客户端错误</td>
</tr>
<tr>
<td>5XX    500-505</td>
<td>服务器错误</td>
</tr>
</tbody>
</table>
<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><h2 id="Cookie的分类"><a href="#Cookie的分类" class="headerlink" title="Cookie的分类"></a>Cookie的分类</h2><p>可以大致把Cookie分为2类： 回话cookie和持久cookie<br>会话cookie: 是一种临时的cookie，它记录了用户访问站点时的设置和偏好，关闭浏览器，会话cookie就被删除了<br>持久cookie: 存储在硬盘上，（不管浏览器退出，或者电脑重启，持久cookie都存在）， 持久cookie有过期时间</p>
<h2 id="cookie的位置"><a href="#cookie的位置" class="headerlink" title="cookie的位置"></a>cookie的位置</h2><p>cookie被存储在硬盘中,但不同的浏览器的cookie存储位置一般不同</p>
<h2 id="利用cookie自动登录的过程"><a href="#利用cookie自动登录的过程" class="headerlink" title="利用cookie自动登录的过程"></a>利用cookie自动登录的过程</h2><ol>
<li>浏览器访问某网站</li>
<li>浏览器将网站中已存在的cookie发往服务器</li>
<li>服务器判断这个cookie是否能够用作自动登录凭据,如有效则自动登录</li>
</ol>
<h2 id="cookie安全"><a href="#cookie安全" class="headerlink" title="cookie安全"></a>cookie安全</h2><p>cookie同样也可以用于跟踪你的行为和浏览轨迹,例如在数个网页上都拥有某个广告商的框架,他们会检测用户的cookie,若用户为老用户则向他们的数据库中写入当前的行为或者直接写入用户的cookie中.若为新用户则发送一段带有ID的cookie,那么第二次访问时新用户也成为了老用户.<br>在广告展示页面,通过读取cookie辨识用户推广相关的广告.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[摄像头成像原理]]></title>
      <url>https://ly11tea.github.io/2016/10/19/%E6%91%84%E5%83%8F%E5%A4%B4%E6%88%90%E5%83%8F%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="三个坐标系"><a href="#三个坐标系" class="headerlink" title="三个坐标系"></a>三个坐标系</h1><h2 id="1-图像坐标系"><a href="#1-图像坐标系" class="headerlink" title="1.图像坐标系:"></a>1.图像坐标系:</h2><p>在计算机系统中，描述图像的大小是像素，比如图像分辨率是1240*768.也就就是以为图像具矩阵rows是1024，cols是768.那原始图像的原点是在图像的左上角。<br><a id="more"></a><br><img src="/images/slam/1.png" style="width: 400px;"></p>
<p>图像坐标系实际上有<strong>两个</strong>,一个是像素为单位的直接坐标系u-v,一个是物理坐标系x,y<br>以图像左上角为原点建立以像素为单位的直接坐标系u-v。像素的横坐标u与纵坐标v分别是在其图像数组中所在的列数与所在行数。这是像素坐标，而不是物理坐标，为了后续的模型转换，有必要建立图像坐标系。<br>图像坐标系是以<strong>图像中心</strong>为原点，X轴和u轴平行，Y轴和v轴平行。dx和dy标示图像中每个像素在X轴和Y轴的物理尺寸，其实就是换算比例。比如图像大小是1024<em>768，图像坐标系x-y中大小为19</em>17.那么dx就是19/1024.<br>则图像中的每个像素在u-v坐标系中的坐标和在x-y坐标系中的坐标之间都存在如下的关系：<br><img src="/images/slam/2.png" style="width: 400px;"></p>
<p>(上述公式中我们假设物理坐标系中的<strong>单位为毫米，那么dx的的单位为:毫米/像素</strong>。那么x/dx的单位就是像素了，即和u的单位一样都是像素）<br>比如我们知道图像分辨率是1024<em>768，此时像素为（100,50），图像坐标系为是19</em>17mm。那么在图像坐标系是多少<br>根据转化和平移关系，知道U<sub>0</sub>为1024/2 = 512，v<sub>0</sub>为768/2 = 384.代入公式为x= (100-512)<em>19/1024.*</em>实际中图像坐标系还是比较容易获取。这是需要初始化，就能获取到的参数。<br>为了使用方便，可将上式用齐次坐标与矩阵形式表示为：<br><img src="/images/slam/3.png" style="width: 400px;"><br>其逆关系可表示为：<br><img src="/images/slam/4.png" style="width: 400px;"></p>
<h2 id="2、相机坐标系"><a href="#2、相机坐标系" class="headerlink" title="2、相机坐标系"></a>2、相机坐标系</h2><p><img src="/images/slam/5.png" style="width: 400px;"><br>相机成像的几何关系可由图2.2表示。其中O点为摄像机光心（投影中心），<strong>Xc轴和Yc轴与成像平面坐标系的x轴和y轴平行，Zc轴为摄像机的光轴</strong>，和图像平面垂直。光轴与图像平面的交点为图像的主点O1,由点<strong>O与Xc,Yc,Zc轴组成的直角坐标系称为摄像机的坐标系。OO1为摄像机的焦距。</strong></p>
<h2 id="3-世界坐标系（Xw-Yw-Zw）"><a href="#3-世界坐标系（Xw-Yw-Zw）" class="headerlink" title="3.世界坐标系（Xw Yw Zw）"></a>3.世界坐标系（Xw Yw Zw）</h2><p>用户定义的空间三维坐标系，用来描述三维空间中的物体和相机之间的坐标位置，满足右手法则</p>
<h1 id="三个坐标系间的相互关系"><a href="#三个坐标系间的相互关系" class="headerlink" title="三个坐标系间的相互关系"></a>三个坐标系间的相互关系</h1><h2 id="1、图像坐标系和相机坐标系之间的关系"><a href="#1、图像坐标系和相机坐标系之间的关系" class="headerlink" title="1、图像坐标系和相机坐标系之间的关系"></a>1、图像坐标系和相机坐标系之间的关系</h2><p><img src="/images/slam/6.png" style="width: 400px;"><br>如上图，图像平面实在的平面坐标系就是图像坐标系，由投影中心以及i,j,k(X,Y,Z)组成相机<br>坐标系。<br>1、在实际中主点不一定在成像仪（图像平面）的中心，为了对光轴可能存在的偏移<br>进行建模，我们引入两个新的参数：cx和cy。</p>
<p>2、在实际中，由于单个像素的在低价的成像仪上是矩形而不是正方形，我们引入了<br>两个不同的焦距参数：fx和fy。（这里的焦距是以像素为单位）则，我们假定物体在<br>相机坐标系统中的点Q,其坐标为(X,Y,Z),以某些偏移的方式投影为点<br>q(xsrceen,yscrreen)，其中srceen为下表，坐标关系如下：</p>
<p><img src="/images/slam/7.png" style="width: 400px;"></p>
<p>fx,fy和物理焦距F之间的关系为：fx=Fsx和fy=Fsy。其中sx表示x方向上的1毫米长度<br>所代表像素值，即单位像素/每毫秒，fx,fy是在相机标定中整体计算的，而不是通过该公式计算的。<br>在许多场合为了方便讨论,我们会把<strong>cx和cy略去f只考虑一个</strong>,那么式子就变为:</p>
<p><img src="/images/slam/8.png" style="width: 200px;"></p>
<p>化成矩阵形式:</p>
<p><img src="/images/slam/9.png" style="width: 200px;"></p>
<h2 id="2-刚体变换-从世界坐标系到相机坐标系"><a href="#2-刚体变换-从世界坐标系到相机坐标系" class="headerlink" title="2.刚体变换(从世界坐标系到相机坐标系)"></a>2.刚体变换(从世界坐标系到相机坐标系)</h2><p><img src="/images/slam/10.png" style="width: 400px;"></p>
<p>世界坐标系是为了描述相机的位置而被引入的，如图2.2中坐标系OwXwYwZw即为世界坐标系。平移向量t和旋转矩阵R可以用来表示相机坐标系与世界坐标系的关系。所以，假设空间点P在世界坐标系下的齐次坐标是(Xw,Yw,Zw,1)T，（这里T是上标转置），在相机坐标下的齐次坐标是(Xc,Yc,Zc,1)T,则存在如下的关系：</p>
<p><img src="/images/slam/11.png" style="width: 400px;"></p>
<p>化成齐次矩阵的形式就有</p>
<p><img src="/images/slam/12.png" style="width: 400px;"></p>
<p>上式中R是3×3的正交单位矩阵（也成为旋转矩阵），t是三维的平移向量。矢量0=(0,0,0),M1是4×4矩阵。<br>在实验中，比如我们设定经纬坐标是（48,42,15）的为世界坐标系的原点，X方向指向正北。但是在试验场中点(46,40,5)是相机坐标的系的原点，方向是正东。那么两者之间就存在一个转换关系。</p>
<h3 id="1、旋转矩阵R"><a href="#1、旋转矩阵R" class="headerlink" title="1、旋转矩阵R:"></a>1、旋转矩阵R:</h3><p>通常，任何维的旋转可以表示为坐标向量与合适尺寸的方阵的乘积。最终一个旋转等价于在另一个不同坐标系下对点位置的重新表述。坐标系旋转角度θ，则等同于目标点绕坐标原点反方向旋转同样的角度θ。图11-8显示了矩阵乘法对二维旋转的描述。在三维空间中，旋转可以分解为绕各自坐标轴的二维旋转（例如图11-8就是绕z轴旋转），其中旋转的轴线的度量保存不变(这就是为什么旋转矩阵为正交矩阵的缘由)。如果依次绕x,y,z轴旋转角度ψ，φ和θ，那么总的旋转矩阵R是三个矩阵Rx(ψ),Ry(φ),Rz(θ)的乘积，其中：</p>
<p><img src="/images/slam/13.png" style="width: 400px;"></p>
<p><img src="/images/slam/14.png" style="width: 400px;"></p>
<p>因此R=Rx(ψ),Ry(φ),Rz(θ).在绕X轴旋转时，<strong>到YZ的平面距离没有变化，所以X坐标没有变化，只是YZ坐标需要诚意旋转系数，其他矩阵同理。这个需要记住即可</strong><br><img src="/images/slam/15.png" style="width: 400px;"></p>
<h3 id="平移向量T"><a href="#平移向量T" class="headerlink" title="平移向量T:"></a>平移向量T:</h3><p><strong>平移向量用来表示怎么样将一个坐标系的原点移动到另外一个坐标系的原点，或者说平移向量是第一个坐标系原点与第二个坐标系原点的偏移量。</strong>因此，从以目标中心为原点的坐标系移动到以摄像机为中心的原点的另外一个坐标系，相应的平移向量为T=目标原点—摄像机原点。那么点在世界坐标系的中的坐标Po到在摄像机坐标系中Pc:<br>Pc=R(Po-T)<br>故，<strong>用三个角度ψ，φ和θ表示三维旋转，用三个参数(x,y,z)表示三维平移，共6个参数</strong>，对摄像机而言<strong>，OpenCV内参数矩阵有4个参数：fx,fy,cx,cy。故对于每一个视场的解需要10个参数。我们知道一个四边形的4个点可以提供8个方程，故至少需要两个视角才能解出全部几何参数</strong>。8*2=6+6+4。</p>
<h2 id="3-世界坐标系到图像坐标系的转换"><a href="#3-世界坐标系到图像坐标系的转换" class="headerlink" title="3.世界坐标系到图像坐标系的转换"></a>3.世界坐标系到图像坐标系的转换</h2><p>综上可知:<br>由原始图像与图像坐标的关系:<br><img src="/images/slam/16.png" style="width: 400px;"></p>
<p>由世界坐标系到相机坐标系的刚体变换:<br><img src="/images/slam/17.png" style="width: 400px;"></p>
<p>代入图像坐标系与相机坐标系的转换矩阵中:<br><img src="/images/slam/18.png" style="width: 400px;"></p>
<p>得到:<br><img src="/images/slam/19.png" style="width: 400px;"></p>
<p><img src="/images/slam/20.png" style="width: 400px;"></p>
<p>说明：上述公式中完成了从世界坐标系到图像坐标系的转变，中间经过了相机坐标系的过度，Xw中的w表示world世界，单位为毫米(主要取决于其中dx,dy的单位)，而u,v是的 单位为像素，即完成了从毫米——像素的转换。）<br>其中ax=f/dx,ay=f/dy；M是3×4的矩阵—投影矩阵，<strong>M1完全由相机的内参数ax,ay,u0,v0决定，(u0,v0)为主点坐标，ax,ay分别表示图像u轴和v轴上的尺度因子，M2则完全由相机的外部参数决定。而相机标定就是确定相机的内外参数。</strong><br>由式(2.7)可知，若已知相机的内外参数，则相当于已知投影矩阵M.当已知M和空间点P的坐标：矢量Xw=(Xw,Yw,Zw,1)T，（矢量Xw上面有一个矢量标识杠，T表示矢量的转置）。<strong>式(2.7)可以给出三个方程，消去Zc就可以得到其投影点p的坐标(u,v)（其实也就是我用一个相机就可以拍摄一个物体的图片了）</strong>。但是由于M为3×4不可逆矩阵，当 点P的投影坐标(u,v)和投影矩阵M为已知时，我们只能得到关于Xw,Yw,Zw的两个线性方程，即射线OP的方程，由上一篇图2.2我们可以看出，位于<strong>射线OP上的所有空间点的投影点（即图像点）都是p点。所以不能唯一确定空间点P的世界坐标矢量Xw.</strong><br>而深度摄像机得到了Zc,<br>故可以确定.</p>
<p><img src="/images/slam/21.png" style="width: 1500px;"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在ubuntu下使用SS并给gnome,terminal,git加上代理]]></title>
      <url>https://ly11tea.github.io/2016/10/17/%E5%9C%A8ubuntu%E4%B8%8B%E4%BD%BF%E7%94%A8SS%E5%B9%B6%E7%BB%99gnome-terminal-git%E5%8A%A0%E4%B8%8A%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>因为要编译google的slam库cartographer,所以要挂代理在google的git上下载一些源码,配置过程如下:</p>
<a id="more"></a> 
<h1 id="下载ss-qt5-gui"><a href="#下载ss-qt5-gui" class="headerlink" title="下载ss-qt5 gui"></a>下载ss-qt5 gui</h1><p>其实也可以使用命令行的ss,为了方便还是使用图形版的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install shadowsocks-qt5</div></pre></td></tr></table></figure></p>
<p>这里补充一下,如果使用apt由于包冲突不能够安装,可以选择aptitude,它能够详细分析包的依赖性,并提供多种安装方案:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install aptitude</div><div class="line">sudo aptitude update</div><div class="line">sudo aptitude  install XXX</div></pre></td></tr></table></figure></p>
<p>下载完成后,界面和windows版几乎一致,连接到ss服务器后,将在本地转发的服务器类型设为http(s).ubuntu下并不会帮你在系统内设置全局代理,接下来还需要自己配置</p>
<h1 id="设置Gnome的代理"><a href="#设置Gnome的代理" class="headerlink" title="设置Gnome的代理"></a>设置Gnome的代理</h1><p>进入系统设置中选择网络,可以看到代理服务器的设置项,设置好后.如果浏览器等设为跟随系统代理设置,则已经能够使用ss.</p>
<h1 id="设置terminal的代理"><a href="#设置terminal的代理" class="headerlink" title="设置terminal的代理"></a>设置terminal的代理</h1><p>terminal的代理通过设置几个全局变量实现:<br>如果只是在某个terminal使用一次:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export http_proxy=http://127.0.0.1:XXXX</div><div class="line">export https_proxy=http://127.0.0.1:XXXX</div><div class="line">export ftp_proxy=http://127.0.0.1:XXXX</div></pre></td></tr></table></figure></p>
<p>使用export定义全局变量</p>
<p>当然可以加入.bashrc中</p>
<p>如果在全系统范围内使用:<br>在/etc/environment中 加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http_proxy=http://127.0.0.1:XXXX</div><div class="line">https_proxy=http://127.0.0.1:XXXX</div><div class="line">ftp_proxy=http://127.0.0.1:XXXX</div></pre></td></tr></table></figure></p>
<p>要测试是否有效可以安装 curl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install curl</div><div class="line">curl icanhazip.com</div></pre></td></tr></table></figure></p>
<p>这样能返回你的外网ip,也可以使用wget测试</p>
<p>这只是一个全局变量,并不是所有的命令行工具都遵从这个参数,有时还要另行设置,如:</p>
<p>要在apt中使用:<br>在/etc/apt/apt.conf中添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Acquire::http::Proxy &quot;http://127.0.0.1:XXXX&quot;;</div><div class="line">Acquire::https::Proxy &quot;http://127.0.0.1:XXXX&quot;;</div><div class="line">Acquire::ftp::Proxy &quot;http://127.0.0.1:XXXX&quot;;</div></pre></td></tr></table></figure></p>
<h1 id="设置git的代理"><a href="#设置git的代理" class="headerlink" title="设置git的代理"></a>设置git的代理</h1><p>使用命令<br><code>git config --global http.proxy http://127.0.0.1:XXXX</code><br>在~/.gitconfig中可以看到相关联的字段<br>若要取消配置则可以:<br><code>git config --global http.proxy &#39;&#39;</code><br>或在.gitconfig中删除相关字段</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[符号表的应用]]></title>
      <url>https://ly11tea.github.io/2016/10/08/%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>科学或是工程领域能够将运行效率提升一千亿倍的发明极少一一我们已经在几个例子中看到，符号表做到了，并且这些改进的影响非常深远。<br><em>算法 第四版</em></p>
</blockquote>
<a id="more"></a> 
<h1 id="该使用哪种符号表的实现"><a href="#该使用哪种符号表的实现" class="headerlink" title="该使用哪种符号表的实现?"></a>该使用哪种符号表的实现?</h1><p>由之前的学习可以发现,符号表的实现应该首先在二叉查找树和散列表中选择.红黑树可以保证最坏情况下的性能且它能够支持的操作更多(如排名、选择、排序和范围查找),而散列表的优点在于代码更简单，且查找时间最优(接近常数).在不需要更多操作时,我们的第一选择应当是<strong>散列表</strong></p>
<h1 id="字典型使用范例"><a href="#字典型使用范例" class="headerlink" title="字典型使用范例"></a>字典型使用范例</h1><p>字典型:每一个键都有且仅有一个值与其相对应<br>csv文件就可以作为一个字典型的例子,每一行都有一个以逗号分隔的键值对.<br>下面的程序使用红黑树实现了从csv文件中读取键值对,并从标准输入中读入键值查找的功能.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Find_csv</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> keyfield=Integer.parseInt(args[<span class="number">1</span>]);</div><div class="line">		<span class="keyword">int</span> valuefield=Integer.parseInt(args[<span class="number">2</span>]);</div><div class="line">		</div><div class="line">		In csv=<span class="keyword">new</span> In(args[<span class="number">0</span>]);</div><div class="line">		ST&lt;String,String&gt; table=<span class="keyword">new</span> ST&lt;String,String&gt;();</div><div class="line">		<span class="keyword">while</span>(csv.hasNextLine())</div><div class="line">		&#123;</div><div class="line">			String line=csv.readLine();</div><div class="line">			String token[]=line.split(<span class="string">","</span>);</div><div class="line">			table.put(token[keyfield], token[valuefield]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">while</span>(!StdIn.isEmpty())</div><div class="line">		&#123;</div><div class="line">			String key=StdIn.readString();</div><div class="line">			<span class="keyword">if</span>(table.contains(key))</div><div class="line">				StdOut.println(table.get(key));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="索引类使用范例"><a href="#索引类使用范例" class="headerlink" title="索引类使用范例"></a>索引类使用范例</h1><p>生活中也有许多键对应多个值,例如一个电影的演员.同时有的时候还需要反向索引的功能,例如查找一个演员演得所有电影.<br>下面的代码,同时建立了正向和反向索引.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lookupindex</span> </span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></div><div class="line">	&#123;</div><div class="line">		In in=<span class="keyword">new</span> In(args[<span class="number">0</span>]);</div><div class="line">		ST&lt;String, Queue&lt;String&gt;&gt;table1=<span class="keyword">new</span> ST&lt;String, Queue&lt;String&gt;&gt;();<span class="comment">//正向</span></div><div class="line">		ST&lt;String, Queue&lt;String&gt;&gt;table2=<span class="keyword">new</span> ST&lt;String,Queue&lt;String&gt;&gt;();<span class="comment">//反向</span></div><div class="line">		<span class="keyword">while</span>(in.hasNextLine())</div><div class="line">		&#123;</div><div class="line">			String line=in.readLine();</div><div class="line">			String tokens[]=line.split(args[<span class="number">1</span>]);</div><div class="line">			String key=tokens[<span class="number">0</span>];</div><div class="line">			<span class="keyword">if</span>(!table1.contains(key))</div><div class="line">				table1.put(key, <span class="keyword">new</span> Queue&lt;String&gt;());</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tokens.length;i++)</div><div class="line">			&#123;</div><div class="line">				String value=tokens[i];</div><div class="line">				<span class="keyword">if</span>(!table2.contains(value))</div><div class="line">					table2.put(value,<span class="keyword">new</span> Queue&lt;String&gt;());</div><div class="line">				table1.get(key).enqueue(value);</div><div class="line">				table2.get(value).enqueue(key);</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">while</span>(!StdIn.isEmpty())</div><div class="line">			&#123;</div><div class="line">				String query=StdIn.readLine();</div><div class="line">				<span class="keyword">if</span>(table1.contains(query))</div><div class="line">					<span class="keyword">for</span>(String s:table1.get(query))</div><div class="line">						StdOut.println(<span class="string">" "</span>+s);</div><div class="line">				<span class="keyword">if</span>(table2.contains(query))</div><div class="line">					<span class="keyword">for</span>(String s:table2.get(query))</div><div class="line">						StdOut.println(<span class="string">" "</span>+s);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>生活中还有一种桌面搜索软件,可以帮我们查找文件以及文件中的内容,他们其实是通过遍历设备中的文件并建立一套反向索引,这样通过内容就可以查到文件<br>下面的程序实现了对文本文件中内容的查找<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filesearcher</span></span></div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span></div><div class="line">	&#123;</div><div class="line">		ST&lt;String, SET&lt;File&gt;&gt; table=<span class="keyword">new</span> ST&lt;String, SET&lt;File&gt;&gt;();</div><div class="line">		<span class="keyword">for</span>(String s:args)</div><div class="line">		&#123;</div><div class="line">			File file=<span class="keyword">new</span> File(s);</div><div class="line">			In in =<span class="keyword">new</span> In(file);</div><div class="line">			<span class="keyword">while</span>(!in.isEmpty())</div><div class="line">			&#123;</div><div class="line">				String word=in.readString();</div><div class="line">				<span class="keyword">if</span>(!table.contains(word))</div><div class="line">					table.put(word, <span class="keyword">new</span> SET&lt;File&gt;());</div><div class="line">				table.get(word).add(file);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">while</span>(!StdIn.isEmpty())</div><div class="line">		&#123;</div><div class="line">			String query=StdIn.readString();</div><div class="line">			<span class="keyword">if</span>(table.contains(query))</div><div class="line">				<span class="keyword">for</span>(File f:table.get(query))</div><div class="line">					StdOut.println(<span class="string">" "</span>+f.getName());</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="稀疏向量"><a href="#稀疏向量" class="headerlink" title="稀疏向量"></a>稀疏向量</h1><p>计算机中很多时候会用到矩阵和向量的乘法,如果使用直观的的方法实现通常只能得到平方级别效率的程序,但是实际应用中向量和矩阵是稀疏的,很多元素都为0.得益于这一性质我们使用稀疏向量进行运算.我们使用hash表存储非零的元素,键为元素在向量中的位置,值为元素的值.这样每一个hash表就是一个稀疏向量.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sparsevector</span> </span></div><div class="line">&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> LinearProbingHashST&lt;Integer, Double&gt; st;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Sparsevector</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		st=<span class="keyword">new</span> LinearProbingHashST&lt;Integer,Double&gt;();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> Double <span class="title">get</span><span class="params">(Integer key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!st.contains(key))</div><div class="line">			<span class="keyword">return</span> <span class="number">0.00</span>;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> st.get(key);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> st.size();</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Integer key,Double value)</span></span></div><div class="line">	&#123;</div><div class="line">		st.put(key, value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Double <span class="title">dot</span><span class="params">(Double[] num)</span></span></div><div class="line">	&#123;</div><div class="line">		Double sum=<span class="number">0.00</span>;</div><div class="line">		<span class="keyword">for</span>(Integer i:st.keys())</div><div class="line">			sum=sum+num[i]*st.get(i);</div><div class="line">		<span class="keyword">return</span> sum;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		Sparsevector[] test=<span class="keyword">new</span> Sparsevector[<span class="number">5</span>];</div><div class="line">		Double num[] =<span class="keyword">new</span> Double[<span class="number">5</span>];</div><div class="line">		Double result[]=<span class="keyword">new</span> Double[<span class="number">5</span>];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</div><div class="line">			result[i]=test[i].dot(num);</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 散列表]]></title>
      <url>https://ly11tea.github.io/2016/10/06/%E7%AE%97%E6%B3%954-%E6%95%A3%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>All roads lead to Rome.</p>
</blockquote>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>通过算术操作将键转化为数组的索引以将键值对存储在数组中或来访问数组中的键值对</p>
</blockquote>
<a id="more"></a> 
<h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h1><p>如果我们有一个能够保存M个键值对的数组，那么我们就需要一个能够将任意的键值转化为该数组范围内的索引( [0, M-1 ]范围内的整数)的散列函数。我们要找的散列函敛应该易于计算并且能够均匀分布所有的键，即对于任意键，0到m-1之间的每个整数都有<strong>相等</strong>的可能性与之对应(与健无关) 。<br>每一种类型都可能要对应于一种散列函数,例如对于整数,我们常用的是<strong>除留余数法</strong></p>
<p>总的来说好的散列方法需要满足下列性质:<br>等价性一一等价的键一定产生一样的散到值;<br>高效性一一计算简便;<br>均匀性一一均匀地散列到数组下标范围内</p>
<p>设计散列函数是计算机科学家的事情,但我们在使用时要确认:<br>我们使用的散列岳数能够均匀并独立地将所有的键散布于0到 M-l 之间</p>
<h1 id="基于拉链法实现的散列表"><a href="#基于拉链法实现的散列表" class="headerlink" title="基于拉链法实现的散列表"></a>基于拉链法实现的散列表</h1><p>将大小为 M的数组中的每个元素指向一条链表.每条链表中都存储着散列值为这个元素的键值对,这种方法被称为拉链法.<br><img src="/images/lalianbiao.png" style="width: 260px;"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>我们为数组内部的M个元素分别构造符号表</li>
<li>先在散列表的put,get方法中使用散列函数计算是哪一个符号表元素,再用符号表的put,get方法插入或提取元素</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> alg;</div><div class="line"></div><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.SequentialSearchST;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeparatechainingHashST</span> &lt;<span class="title">Key</span>,<span class="title">Value</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> m;<span class="comment">//hash表的数量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> n;<span class="comment">//元素总的数量</span></div><div class="line">	SequentialSearchST&lt;Key, Value&gt;[] st;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SeparatechainingHashST</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>(<span class="number">997</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SeparatechainingHashST</span><span class="params">(<span class="keyword">int</span> number)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">this</span>.m=number;</div><div class="line">		st= (SequentialSearchST&lt;Key, Value&gt;[]) <span class="keyword">new</span> SequentialSearchST[number];<span class="comment">//java不支持数组的泛型定义,故只能使用类型转换的方法</span></div><div class="line">		<span class="keyword">this</span>.n=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">			st[i]=<span class="keyword">new</span> SequentialSearchST&lt;Key,Value&gt;();</div><div class="line">	&#125;</div><div class="line">  </div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span><span class="comment">//生成对应的数组下标</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> (key.hashCode()&amp;<span class="number">0x7fffffff</span>)%m;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Value <span class="title">get</span> <span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> st[hash(key)].get(key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span> <span class="params">(Key key,Value value)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!st[hash(key)].contains(key))</div><div class="line">			n++;</div><div class="line">		st[hash(key)].put(key, value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		st[hash(key)].delete(key);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>在一张含有 M条链表和 N个键的的散列表中未命中查我和插入操作所需要的比较次数为 ~N/M<br>使用拉链法的一个好处就是这在N和M的选取上不需要太多的斟酌:<br>M偏小,N偏大时时间只会稍稍变长<br>而M偏大时,虽然浪费了空间但速度很快,甚至能够达到常数级别</p>
<h2 id="有序操作"><a href="#有序操作" class="headerlink" title="有序操作"></a>有序操作</h2><p>因为散列函数需要将键值分散,故已经失去了有序信息,所以在要使用到有序操作的地方,<strong>散列表不是一个好选择</strong></p>
<h1 id="基于线性探测法的散列表"><a href="#基于线性探测法的散列表" class="headerlink" title="基于线性探测法的散列表"></a>基于线性探测法的散列表</h1><p>与拉链法的思路不同,我们也可以直接新建一个一维的总量大于元素数量的符号表数组,当出现碰撞冲突的时候直接使用数组中的空位解决,这种方法叫做开放地址法<br>线性探测法也是开放地址法的一种,对于要插入的键在算出对应的hash值并得到插入下标后,有三种情况:</p>
<ol>
<li>这个下标无元素,那么直接插入键值对 </li>
<li>这个下标的键同要插入键不同,那么将下标加1,循环这个过程,<strong>若已越过数组最后一个元素,则从数组首元素继续开始.</strong></li>
<li>这个下表的键同要插入的键相同,则更新对应的值<br>这样的方法叫做线性探测法<br>在代码实现上我们使用两个平行数组,分别存贮键和值.<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinarProbingHashST</span>&lt;<span class="title">Key</span>,<span class="title">Value</span>&gt;</span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> m;<span class="comment">//总容量</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> n;<span class="comment">//当前容量</span></div><div class="line">	Key[] keys;</div><div class="line">	Value[] values;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinarProbingHashST</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		keys=(Key[])<span class="keyword">new</span> Object[m];</div><div class="line">		values=(Value[])<span class="keyword">new</span> Object[m];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LinarProbingHashST</span><span class="params">(<span class="keyword">int</span> cap)</span></span></div><div class="line">	&#123;</div><div class="line">		m=cap;</div><div class="line">		keys=(Key[])<span class="keyword">new</span> Object[m];</div><div class="line">		values=(Value[])<span class="keyword">new</span> Object[m];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key,Value val)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(n&gt;=m/<span class="number">2</span>)</div><div class="line">			resize(m*<span class="number">2</span>);</div><div class="line">		<span class="keyword">if</span>(key==<span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span>(i=hash(key);keys[i]!=<span class="keyword">null</span>;i=(i+<span class="number">1</span>)%m)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(keys[i]==key)</div><div class="line">			&#123;</div><div class="line">				values[i]=val;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		keys[i]=key;</div><div class="line">		values[i]=val;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> (key.hashCode()&amp;<span class="number">0x7fffffff</span>)%m;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(key==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> i;</div><div class="line">		<span class="keyword">for</span>(i=hash(key);keys[i]!=<span class="keyword">null</span>;i=(i+<span class="number">1</span>)%m)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span>(keys[i]==key)</div><div class="line">				<span class="keyword">return</span> values[i];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span>(get(key)!=<span class="keyword">null</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>需要注意的是这里的下标处理方式,使用取余的方法使得下标不越界,并循环往复<br>当然我们可以看到get方法是在查找键时若遇到空键则证明无此键,返回未命中.<br>由上述代码我们可以发现,键值中的null十分重要,他标志着一次搜索的终结,因此在删除符号表内容时,我们不能简单的只将对应的键值对置null还必须将其后直到null边界的键值对重新插入.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(!contains(key))</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> i=hash(key);</div><div class="line">		<span class="keyword">while</span>(keys[i]!=key)</div><div class="line">			i=(i+<span class="number">1</span>)%m;</div><div class="line">		keys[i]=<span class="keyword">null</span>;</div><div class="line">		values[i]=<span class="keyword">null</span>;</div><div class="line">		i=(i+<span class="number">1</span>)%m;</div><div class="line">		<span class="keyword">while</span>(keys[i]!=<span class="keyword">null</span>)</div><div class="line">		&#123;</div><div class="line">			Key keysave=keys[i];</div><div class="line">			Value valsave=values[i];</div><div class="line">			keys[i]=<span class="keyword">null</span>;</div><div class="line">			values[i]=<span class="keyword">null</span>;</div><div class="line">			n--;</div><div class="line">			put(keysave, valsave);</div><div class="line">			i=(i+<span class="number">1</span>)%m;</div><div class="line">		&#125;</div><div class="line">		n--;</div><div class="line">		<span class="keyword">if</span>(n&gt;<span class="number">1</span>&amp;&amp;n&lt;m/<span class="number">8</span>)</div><div class="line">			resize(m/<span class="number">2</span>);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>数组的大小对于基于线性探测法的散列表也十分重要:</p>
<ol>
<li>全满的数组是<strong>不可以</strong>的,因为这将失去null元素,不能命中的查找会变成死循环.</li>
<li><strong>α =N/M</strong>(n为当前符号表键值对数量,m为数组总的大小)<strong>越大</strong>,就有可能产生更长的键簇,<strong>查找也就更慢</strong>.</li>
</ol>
<p>因此我们在代码中若n&gt;=m/2就扩大一倍数组大小,若n&lt;=m/8就缩小一倍数组大小.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> capcity)</span></span></div><div class="line">&#123;</div><div class="line">	LinarProbingHashST&lt;Key, Value&gt;t=<span class="keyword">new</span> LinarProbingHashST&lt;Key,Value&gt;(capcity);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</div><div class="line">		<span class="keyword">if</span>(keys[i]!=<span class="keyword">null</span>)</div><div class="line">			t.put(keys[i],values[i]);</div><div class="line">	m=t.m;</div><div class="line">	values=t.values;</div><div class="line">	keys=t.keys;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python的装饰器]]></title>
      <url>https://ly11tea.github.io/2016/10/05/python%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>有些面具戴得太久,就摘不下来了。<br><em>盗墓笔记</em></p>
</blockquote>
<a id="more"></a> 
<p>在python中有时我们需要封装一个现有的函数,在不改变现有函数体内容的大前提下,正常执行函数,并在函数执行前后做一些操作.这种做法在调试阶段十分必要.<br>这种情况下我们需要用到python的装饰器功能<br>装饰器的语法是:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="meta">@decorator_name('decorator_arg')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    .....</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_name</span><span class="params">(decorator_arg)</span>:</span><span class="comment">#带参数装饰器外层</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span><span class="comment">#基础框架开始</span></div><div class="line"><span class="meta">        @functools.wraps(func)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">             <span class="comment">#todo 在调用函数前要做的事</span></div><div class="line">             rst = func(*args,**kwargs)</div><div class="line">             <span class="comment">#todo 调用后要做的事</span></div><div class="line">             <span class="keyword">return</span> rst</div><div class="line">          <span class="keyword">return</span> wrapper    <span class="comment">#基础框架结束</span></div><div class="line">    <span class="keyword">return</span> decorator <span class="comment">#带参数装饰器外层结束</span></div><div class="line">    </div><div class="line"><span class="meta">@decorator_name</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></div><div class="line">    </div><div class="line"> <span class="comment">#如果装饰器函数不需要参数则可省略最外层:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span> <span class="comment">#框架开始</span></div><div class="line"><span class="meta">@functools.wraps(func)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    <span class="comment">#todo 前环绕</span></div><div class="line">    rst = func(*args,**kwargs)</div><div class="line">    <span class="comment">#todo 后环绕</span></div><div class="line">    <span class="keyword">return</span> rst</div><div class="line"><span class="keyword">return</span> wrapper <span class="comment">#框架结束</span></div></pre></td></tr></table></figure></p>
<p>其中<br>@decorator_name(‘decorator_arg’)<br>def func():<br>就相当于func=decorator_name(‘decorator_arg’)(func)<br>即将装饰函数生成的对象付给被装饰的函数,这样调用时的函数就进行了封装<br>以第一个框架为例,易得装饰函数的执行顺序是17-26-18-19-25-21-24.函数既接受了装饰器参数,由接受了原有函数的参数(第三层),并且还传递了函数的返回值,达到了装饰器的要求<br>其中@functools.wraps(func)还保证了内层封装函数的函数名同被装饰函数一致.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python的迭代器和生成器]]></title>
      <url>https://ly11tea.github.io/2016/10/05/python%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>一尺之捶,日取其半,万世不竭<br><em>庄子</em></p>
</blockquote>
<a id="more"></a> 
<h1 id="python的生成器"><a href="#python的生成器" class="headerlink" title="python的生成器"></a>python的生成器</h1><p>如果从迭代的视角来说,生成器给了我们一种简易的方法制作出一种可迭代对象.从关系上来时,我们可以称生成器是迭代器的真子集.<br>最简单的一种定义生成器的语法是定义一个列表生成式,这个生成式以()包围,这种语法返回的的就是一个惰性列表,所谓惰性列表,就是其中保存的只是得出列表中下一个元素的数学关系,直到需要下一个元素时才进行计算.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">l=(x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line">print(l)</div><div class="line">print(next(l))</div></pre></td></tr></table></figure></p>
<p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;generator object &lt;genexpr&gt; at 0x01FFE510&gt;</div><div class="line">0</div></pre></td></tr></table></figure></p>
<p>更为常用的方法是将函数改写为一个生成器,将函数中的return语句改为yield语句,这样我们就得到了一个可以定义生成器对象的函数,生成的生成器对象,在每次调用时候执行，遇到yield语句返回，再次执行时<strong>从上次返回的yield语句处继续执行。</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">yanghui</span><span class="params">()</span>:</span></div><div class="line">	l=[<span class="number">1</span>]</div><div class="line">	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">		<span class="keyword">yield</span> l</div><div class="line">		l.append(<span class="number">0</span>)</div><div class="line">		l=[l[i]+l[i<span class="number">-1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(l))]</div><div class="line">l=yanghui()</div><div class="line">print(next(l))</div><div class="line">print(next(l))</div><div class="line">print(next(l))</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[1]</div><div class="line">[1, 1]</div><div class="line">[1, 2, 1]</div></pre></td></tr></table></figure>
<p>我们可以看到在这个输出杨辉三角的小程序中,上一次计算的结果都被继承.当然我们还可以像其他可迭代对象一样使用它<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</div><div class="line">    <span class="keyword">print</span> i</div><div class="line">    n=n+<span class="number">1</span></div><div class="line">    <span class="keyword">if</span> n==<span class="number">10</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<h1 id="python的迭代器"><a href="#python的迭代器" class="headerlink" title="python的迭代器"></a>python的迭代器</h1><p>我们把python中能够向下迭代的对象都叫做iterable对象,例如list,tuple,dict,生成器等等<br>而在这其中生成器<strong>在使用时不能预知其长度,知道需要下一个值时才进行计算</strong>,我们在python中称为iterator,iterator可以使用next函数得出下一刻的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">l=[1,2,8,3]</div><div class="line">next(l)</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;C:\Users\ly\Desktop\test2.py&quot;, line 127, in &lt;module&gt;</div><div class="line">    next(l)</div><div class="line">TypeError: &apos;list&apos; object is not an iterator</div></pre></td></tr></table></figure>
<p>由上面的例子也可以看出,列表虽然iterable,但并不是iterator,利用迭代器与生成器我们可以很便捷的完成一些数学操作,例如:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_odd_generator</span><span class="params">()</span>:</span></div><div class="line">	n=<span class="number">1</span></div><div class="line">	<span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">		n=n+<span class="number">2</span></div><div class="line">		<span class="keyword">yield</span> n</div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_notdivisable</span><span class="params">(n)</span>:</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">lambda</span> x:x%n&gt;<span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">primes</span><span class="params">()</span>:</span></div><div class="line">	<span class="keyword">yield</span> <span class="number">2</span></div><div class="line">	it=_odd_generator()<span class="comment">#第一次使用奇数生成器相当于剔除了能被2整除的数</span></div><div class="line">	<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">		n=next(it)</div><div class="line">		<span class="keyword">yield</span> n</div><div class="line">		it=filter(_notdivisable(n),it)<span class="comment">#给惰性队列加入新的剔除条件,并更新it</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> primes():</div><div class="line">	<span class="keyword">if</span>(i&lt;<span class="number">10</span>):</div><div class="line">		print(i)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		<span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<p>这段代码不但用到了generator还用到了filter,他们都用来生成iterator对象(惰性队列),这段代码使用埃氏筛法计算队列,原理是生成一个从二开始的数列,2是是素数紧接着剔除2以后所有能被2整除的数,然后在新得到的数列中向后移一位(到3),这个数也是素数并提出这个数以后所有能被其整除的数,以此类推…<br>而如果我们使用py的iterator,就可以不必要计算出一定长度的数列,而是在每次计算中利用filter加入下一个数的整除剔除条件到iterator,产生新的iterator,这样使用iterator得出的素数每次都符合条件</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python 的文件读写和file-like Object]]></title>
      <url>https://ly11tea.github.io/2016/09/26/python-%E7%9A%84%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%92%8Cfile-like-Object/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>In UNIX, everything is a file.</p>
</blockquote>
<a id="more"></a> 
<h1 id="file-like-Object"><a href="#file-like-Object" class="headerlink" title="file-like Object"></a>file-like Object</h1><p>要想操纵一个文件你必须要使用open函数打开文件,open函数返回一个类文件对象,这就是这个文件在python中的抽象表示.</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><blockquote>
<p>open(file[, mode][, buffering][, encoding][, errors][, newline][, closefd=True])<br>方括号里的内容均可以省略.</p>
</blockquote>
<p>其中<br>file： 要打开的文件名，需加路径(除非是在当前目录)。唯一强制参数<br>mode： 文件打开的模式<br>buffering： 设置buffer（取值为0,1,&gt;1）<br>　0： 代表buffer关闭（只适用于二进制模式）<br>　1： 代表line buffer（只适用于文本模式）<br>encoding： 返回数据的编码（一般为UTF8或GBK）<br>errors： 报错级别（一般为strict，ignore）<br>　strict： 字符编码出现问题时会报错<br>　ignore： 字符编码出现问题时程序会忽略而过，继续执行下面的程序<br>newline： 用于区分换行符(只对文本模式有效，可以取的值有None,’\n’,’\r’,”,’\r\n’)<br>closefd： 传入的file参数类型（缺省为True）<br>　True： 传入的file参数为文件的文件名<br>　False： 传入的file参数只能是文件描述符<br>　Ps： 文件描述符，就是一个非负整数，在Unix内核的系统中，打开一个文件，便会返回一个文件描述符。<br>　<br>常用的参数有mode,encoding,buffering:</p>
<h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><p>mode：文件打开的模式。有如下几种模式<br>‘r’： 以只读模式打开（缺省模式）（必须保证文件存在）<br>‘w’：以只写模式打开。若文件存在，则会<strong>自动清空文件</strong>，然后重新创建；若文件不存在，则新建文件。使用这个模式必须要保证文件所在目录存在，文件可以不存在。<br>‘a’：以追加模式打开。若文件存在，则会追加到文件的末尾；若文件不存在，则新建文件。</p>
<p>要注意上面的<code>a</code>,<code>w</code>模式如果不用下面的<code>+</code>修饰是不能使用read…类的的函数的</p>
<p>下面四个模式要和上面的模式组合使用<br>‘b’：以二进制模式打开<br>‘t’： 以文本模式打开（缺省模式）<br>‘+’：以读写模式打开<br>‘U’：以通用换行符模式打开</p>
<p>所以加起来的组合有下面几种:</p>
<table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">r</td>
<td style="text-align:left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td style="text-align:center">rb</td>
<td style="text-align:left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td style="text-align:center">r+</td>
<td style="text-align:left">打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td style="text-align:center">rb+</td>
<td style="text-align:left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td style="text-align:center">w</td>
<td style="text-align:left">打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:center">wb</td>
<td style="text-align:left">以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:center">w+</td>
<td style="text-align:left">打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:center">wb+</td>
<td style="text-align:left">以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td style="text-align:center">a</td>
<td style="text-align:left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td style="text-align:center">ab</td>
<td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td style="text-align:center">a+</td>
<td style="text-align:left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td style="text-align:center">ab+</td>
<td style="text-align:left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody>
</table>
<h2 id="文件读写的方法"><a href="#文件读写的方法" class="headerlink" title="文件读写的方法"></a>文件读写的方法</h2><h3 id="close-方法"><a href="#close-方法" class="headerlink" title="close()方法"></a>close()方法</h3><p>File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。为了防止可能的<strong>写入丢失</strong>,应该在每次关闭时都使用close()方法<br>语法：<br><code>fileObject.close();</code></p>
<h3 id="write-方法"><a href="#write-方法" class="headerlink" title="write()方法"></a>write()方法</h3><p>write()方法可将任何<strong>字符串</strong>写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<br>write()方法<strong>不会自动</strong>在字符串的结尾添加换行符(‘\n’)：<br>语法：<br><code>fileObject.write(string);</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fo = open(<span class="string">"a.txt"</span>, <span class="string">"wb"</span>)</div><div class="line">fo.write( <span class="string">"l\n"</span>);</div></pre></td></tr></table></figure>
<h3 id="read-方法"><a href="#read-方法" class="headerlink" title="read()方法"></a>read()方法</h3><p>read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<br>语法：<br>fileObject.read([count]);<br>在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是<strong>直到文件的末尾</strong>。</p>
<h2 id="文件定位的方法"><a href="#文件定位的方法" class="headerlink" title="文件定位的方法"></a>文件定位的方法</h2><h3 id="tell-方法"><a href="#tell-方法" class="headerlink" title="tell()方法"></a>tell()方法</h3><p>告诉你file-like Object在文件内的当前位置；换句话说，下一次的读写会发生在文件开头这么多字节之后。<br>语法：<br>fileObject.tell();</p>
<h3 id="seek-方法"><a href="#seek-方法" class="headerlink" title="seek()方法"></a>seek()方法</h3><p>语法:<br>fileObject.seek（offset [,from]）<br>方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置(默认为0)<br>如果from被设为0，这意味着将文件的开头作为移动字节的参考位置。如果设为1，则使用当前的位置作为参考位置。如果它被设为2，那么该文件的末尾将作为参考位置。</p>
<h2 id="文件迭代"><a href="#文件迭代" class="headerlink" title="文件迭代"></a>文件迭代</h2><p>在Python中，文件不仅仅是一个对象，而且是一个可迭代对象！,我们可以<strong>按行</strong>迭代它.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:</div><div class="line">	print(line)</div></pre></td></tr></table></figure></p>
<p>由上面的文件定位方法,我们可以看出file_like object指向的文件位置是可以变动.所以要注意file like object的指向位置</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python函数的参数]]></title>
      <url>https://ly11tea.github.io/2016/09/26/python%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>All roads lead to Rome.</p>
</blockquote>
<a id="more"></a> 
<p>python函数的参数使用非常灵活,有位置参数,默认参数,和多种的可变参数.其中可变参数的使用相较其他语言更加的便捷.现总结如下:</p>
<h1 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h1><p>位置参数是最常见的标准化参数。位置参数必须以在被调用函数中定义的<strong>准确顺序</strong>来传递。另外，没有任何默认参数）的话，传入函数（调用）的参数的精确的<strong>数目</strong>必须和声明的数字一致。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def power(a,b)</div><div class="line"></div><div class="line">power(1,2)#少了一个参数都会出现错误</div></pre></td></tr></table></figure></p>
<h1 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h1><p>对于默认参数如果在函数调用时没有为参数提供值则使用预先定义的的默认值。这些定义在函数声明的标题行中给出。c++也支持默认参数，和 python 有同样的语法：参数名等号默认值。<br>值得注意的是,同c++也一样,<strong>所有的位置参数必须出现在任何一个默认参数之前</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span><span class="params">(a,b=<span class="number">12</span>)</span></span></div></pre></td></tr></table></figure></p>
<p>同时还要注意的是,如果使用python中的<strong>可变对象</strong>作为默认参数,可能会继承上一次调用函数的结果,出现不想要的现象.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myadd</span><span class="params">(a,b=[])</span>:</span></div><div class="line">	b.append(a)</div><div class="line">	<span class="keyword">return</span> b</div><div class="line">	</div><div class="line">print(myadd(<span class="number">2</span>))</div><div class="line">print(myadd(<span class="number">3</span>))</div></pre></td></tr></table></figure></p>
<p>输出的结果是<br>[2]<br>[2, 3]<br>而非<br>[2]<br>[3]</p>
<h1 id="非关键字可变长参数（元组）"><a href="#非关键字可变长参数（元组）" class="headerlink" title="非关键字可变长参数（元组）"></a>非关键字可变长参数（元组）</h1><p>当函数被调用的时候，所有的形参（必须的和默认的）都将值赋给了在函数声明中相对应的局部变量。<strong>剩下</strong>的非关键字参数按顺序插入到一个<strong>元组</strong>中便于访问<br>同样的,可变长的参数元组必须在位置参数和默认参数之后:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">var</span><span class="params">(*a)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	<span class="keyword">for</span> ele <span class="keyword">in</span> a:</div><div class="line">		<span class="keyword">print</span> (ele)</div><div class="line">	</div><div class="line">var(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</div></pre></td></tr></table></figure></p>
<p>输出为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;tuple&apos;&gt;</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td></tr></table></figure></p>
<h1 id="关键字变量参数-dict"><a href="#关键字变量参数-dict" class="headerlink" title="关键字变量参数(dict)"></a>关键字变量参数(dict)</h1><p>在我们有不定数目的或者额外集合的关键字的情况中，参数被放入一个字典中，字典中键为参数名，值为相应的参数值。为什么一定要是字典呢?因为为每个参数-参数的名字和参数值–都是成对给出—用字典来保存这些参数自然就最适合不过了。 </p>
<p>为了区分关键字参数和非关键字非正式参数，使用了双星号（**）标识符,同样的关键字参数必须位于<strong>位置参数,默认参数和非关键字可变长参数</strong>之后</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(**a)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	<span class="keyword">for</span> ele <span class="keyword">in</span> a.keys():</div><div class="line">		<span class="keyword">print</span> (ele,a[ele])</div><div class="line">vardict(city=<span class="string">'Beijing'</span>,job=<span class="string">'Engineer'</span>)</div></pre></td></tr></table></figure>
<p>输出为:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;class 'dict'&gt;</div><div class="line">job Engineer</div><div class="line">city Beijing</div></pre></td></tr></table></figure></p>
<h1 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h1><p>对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过kw检查。<br>如果要限制关键字参数的名字，就可以用命名关键字参数,语法如下:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *, city, job)</span>:</span></div><div class="line">    print(name, age, city, job)</div><div class="line"><span class="comment">#命名关键字参数需要一个特殊分隔符*，*后面的参数被视为命名关键字参数</span></div><div class="line"><span class="comment">#如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(name, age, *args, city, job)</span>:</span></div><div class="line">    print(name, age, args, city, job)</div><div class="line">    </div><div class="line"><span class="comment">#调用时要加上参数名</span></div><div class="line">person(<span class="string">'bert'</span>,<span class="number">22</span>,<span class="number">2</span>,<span class="number">3.</span>..,city=<span class="string">'sh'</span>,job=<span class="string">'tea'</span>)</div></pre></td></tr></table></figure></p>
<p>例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(a,b,*,c,d)</span>:</span></div><div class="line">	print(type(c))</div><div class="line">	print(a,b,c,d)</div><div class="line">vardict(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>,d=<span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>输出为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;int&apos;&gt;</div><div class="line">1 2 3 4</div></pre></td></tr></table></figure></p>
<p>值得注意的是:在使用这些参数类型时,要遵循的顺序是:<br><strong>必选参数、默认参数、可变参数、命名关键字参数和关键字参数</strong></p>
<h1 id="基于调用函数的参数概念"><a href="#基于调用函数的参数概念" class="headerlink" title="基于调用函数的参数概念"></a>基于调用函数的参数概念</h1><p>上面的概念都是相对于定义函数参数而言的,下面的两个概念与调用函数相关</p>
<h2 id="参数组"><a href="#参数组" class="headerlink" title="参数组"></a>参数组</h2><p>通过一个把元组（非关键字 参数）或字典（关键字参数）作为参数组传递给函数。</p>
<blockquote>
<p>func(<em>tuple_grp_nonkw_args, *</em>dict_grp_kw_args)</p>
</blockquote>
<p>tuple_grp_nonkw_args对应于非关键字参数,dict_grp_kw_args对应于关键字参数.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(a,b)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	print(a,b)</div><div class="line"></div><div class="line">a=(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">vardict(*a)</div></pre></td></tr></table></figure></p>
<p>输出为:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class 'int'&gt;</div><div class="line">1 2</div></pre></td></tr></table></figure></p>
<h2 id="关键字调用参数"><a href="#关键字调用参数" class="headerlink" title="关键字调用参数"></a>关键字调用参数</h2><p>让调用者通过函数调用中的参数名字来区分参数。这样规范允许参数缺失或者不按顺序,因为解释器能通过给出的关键字来匹配参数的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vardict</span><span class="params">(a,b)</span>:</span></div><div class="line">	print(type(a))</div><div class="line">	print(a,b)</div><div class="line"></div><div class="line">a=(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">vardict(b=<span class="number">5</span>,a=<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>输出结果为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;int&apos;&gt;</div><div class="line">2 5</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 平衡查找树]]></title>
      <url>https://ly11tea.github.io/2016/09/25/%E7%AE%97%E6%B3%954-%E5%B9%B3%E8%A1%A1%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>天之道,损有余而补不足.<br><em>道德经</em></p>
</blockquote>
<p>目的:寻找一种数据结构,这种结构无论在任何插入情况下都能保证对数级别的运行时间.<br><a id="more"></a> </p>
<h1 id="2-3查找树"><a href="#2-3查找树" class="headerlink" title="2-3查找树"></a>2-3查找树</h1><p>我们将一棵标准的二叉查找树小的结点称为 2- 结点(含有一个键和两条链接), 而现在我们引人 3- 结点，它含有两个键和三条链接。</p>
<blockquote>
<p>定义:一棵2-3 查找树或为一棵空树，或由以下两种结点组成:<br>2- 结点，含有一个键(及其对应的值)和两条链接，左链接指向的 2-3 树中的键都<strong>小子</strong>该结点，右链接指向的 2-3 树中的键都<strong>大于</strong>该给点。<br>3- 结点，含有两个键(及其对应的值)和三条链接，左链接指向的 2-3 树中的键都<strong>小于</strong>该结点，中链接指向的2-3树中的键都位于该结点的两个键<strong>之间</strong>，右链接指向的 2-3树中的键都<strong>大于</strong>该给点。</p>
</blockquote>
<p><img src="images\black_red_tree\2_3tree.png" style="width: 260px;"></p>
<p>下面来重点谈谈2-3查找树的插入过程:</p>
<ol>
<li>向 2- 结点中插入新键:如果要在一个2-节点上插入新键,只需要将这个2-节点改为3-节点即可.<br><img src="images\black_red_tree\1.png" style="width: 260px;"></li>
<li>向只有一个3-节点的树中插入新键:直接向新键插入3-节点中,于是当前节点拥有三个键,四个连接,所以可以分解为三个二叉搜索树的节点,中间节点作为根节点,左节点为最小节点,右节点为最大节点.<br><img src="images\black_red_tree\2.png" style="width: 260px;"></li>
<li>向一个父节点为2-节点的3-节点插入新键:直接将新键插入当前节点中,于是当前节点拥有三个键,四个连接,但此时我们把中间键上浮至2-父节点.使父节点变为3-节点.<br><img src="images\black_red_tree\3.png" style="width: 260px;"></li>
<li><p>向一个父结点为 3- 结点的 3- 结点中插入新键:我们仍然将新键插入当前节点中,再次分解为三个2-节点,但此时上浮的根节点,会将其父节点也变为4-节点,所以我们再次重复,直到找到2-节点为止.<br><img src="images\black_red_tree\4.png" style="width: 260px;"></p>
</li>
<li><p>分解根节点:如果一个新插入键值路途上的所有节点都是3-节点,那么根节点也就变成了4-节点,此时我们套用情况2,将4-节点化为3个2-节点,树高+1<br><img src="images\black_red_tree\5.png" style="width: 260px;"></p>
</li>
</ol>
<p>特点:</p>
<ul>
<li>2-3查找树的每次插入都是局部性的,即对全局没有影响.</li>
<li>和标准的二叉态钱树由上向下生长不同. 2-3 树的生长是由下向上的。</li>
<li>性能:<strong>查找和插入操作访问的结点必然不超过 lgN个</strong></li>
</ul>
<h1 id="红黑二叉查找树"><a href="#红黑二叉查找树" class="headerlink" title="红黑二叉查找树"></a>红黑二叉查找树</h1><p>2-3查找树虽然带来了显著的性能改善,但是也增加了数据结构的复杂度和编码的难度,如果采用不当的编码方式,有可能造成性能低于二叉树;所以我们采用红黑树的方法,在二叉树的基础上实现了2-3查找树<br>我们们将树的链接分为两种类型:</p>
<ol>
<li>红链接将2个2-结点连接起来构成一个 3- 结点.</li>
<li>黑链接则是2-3查找树上的普通连接<br>确切地说,我们将 3- 结点表示为一条左斜的红色链接相连的2个2-节点<br>图</li>
</ol>
<blockquote>
<p>定义:一种带有红黑链接的二叉查找树:</p>
<ol>
<li>红链接均为左链接;</li>
<li>没有任何一个结点问时和两条红链接相连:</li>
<li>该树是完美黑色平衡的(任意空连接到根节点的黑色链接的数量是相同的)</li>
</ol>
</blockquote>
<p>一棵红黑树的红链接拉平.那么所有的空链接到根结点的距离都是相同的。 如果将所有由红链接相应的点结合,得到的就是一棵 2-3 树。<br>图</p>
<h2 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h2><p>我们在节点中表示链接的颜色(除根节点外.每个节点都有且仅有一条指向自己的链接).<br>约定:</p>
<ol>
<li>一个结点的颜色,指的是<strong>指向该结点的链接的颜色</strong></li>
<li>颜色变量类型为bool值,true代表红色,false代表黑色.</li>
<li>空节点颜色为黑色</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackRedTree</span> &lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;,<span class="title">Value</span>&gt; </span></div><div class="line">&#123;</div><div class="line">	Node root;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> Red=<span class="keyword">true</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> Black=<span class="keyword">true</span>;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></div><div class="line">	&#123;</div><div class="line">		Key key;</div><div class="line">		Value value;</div><div class="line">		Node left,right;</div><div class="line">		<span class="keyword">int</span> N;</div><div class="line">		<span class="keyword">boolean</span> colour;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key,Value value,<span class="keyword">int</span> N,<span class="keyword">boolean</span> colour)</span></span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">this</span>.key=key;</div><div class="line">			<span class="keyword">this</span>.value=value;</div><div class="line">			<span class="keyword">this</span>.colour=colour;</div><div class="line">			<span class="keyword">this</span>.N=N;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isRed</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> Black;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> node.colour==Red;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h2><p>在插入新的键时我们可以使用旋转保证2-3树和红黑树之间的一一对应关系，因为旋转操作可以保持红黑树的两个重要性质:<strong>有序性和完美平衡性</strong>。<br>特点:</p>
<ol>
<li>旋转都是把两节点中较小点作为根节点变为将较大点变为根节点,并调换红节点</li>
<li>使用递归的方式进行旋转,每次返回经过旋转的当前节点值.</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">rotateleft</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		Node temp=node.right;</div><div class="line">		node.right=temp.left; <span class="comment">//注意:本行与下面一行不可颠倒</span></div><div class="line">		temp.left=node;</div><div class="line">		temp.colour=node.colour;</div><div class="line">		node.colour=Red;</div><div class="line">		temp.N=node.N;</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> temp;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">rotateright</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		Node temp=node.left;</div><div class="line">		node.left=temp.right;</div><div class="line">		temp.right=node;</div><div class="line">		temp.colour=node.colour;</div><div class="line">		node.colour=Red;</div><div class="line">		temp.N=node.N;</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> temp;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><p>情况:</p>
<ol>
<li>向 2- 结点中插入新键:如果新键小于老键,我们只需将新键插入老键左链接并作为红节点.若大于,则需要将新键插入老键右链接,并进行左旋.</li>
<li>向树底的 2- 结点插入新键:与情况1相同<br><em>以上两种情况同2-3查找树中的插入情况1相类似.</em></li>
</ol>
<p>3.一棵双键树 〈 即一个 3- 结点〉 中插入新键:<br>a. 新键大于原树中的两个键:这种情况新键作为紅节点插入到双键树的右侧,那么就出现了两个红链接的现象,此时将两个红链接都置黑,得到3个2-树<br>对应于2-3查找树的情况2<br>b. 如果新键小于原树中的两个键,那么新键会被放置进当前左子树的左子树中,这样就出现了两条连续的红链接,此时将根节点右旋即可得到情况a.<br>c. 如果新键小于原树中的一个键大于另外一个,那么也会出现两个连续红链接的现象,一个为左链接一个下一层的右链接.,此时将右链接左旋即可得到情况b.</p>
<p>其中情况a的变换颜色,我们需要把子节点的链接由红置黑,同时将父节点由黑置红.值得注意的是:根节点始终应当是黑的.</p>
<p>4.树底部3-节点插入新键<br>与情况4相同</p>
<p>整个插入过程使用递归实现,事实上就是一个红链接不断向上移动的过程</p>
<p>总的来说,对于红黑树的操作为:</p>
<ol>
<li>如果右子结点是红色的而左子结点是黑色的.当前节点进行左旋转;</li>
<li>如果左子结点是红色的且它的左子结点也是红色,当前节点进行右旋转</li>
<li>如果左右子结点均为红色进行颜色转换。<br>需要在插入时按次序执行上述语句.<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flipcolour</span><span class="params">(Node node)</span></span></div><div class="line">&#123;</div><div class="line">	node.right.colour=Black;</div><div class="line">	node.left.colour=Black;</div><div class="line">	node.colour=Red;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key,Value value)</span></span></div><div class="line">&#123;</div><div class="line">	root=put(root,key, value);</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changecolour</span><span class="params">(Node node)</span></span></div><div class="line">&#123;</div><div class="line">	node.left.colour=node.right.colour==Black;</div><div class="line">	node.colour=Red;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node node,Key key,Value value)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Node(key, value, <span class="number">1</span>, Red);</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>) node=put(node.left, key, value);</div><div class="line">	<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>) node=put(node.right, key, value);</div><div class="line">	<span class="keyword">if</span>(cmp==<span class="number">0</span>) node.value=value;</div><div class="line">	<span class="keyword">if</span>(node.right.colour==Red&amp;&amp;node.left.colour!=Red)</div><div class="line">		node=rotateleft(node);</div><div class="line">	<span class="keyword">if</span>(node.left.colour==Red&amp;&amp;node.left.left.colour==Red)</div><div class="line">		node=rotateright(node);</div><div class="line">	<span class="keyword">if</span>(node.left.colour==Red&amp;&amp;node.right.colour==Red)</div><div class="line">		changecolour(node);</div><div class="line">	node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><ol>
<li>所有基于红黑树的符号表实现都能保证操作的运行时间为<strong>对数</strong>级别</li>
<li>一棵大小为 N 的红黑树的高度不会超过 2lgn,事实上在大多数情况下比较次数为lgn-0.5</li>
<li>相比较于二叉查找树的1.39lgn提升了40%</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python的格式化字符串与转义字符]]></title>
      <url>https://ly11tea.github.io/2016/09/24/python%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Give therefore to the emperor the things that are the emperor’s;and to God the things that are God’s.</p>
<p> <em>Gospel of Matthew</em></p>
</blockquote>
<p>其实python的格式化字符串与C的printf函数相当类似,但用法显得更为灵活,所以还是稍微总结一下.<br><a id="more"></a> </p>
<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>先看一下python字符串的格式,格式化字符串时，Python使用一个字符串作为模板。模板中有格式符，这些格式符为真实值预留位置，并说明真实数值应该呈现的格式。Python用一个tuple将多个值传递给模板，每个值对应一个格式符。</p>
<blockquote>
<p>模板%(value1,value2,…)</p>
</blockquote>
<p>其中模板格式为:</p>
<blockquote>
<p>[(name)][flags][width].[precision]typecode</p>
</blockquote>
<p>下面来一一介绍其中的元素含义:</p>
<h2 id="flags和width-precision"><a href="#flags和width-precision" class="headerlink" title="flags和width precision"></a>flags和width precision</h2><table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">作用 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">定义宽度或者小数点精度 </td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">用做左对齐 </td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">在正数前面显示加号( + ) </td>
</tr>
<tr>
<td style="text-align:center">(空格键)</td>
<td style="text-align:center">在正数前面显示空格 </td>
</tr>
<tr>
<td style="text-align:center">#</td>
<td style="text-align:center">在八进制数前面显示零(‘0’)，在十六进制前面显示’0x’或者’0X’(取决于用的是’x’还是’X’) </td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">显示的数字前面填充‘0’而不是默认的空格 </td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">‘%%’输出一个单一的’%’ </td>
</tr>
<tr>
<td style="text-align:center">(var)</td>
<td style="text-align:center">映射变量(字典参数) </td>
</tr>
<tr>
<td style="text-align:center">m.n</td>
<td style="text-align:center">m 是显示的最小总宽度,n是小数点后的位数(如果可用的话) </td>
</tr>
</tbody>
</table>
<h2 id="typecode"><a href="#typecode" class="headerlink" title="typecode"></a>typecode</h2><table>
<thead>
<tr>
<th style="text-align:center">格式化字符</th>
<th style="text-align:center">转换方式 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%c</td>
<td style="text-align:center">转换成字符(ASCII 码值，或者长度为一的字符串) </td>
</tr>
<tr>
<td style="text-align:center">%r</td>
<td style="text-align:center">优先用 repr()函数进行字符串转换 </td>
</tr>
<tr>
<td style="text-align:center">%s</td>
<td style="text-align:center">优先用 str()函数进行字符串转换 </td>
</tr>
<tr>
<td style="text-align:center">%d / %i</td>
<td style="text-align:center">转成有符号十进制数 </td>
</tr>
<tr>
<td style="text-align:center">%u</td>
<td style="text-align:center">转成无符号十进制数 </td>
</tr>
<tr>
<td style="text-align:center">%o</td>
<td style="text-align:center">转成无符号八进制数 </td>
</tr>
<tr>
<td style="text-align:center">%x/%X</td>
<td style="text-align:center">(Unsigned)转成无符号十六进制数(x/X代表转换后的十六进制字符的大小写) </td>
</tr>
<tr>
<td style="text-align:center">%e/%E</td>
<td style="text-align:center">转成科学计数法(e/E 控制输出 e/E) </td>
</tr>
<tr>
<td style="text-align:center">%f/%F</td>
<td style="text-align:center">转成浮点数(小数部分自然截断) </td>
</tr>
<tr>
<td style="text-align:center">%g/%G</td>
<td style="text-align:center">%e 和%f/%E 和%F 的简写 </td>
</tr>
<tr>
<td style="text-align:center">%%</td>
<td style="text-align:center">输出% </td>
</tr>
</tbody>
</table>
<p>其中比较有用的可能是m.n,即设置浮点数和整数的总宽度和浮点数的小数精度.<br>基本的一些例子:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%x"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'6c'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%X"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'6C'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%#X"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'0X6C'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%#x"</span> % <span class="number">108</span> </div><div class="line"><span class="string">'0x6c'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%f'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.567890'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%.2f'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.57'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%E'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1.234568E+03'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%e'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1.234568e+03'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%g'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.57'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%G'</span> % <span class="number">1234.567890</span> </div><div class="line"><span class="string">'1234.57'</span> </div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"%e"</span> % (<span class="number">1111111111111111111111L</span>) </div><div class="line"><span class="string">'1.111111e+21'</span></div><div class="line"><span class="comment">#科学计数法表示同样也可以适用m.n,</span></div><div class="line">&gt;&gt;&gt;print(<span class="string">"%66.10e"</span> % (<span class="number">1111111111111111111111</span>))</div><div class="line"></div><div class="line">                                                  <span class="number">1.1111111111e+21</span></div></pre></td></tr></table></figure></p>
<p>值得一提的是格式化字符<em>,它能够用后面tuple中相应的值代入width和precision<br>例如 :`print(“%.</em>f” % (4, 1.2))`<br>还有利用name参数,我们可以使用预先定义的格式化字符串生成字符串:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">formatter = <span class="string">"%r %r %r %r"</span></div><div class="line"><span class="keyword">print</span> formatter % (<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>当然我们可以看到python的格式化字符串指令不依赖于函数,只是一个返回字符串的运算符.所以我们既可以用来输出字符串,也可以用来定义字符串..等等其他用途.</p>
<h1 id="python的三引号"><a href="#python的三引号" class="headerlink" title="python的三引号"></a>python的三引号</h1><p>三引号’’’ ‘’’,在print中用来输出多行字符串,直接使用三引号还可以用来进行多行注释.</p>
<h1 id="python的转义字符"><a href="#python的转义字符" class="headerlink" title="python的转义字符"></a>python的转义字符</h1><table>
<thead>
<tr>
<th style="text-align:center">转义字符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">(在行尾时)</td>
<td style="text-align:center">续行符</td>
</tr>
<tr>
<td style="text-align:center">\</td>
<td style="text-align:center">反斜杠符号</td>
</tr>
<tr>
<td style="text-align:center">\’</td>
<td style="text-align:center">单引号</td>
</tr>
<tr>
<td style="text-align:center">\”</td>
<td style="text-align:center">双引号</td>
</tr>
<tr>
<td style="text-align:center">\a</td>
<td style="text-align:center">响铃</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:center">退格(Backspace)</td>
</tr>
<tr>
<td style="text-align:center">\e</td>
<td style="text-align:center">转义</td>
</tr>
<tr>
<td style="text-align:center">\000</td>
<td style="text-align:center">空</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:center">换行</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td style="text-align:center">纵向制表符</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:center">横向制表符</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td style="text-align:center">回车</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td style="text-align:center">换页</td>
</tr>
<tr>
<td style="text-align:center">\oyy</td>
<td style="text-align:center">八进制数yy代表的字符，例如：\o12代表换行</td>
</tr>
<tr>
<td style="text-align:center">\xyy</td>
<td style="text-align:center">十进制数yy代表的字符，例如：\x0a代表换行</td>
</tr>
<tr>
<td style="text-align:center">\other</td>
<td style="text-align:center">其它的字符以普通格式输出</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[算法4 二叉查找树]]></title>
      <url>https://ly11tea.github.io/2016/09/23/%E7%AE%97%E6%B3%954-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>世界上有10种人，一种懂二进制，一种不懂</p>
</blockquote>
<a id="more"></a> 
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>一根二又查找树 ( BST ) 是一根<strong>二叉树</strong>，其中每个结点都含有一个Comparable 的键(以及相关联的值)且每个结点的键都<strong>大于其左子树</strong>中的任意结点的键而<strong>小子右子树</strong>的任意结点的键。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1></blockquote>
<h2 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h2><p>用嵌套定义的链表实现,每个节点含有一个健、 一个值、一条左链接、一条右链接和一个结点计数器<br>实现的私有方法 size方法 会将空链接的值当作 0 ，这样我们就能保证以下公式对于二叉树中的任意结点 x 总是成立:<br>size(x)  =  size(x .left)  +  size(x. right)  +  1 </p>
<h2 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h2><p>不难想象,搜索树的查找方法是一个递归的算法:</p>
<ol>
<li>如果树是空的.则查找立刻命中;</li>
<li>如果被查找的键和根结点的键相等，查找命中.</li>
<li>如果被查找的键大于根节点的值,则跳向右节点,如果小于则跳向左节点.</li>
<li>递归的执行</li>
</ol>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> alg;</div><div class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.*;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;,<span class="title">Value</span>&gt; </span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">private</span> Node root;</div><div class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">private</span> Value value;</div><div class="line">		<span class="keyword">private</span> Key key;</div><div class="line">		<span class="keyword">private</span> Node left;</div><div class="line">		<span class="keyword">private</span> Node right;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">int</span> N;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key,Value value,<span class="keyword">int</span> N)</span></span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">this</span>.key=key;</div><div class="line">			<span class="keyword">this</span>.value=value;</div><div class="line">			<span class="keyword">this</span>.N=N;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> size(root);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> node.N;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"><span class="comment">/*</span></div><div class="line"> * 公有接口与私有接口需分开:对于用户公有接口,get只需关心键值是什么</div><div class="line"> * 而在私有接口中因为是采用递归的方法查找元素,故需要加入node参数</div><div class="line">*/</div><div class="line">	<span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> get(root,key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> Value <span class="title">get</span><span class="params">(Node node,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> get(node.left,key);</div><div class="line">		<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> get(node.right, key);</div><div class="line">		<span class="keyword">return</span> node.value;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Value value,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		root=put(root, key,value);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node node ,Value value,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Node(key, value, <span class="number">1</span>);</div><div class="line">		<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">			node.left=put(node.left, value, key);</div><div class="line">		<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">			node.right=put(node.right, value, key);</div><div class="line">		<span class="keyword">if</span>(cmp==<span class="number">0</span>)</div><div class="line">			node.value=value;</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>使用二叉查找树的算法的运行时间取决于<strong>树的形状</strong>,在最好的情况下，<br>一棵含有 N 个结点的树是完全平衡的.每条空链接和根结点的距离都为~lgN。 在最坏的情况下，搜索路径上可能有 N个结点。<br><img src="/images/condition.png" style="width: 260px;"></p>
<p>如果假设元素的插入顺序是随机的,二义查找树和快速排序几乎就是双胞胎。 树的根节点就是快速排序巾的第一个切分元素(左侧的键都比这个元素小，右侧的键都比它大).<br>可证明:二叉搜索搜索树寻找到一个元素的平均时间为<strong>2lnn</strong>(1.39 lgn)</p>
<h1 id="顺序化函数"><a href="#顺序化函数" class="headerlink" title="顺序化函数"></a>顺序化函数</h1><h2 id="floor和ceiling"><a href="#floor和ceiling" class="headerlink" title="floor和ceiling"></a>floor和ceiling</h2><p>floor(向下取整,找到小于等于要求元素的最大值):</p>
<ol>
<li>若要求元素小于当前节点,则floor元素在左子树中或者无floor元素(左子树为空);</li>
<li>若要求的元素大于当前节点且右子树中有小于待求元素的节点时,要求节点在右子树中.否则当前节点就是要求节点</li>
</ol>
<p>ceiling(向上取整,找到大于等于要求元素的最小值):</p>
<ol>
<li>若要求元素小于当前节点且左子树中还有大于要求元素的节点时,要求节点在左子树中,否则就是当前节点.</li>
<li>若要求元素大于当前节点时,则ceiling元素在右子树中或者没有(右子树为空)</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">public</span> Node <span class="title">ceiling</span><span class="params">(Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> ceiling(root,key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">ceiling</span><span class="params">(Node node,Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		Node t=ceiling(node.left,key);</div><div class="line">		<span class="keyword">if</span> (t==<span class="keyword">null</span>) </div><div class="line">			<span class="keyword">return</span> node;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> t;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> ceiling(node.right, key);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">floor</span><span class="params">(Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> floor(root,key);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node node,Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp==<span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	<span class="keyword">if</span> (cmp&lt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> floor(node.left,key);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">	&#123;</div><div class="line">		Node t=floor(node.right, key);</div><div class="line">		<span class="keyword">if</span>(t==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> node;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> t;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="rank和select"><a href="#rank和select" class="headerlink" title="rank和select"></a>rank和select</h2><p>select:</p>
<ol>
<li>即为访问在数组中次序为K(从0开始)的元素，和查找键值为KEY的元素方法不同</li>
<li>找到排名为k 的键(即树中恰好有k个小于其的键)。如果左子树的结点数t 大于k，那么我们就继续(递归地)在左子树中查找排名为 k 的键;如果 t 等于k， 我们就返回根结点;如果 t小子k，我们就(递归地)在右子树巾查找排名为 (k-t-1)(-1是因为根节点) 的节点并返回。 </li>
</ol>
<p>rank:</p>
<ol>
<li>rank是select的逆方法</li>
<li>如果给定的键根结点的键相等.我们返回左子树中的节点数t;如果给定的健小于根结点.我们会返回<br>该键在左子树子树中的排名(递归计算);如果给定的健大于根结点，我们会返回t+1+该键右子树的排名.</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> Node <span class="title">select</span><span class="params">(<span class="keyword">int</span> i)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> select(i,root);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">select</span><span class="params">(<span class="keyword">int</span> i,Node node)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> length=size(node.left);</div><div class="line">		<span class="keyword">if</span> (length==i)</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> node;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (length&gt;i) </div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> select(i, node.left);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			<span class="keyword">return</span> select(i-length-<span class="number">1</span>, node.right);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> rank(root,key);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node node,Key key)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">int</span> t=size(node.left);</div><div class="line">		<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(cmp==<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> t;</div><div class="line">		<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> rank(node.left, key);</div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">return</span> t+<span class="number">1</span>+rank(node.right, key);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>删除最大键和删除最小键</p>
<ol>
<li>从根节点开始不断地(递归)向左子树遍历,直到某个节点左子树为空时(显然这个节点就是最小的节点),返回这个节点的右节点,使这个节点的父节点指向这个节点的右节点.</li>
</ol>
<p>删除指定节点,设指向当前节点为x</p>
<ol>
<li>将指向即将被删除的节点的链接保存为t;</li>
<li>将节点链接保存为min(t.right)</li>
<li>将t.right中的最小节点删除.</li>
<li>x.left=t.left</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delmin</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">	root=delmin(root);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">delmin</span><span class="params">(Node node)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(node.left==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> node.right;</div><div class="line">	<span class="keyword">else</span> </div><div class="line">	&#123;</div><div class="line">		node.left=delmin(node.left);</div><div class="line">		node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span> node;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Key key)</span></span></div><div class="line">&#123;</div><div class="line">	root=del(root,key);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">del</span><span class="params">(Node node,Key key)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">if</span> (node==<span class="keyword">null</span>)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">int</span> cmp=key.compareTo(node.key);</div><div class="line">	<span class="keyword">if</span>(cmp&lt;<span class="number">0</span>)</div><div class="line">		node.left=del(node.left, key);</div><div class="line">	<span class="keyword">if</span>(cmp&gt;<span class="number">0</span>)</div><div class="line">		node.right=del(node.right, key);</div><div class="line">	<span class="keyword">else</span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node.left==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> node.right;</div><div class="line">		<span class="keyword">if</span>(node.right==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span> node.left;</div><div class="line">		<span class="keyword">else</span></div><div class="line">		&#123;</div><div class="line">			Node temp=node;</div><div class="line">			node=min(node.right);</div><div class="line">			node.right=delmin(temp.right);</div><div class="line">			node.left=temp.left;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">    node.N=size(node.left)+size(node.right)+<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> node;	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要体会递归删除节点的方法:</p>
<ol>
<li>使用返回值为节点类型(node)的函数依次向下递归,不需删除的节点,返回<strong>当前递归所在的节点</strong></li>
<li>需要删除的节点,返回<strong>要删除节点的替代节点</strong>.</li>
<li>还要注意维护当前节点的<strong>数量值</strong>.</li>
</ol>
<h2 id="范围查找"><a href="#范围查找" class="headerlink" title="范围查找"></a>范围查找</h2><ol>
<li>使用中序遍历的方法,先打印出左子树所有的键,然后向上回溯并打印<strong>最近</strong>的根节点,最后打印右子树</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Iterable&lt;Key&gt;keys(Key lo,Key hi)</div><div class="line">	&#123;</div><div class="line">		Queue&lt;Key&gt; matchkeys=<span class="keyword">new</span> Queue&lt;Key&gt;() ;</div><div class="line">		keys(matchkeys, root,lo,hi);</div><div class="line">		<span class="keyword">return</span> matchkeys;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">keys</span><span class="params">(Queue&lt;Key&gt;matchkeys,Node node,Key lo,Key hi)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(node==<span class="keyword">null</span>)</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		<span class="keyword">int</span> locmp=lo.compareTo(node.key);</div><div class="line">		<span class="keyword">int</span> hicmp=hi.compareTo(node.key);</div><div class="line">		<span class="keyword">if</span>(locmp&lt;<span class="number">0</span>)</div><div class="line">			keys(matchkeys,node.left,lo,hi);</div><div class="line">		<span class="keyword">if</span>(locmp&lt;=<span class="number">0</span>&amp;&amp;hicmp&gt;=<span class="number">0</span>)</div><div class="line">			matchkeys.enqueue(node.key);</div><div class="line">		<span class="keyword">if</span>(hicmp&gt;<span class="number">0</span>)</div><div class="line">			keys(matchkeys, node.right, lo, hi);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>要注意中序遍历的递归实现的顺序:先使用<strong>递归语句不断遍历左子树</strong>,遍历完成后首先将当前左子节点送入队列,然后送入根节点,这时若条件达成还会遍历右子树.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一首诗 翻译]]></title>
      <url>https://ly11tea.github.io/2016/09/20/%E4%B8%80%E9%A6%96%E8%AF%97-%E7%BF%BB%E8%AF%91/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>Here, though the world explode, these two survive,And it is always eighteen ninety-five.<br><strong>Vincent Starrett</strong></p>
</blockquote>
<blockquote>
<p>Here dwell together still two men of note<br>Who never lived and so can never die:<br>How very near they seem, yet how remote<br>That age before the world went all awry.<br>But still the game’s afoot for those with ears<br>Attuned to catch the distant view-halloo:<br>England is England yet, for all our fears—<br>Only those things the heart believes are true.</p>
<p>A yellow fog swirls past the window-pane<br>As night descends upon this fabled street:<br>A lonely hansom splashes through the rain,<br>The ghostly gas lamps fail at twenty feet.<br>Here, though the world explode, these two survive,<br>And it is always eighteen ninety-five.</p>
</blockquote>
<a id="more"></a> 
<p>这是著名(好吧其实之前我也没听说过)的福迷Vincent Starrett写的一首诗,这个人几乎与书中的福尔摩斯生活在一个时代,主业是一个美国的记者,但他更为人所知的是写过一本研究福尔摩斯的著作《The Private Life of Sherlock Holmes》(在1933年出版,可见这家伙迷得有多早),还有这首诗.听说神夏4今年寒假会出来,就想着翻译下这首诗酝酿一下感情<br>)))逃</p>
<blockquote>
<p>这住着两个重要的人<br>他们从来没存在过所以也从未死去<br>他们离我们很近却又十分遥远<br>在世界还未崩坏之前<br>但对观众们来说好戏才刚开始<br>就像是远方猎人的呼号:<br>英格兰还是那个令人恐惧的大不列颠–<br>我们相信这是真的.</p>
<p>硫磺色的烟雾划过窗口<br>当夜幕降临这条虚构的街.<br>孤夜,一架马车穿过雨幕<br>鬼魅的煤气灯孤悬于20英尺外.<br>在这里,世界爆炸,这两个人活下来,<br>永恒的1895年.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[<梦断代码>书摘与笔记]]></title>
      <url>https://ly11tea.github.io/2016/09/18/%E6%A2%A6%E6%96%AD%E4%BB%A3%E7%A0%81-%E4%B9%A6%E6%91%98%E4%B8%8E%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“今有程序员五人，代码需时日几何？” “一年。”<br>“吾急需之！若有十人，几何？” “两年。”<br>“百人若何？” “万世。”</p>
</blockquote>
<a id="more"></a> 
<h1 id="软件时间"><a href="#软件时间" class="headerlink" title="软件时间"></a>软件时间</h1><blockquote>
<p>1.那时我年方十五，正迷恋于一个叫做 Sumer的游戏，在费就申 ，我管理着新月沃土上一座古代城邦。今天的电脑游戏玩家也会嘲笑其在嫩:它在一卷纸上逐行打印出大写字母，报告游戏进程。由远姑且分配食用和留种的谷物，然后程序就会告知城邦每年的发展情况。”汉漠拉比陆下，”程序像一个诚惶诚恐的宰相般报告说，”微臣伏启圣鉴……”</p>
</blockquote>
<p>这句话让我想起了2004-05年的时候玩三国志的经历,那时候不知道从哪发现了一个对岸三国游戏爱好者的网站,是一个只有ip地址的网站,从那上面下到了一个dos下的三国游戏,显示游戏地图就是用字符串打印出来的网状图,我想这就是”蛮荒时代”游戏的样子吧.</p>
<blockquote>
<p>2.我不在乎干到多晚。 F 线地铁整夜运行， 可以把我带回位于皇后区<br>的家。一定得重新设计游戏中的革命模式!</p>
</blockquote>
<p>我们编写或者重构软件时总是雄心勃勃的,其实沉浸在编码的体验与沉迷游戏是一样的,常常埋头实现某个feature或者fix bug,再抬头时窗外天色已经昏暗.从另一个方面来说这个过程又是危险的,同电子游戏一样,这个过程能让你完全失去时间的概念,这就是作者所说的软件时间,可长可短.再没有比他更危险,混沌却又迷人的事情了.</p>
<blockquote>
<p>3.关于软件缺陆的话题，只要谈上几分钟，必会有人拍案叹道，”为什<br>么就是不能像造桥那样造软件? .. </p>
</blockquote>
<p>虽然我们一直叫软件工程,然而却从来没有其他任何一种工程掺杂进这么多人的因素,软件工程,事实上我们是在和自己战斗.</p>
<blockquote>
<p>4.软件错误每年造成美国 595 亿美元的经济损失，三分之二的项目明显延误或超出预算，甚至干脆无疾而终。</p>
</blockquote>
<p>延误,延误.可能是每一个项目都要经历的过程,我们永远没有办法准确预估要解决的问题的难度和解决手段的准确性,并且往往显得乐观.所以不要相信程序员的时间表.</p>
<blockquote>
<p>5.有些人梦想炸毁今天的整座软件大厦，替以某种全新之物。 有些人则只一昧盼望找到不太顽固、更能响应人类愿望和行为流程的程序员，盼望能得到招之即来、挥之即去的软件，盼望得到足堪依赖的代码。</p>
</blockquote>
<p>只要我们无法改变我们自己本身,就只能继续妥协.从面向过程到面向对象,泛型编程,我们尽量让自己妥协的更少.</p>
<h1 id="死定了"><a href="#死定了" class="headerlink" title="死定了"></a>死定了</h1><blockquote>
<p>1.不确定因素太多 : 你所需的时间取决于其他人所花的时间。</p>
</blockquote>
<p>开发更多的时候是一项团队运动,一个节点上的阻塞,可能会导致全面的阻塞.</p>
<blockquote>
<p>2.意见取得一致了:黑洞式的缺陆一一即无法确定修正所需时长的缺<br>陷一一在 Bugzilla 申应该用特别的警示词标记出来。</p>
</blockquote>
<p>黑洞式的漏洞看上去会使人感到焦躁,然而真正深入其中会发现他无知无觉,甚至充满诱惑,引诱你用越来越多的时间修复他,也许下一刻就好了呢?,我们在其前的态度越来越像一个赌徒,不过筹码换成了时间,心中也只是单纯希望之前的时间没有白费,但眸然回首,更多的时间消耗于其中.</p>
<blockquote>
<p>3.软件项目难以按照进度安排实现，这种情况极为常见，而且为众人所宽窑。在软件开发世界里，进度延误普遍到人们特意生造出一个委婉词来描述它: slippage (失速).当然， 每个领域都存在延误现象。司法诉讼程序蜗行般的进度尽人皆知 ; 建筑承包商要是按期完工，就会招来怀疑的目光。然而，软件时间自我扭曲再头尾相撞，如同奠比乌斯环①一般令人费解。进度忽而突飞猛进，忽而不知何故驻足道中。在你以为大功即将告成之时，却又山穷水尽，花上整半年时间， 一无所得。</p>
</blockquote>
<p>软件的时间是非线性的,不确定的.我们很可能因为改掉了一个BUG,加快进度.也可能因为增加一个feature掉入深渊.有没有一种方式如同建筑上的施工进度一样线性的衡量开发进度,还没有答案.</p>
<blockquote>
<p>4.布鲁克斯法则就这样产生了 ， 昕起来既是原则也是悖论”<strong>往已延误的项目中补充人力 ， 只会使其继续延误</strong>。”布鲁克斯写道，软件开发者通常都是乐天派，他们认定每个缺陷可以被迅速修正，且修正旧缺陷必能减少新缺陷的数量。布鲁克斯发现，在实际开发中，编码只占项目开发时间的 1/6 ， 有一半时间用于测试和修正缺陷。但只有少数项目经理会真正按照这种思路来安排开发人员的工作时间。</p>
</blockquote>
<p>2-8时间在软件开发上一样适用</p>
<blockquote>
<p>5.在预估及安排项目进度上的每一份努力,是”危险且具欺骗性的神话”。<br>所谓”人月··，是一种科学管理概念，它假定生产力可被拆分为不连续、无差异、可替换的单元。布鲁克斯观察到，”<strong>只有在任务能分派给许多互相之间无须沟通的工作者</strong>时，人和月才是可互换品。”对于软件而言， 项目各有差异、工具不断升级，每当团队中加入一个新组员，老组员就得放下手边的工作，帮助新组员进入角色，每位组员都要等待重新分派任务，好让新组员有事可做。在你意识到这一切之前，已经远远落后于进度了。在最坏的情况下，这会导致<strong>灾难般的延误循环</strong>，一种”再生性进度灾难”。每次重新安排进度计划，都导致<strong>雇用更多人力，于是又不得不重新安排</strong>进度。布鲁克斯对此心存恐惧:疯狂在兹。”</p>
</blockquote>
<p>这算是对人月神话比较经典的概括,十月怀胎,一朝分娩.然而十个孕妇,也无法在一个月里生出孩子.</p>
<blockquote>
<p>6.尽管他们采用了诸如邮件列表、blog、缺陆跟踪、源码控制等工具，但和他人保持一致仍然极其困难。</p>
</blockquote>
<p>没有银弹.自从人月神话诞生那天起有太多的东西被当做银弹,然而没有一个真正奏效.</p>
<blockquote>
<p>7.”开放源代码软件”这种开发方法论在 〈 人月神话〉 的年代尚未出现。与之后其他任何一种开发方式不同，开源让编程世界错以为布鲁克斯法则将成弃履。<br>1985 年，麻省理工怪才斯托曼出于对商业软件产业封闭代码积习的憎恨， 创办了自由软件基金会( Free Software Foundation )。基金会发布了一种特殊的软件许可，依据该许可， 你能够获得全部所需代码、复用这些代码、组合到新产品中一一但利用该代码创建出来的任何产物，也必须采用同样的许可。这种被称作GPL ( GNU Public License )</p>
</blockquote>
<p>不管你相信与否这些人,这项运动确实改变了程序开发的方式,现如今,就连GNU当年的针对者,微软也拥抱了开源.</p>
<blockquote>
<p>8.”多年来，我一直在宣扬小工具、快速原型和进化式编程的 UNIX 福音。 可我曾相信，存在某种重要的复杂性，需要是集中旦有计划的手法来解决。 我也曾相信，最重要的软件……需要像<strong>建教堂一般，由独立的巫师或一队相互隔离的魔法师精心打造</strong>，在面世之前绝不发布 beta 版本。李纳斯 · 托瓦茨的开发风格一一平发布、多发布、全委托、尽开放一一让我吃惊。 这里不存在<strong>静穆、虔诚的教堂式开发</strong>一一相反，Linux社样看似一个<strong>乱哄哄的大集市</strong>，铺陈了各种日程和手法……要从中得到前后一致和稳定的系统，简直只能指望奇迹再三出现。可事实上<strong>这种集市风格看来行之有效</strong>.</p>
<p>9.瑞蒙德指出其中的两个要诀:其一，低成本、广泛地接人像互联网那样的网络，让开发者之间能建立迅速、可信的沟通渠道，存储可被开放访问的共享知识和代码池;其二，围绕一种领导方式一一如托瓦茨那样的方式一一形成合作团队的良好风气.<br>“只要<strong>有足够多的 beta 版测试人员和开发者队伍</strong>， 几乎所有问题都很快被发现，而且总有人知道该怎么修复。或者用不太正式的说法，眼<br>球足够多，缺陆无处躲。’我把这叫做 ‘ 李纳斯法则 ‘ “”乐享即能高效”瑞蒙德写道。”愉悦是金。”这些理想化的格言令人振奋,一旦需经实践验证。开放源代码似乎也受困于延误。开源运动的新集市模式在很多方面改变了计算世界，但说到能比大教堂模式更快地让新产品面世，却并无显著建树。</p>
</blockquote>
<p>敏捷型开发和开源同样不是银弹,他可能使我们开发出更好的软件,但并不一定以最快的速度.并且软件的质量还有可能出现下降:</p>
<blockquote>
<p>现在微软全面拥抱敏捷开发，敏捷开发指的就是快速迭代，第一天提出需求，第二天开发，第三天开发本人做简单局部测试，当天下午上线，根本没时间回归，一切回归测试结果以用户骂娘为准，所以不需要测试职位了.以前每个组的dev和tester比例是1:1，现在基本变成每个组只有很少的tester。</p>
</blockquote>
<p>win10开始微软尝试以快速迭代的互联网方式进行开发,大幅度减少了测试的工作和岗位,将用户反馈作为实际上的测试,这导致win10的最初几个开发版,bug连连.怪不得当时觉得微软对windows insider.这边的投入很大而且像是要搞出一个社区的样子,原来都是套路….</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo 命令总结]]></title>
      <url>https://ly11tea.github.io/2016/09/15/hexo-%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>其实作为一个轻量级的静态blog框架，hexo已经做到我能想到的最简单的实现步骤了。但是为了使用方便还是总结一下命令还有配置当中遇到的一些tricks。<br><a id="more"></a> </p>
<h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><h3 id="hexo的初始化"><a href="#hexo的初始化" class="headerlink" title="hexo的初始化"></a>hexo的初始化</h3><blockquote>
<p>1 hexo init</p>
</blockquote>
<p>在<strong>已经建好</strong>的目录下输入以上命令，会产生一个目录。要注意的是这个文件夹下不能已经含有文件或者git。</p>
<h3 id="hexo的生成"><a href="#hexo的生成" class="headerlink" title="hexo的生成"></a>hexo的生成</h3><blockquote>
<p>1 hexo generate<br>2 hexo g</p>
</blockquote>
<p>hexo实际上是通过在本地文件夹中的一系列的参数配置和md文件生成静态网页的(在public目录下).这个命令就完成了这个过程,下面的命令是上面的简写.</p>
<h3 id="hexo-在本地架设服务器"><a href="#hexo-在本地架设服务器" class="headerlink" title="hexo 在本地架设服务器"></a>hexo 在本地架设服务器</h3><blockquote>
<p>1 hexo server<br>2 hexo s</p>
</blockquote>
<p>我们可以利用这个命令在本地架设起博客,通常使用这个命令在发布前预览效果.<br>还可以在调试过程中输入<code>hexo s --debug</code>来得到调试信息还可以在不使用<code>hexo g</code>的前提下应用修改.</p>
<h3 id="hexo-发布到github"><a href="#hexo-发布到github" class="headerlink" title="hexo 发布到github"></a>hexo 发布到github</h3><blockquote>
<p>1 hexo deploy<br>2 hexo d</p>
</blockquote>
<p>在站点配置文件设定好之后,使用这个命令就能将站点发布到github上面.</p>
<h3 id="hexo-新建文件"><a href="#hexo-新建文件" class="headerlink" title="hexo 新建文件"></a>hexo 新建文件</h3><blockquote>
<p>1 hexo new [layout]/模板  “标题”</p>
</blockquote>
<p>这其中初始的layout(已实现为模板)有三种<code>post(默认),draft,page</code>,你还可以在<code>Scaffold</code>文件家中自定义新的文件模板,在上述三个layout之中.</p>
<h3 id="hexo-清除缓存"><a href="#hexo-清除缓存" class="headerlink" title="hexo 清除缓存"></a>hexo 清除缓存</h3><blockquote>
<p>1 hexo clean</p>
</blockquote>
<p>有时遇到一些稀奇古怪的问题时,不妨试一试这个命令,事实上就是清除public和deploy文件夹下的所有内容.再使用<code>hexo g</code>生成一遍.</p>
<h2 id="hexo-部署时的一些tricks"><a href="#hexo-部署时的一些tricks" class="headerlink" title="hexo 部署时的一些tricks"></a>hexo 部署时的一些tricks</h2><h3 id="没有文章时-主页不会生成"><a href="#没有文章时-主页不会生成" class="headerlink" title="没有文章时,主页不会生成"></a>没有文章时,主页不会生成</h3><p>这时访问地址会出现404,现象,其实是配置上并没有错.</p>
<h3 id="deploy的type名字"><a href="#deploy的type名字" class="headerlink" title="deploy的type名字"></a>deploy的type名字</h3><p>新版本中全站配置文件中type要写成git而不是github.</p>
<h3 id="首次deploy要安装deployer"><a href="#首次deploy要安装deployer" class="headerlink" title="首次deploy要安装deployer"></a>首次deploy要安装deployer</h3><p>命令为<code>npm install hexo-deployer-git --save</code></p>
<h3 id="站点配置文件中的url参数需要修改"><a href="#站点配置文件中的url参数需要修改" class="headerlink" title="站点配置文件中的url参数需要修改"></a>站点配置文件中的url参数需要修改</h3><p>在next中的localsearch就要用到这个参数生成目标连接。</p>
<h3 id="yaml文件键值后的冒号一定要留空格"><a href="#yaml文件键值后的冒号一定要留空格" class="headerlink" title="yaml文件键值后的冒号一定要留空格"></a>yaml文件键值后的冒号一定要留空格</h3><p>不留空格事实上值并没有赋给键</p>
<h2 id="一些参考"><a href="#一些参考" class="headerlink" title="一些参考"></a>一些参考</h2><p>网上也有许多hexo的文档和教程：</p>
<ul>
<li>hexo的 <a href="https://hexo.io/" target="_blank" rel="external">官方文档</a>.</li>
<li>next的<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">官方文档</a></li>
<li>hexo<a href="http://www.zipperary.com/2013/05/28/hexo-guide-1/" target="_blank" rel="external">系列教程</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[new]]></title>
      <url>https://ly11tea.github.io/2016/09/14/new/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[ss]]></title>
      <url>https://ly11tea.github.io/2016/09/13/ss/</url>
      <content type="html"></content>
    </entry>
    
  
  
</search>
